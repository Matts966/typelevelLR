
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template< typename Head, typename... Tail >
State< Head, Tail... >::State( Head const& head_, std::shared_ptr< State< Tail... > > const& tail_ )
  :head( head_ ), tail( tail_ ) {}

template< typename Head, typename... Tail >
std::shared_ptr< State< Head, Tail... > > State< Head, Tail... >::make( Head const& head, std::shared_ptr< State< Tail... > > const& tail ) {
  std::shared_ptr< State< Head, Tail... > > result( new State< Head, Tail... >( head, tail ) );
  result->this_ = result;
  return result;
}


template< typename Head, typename... Tail >
auto State< Head, Tail... >::end() {
  return end_transition( this_.lock() );
}

template< typename Head, typename... Tail >
auto State< Head, Tail... >::and_( std::string const& arg1 ) {
  return and__transition( this_.lock(), arg1 );
}

template< typename Head, typename... Tail >
auto State< Head, Tail... >::color( std::string const& arg1 ) {
  return color_transition( this_.lock(), arg1 );
}

template< typename Head, typename... Tail >
auto State< Head, Tail... >::style( std::string const& arg1 ) {
  return style_transition( this_.lock(), arg1 );
}

template< typename Head, typename... Tail >
auto State< Head, Tail... >::digraph( std::string const& arg1 ) {
  return digraph_transition( this_.lock(), arg1 );
}

template< typename Head, typename... Tail >
auto State< Head, Tail... >::graph( std::string const& arg1 ) {
  return graph_transition( this_.lock(), arg1 );
}

template< typename Head, typename... Tail >
auto State< Head, Tail... >::shape( std::string const& arg1 ) {
  return shape_transition( this_.lock(), arg1 );
}

template< typename Head, typename... Tail >
auto State< Head, Tail... >::node( std::string const& arg1 ) {
  return node_transition( this_.lock(), arg1 );
}

template< typename Head, typename... Tail >
auto State< Head, Tail... >::edge( std::string const& arg1 ) {
  return edge_transition( this_.lock(), arg1 );
}

template< typename Head, typename... Tail >
auto State< Head, Tail... >::to( std::string const& arg1 ) {
  return to_transition( this_.lock(), arg1 );
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// transitions

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node2, Tail... > > const& src ) {
  return src->head.arg1;
}

template< typename... Tail >
auto digraph_transition( std::shared_ptr< State< Node1, Tail... > > const& src, std::string const& arg1 ) {
  return State< Node9, Node1, Tail... >::make( Node9( arg1 ), src );
}

template< typename... Tail >
auto graph_transition( std::shared_ptr< State< Node1, Tail... > > const& src, std::string const& arg1 ) {
  return State< Node17, Node1, Tail... >::make( Node17( arg1 ), src );
}

template< typename... Tail >
auto color_transition( std::shared_ptr< State< Node3, Node4, Node4, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->head.arg1;
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsCons( x1, x2 ) );
  std::shared_ptr< State< Node4, Tail... > > const& tail = src->tail->tail;
  return color_transition( State< Node3, Node4, Tail... >::make( Node3( content ), tail ), arg1 );
}

template< typename... Tail >
auto color_transition( std::shared_ptr< State< Node3, Node4, Node5, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->head.arg1;
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsCons( x1, x2 ) );
  std::shared_ptr< State< Node5, Tail... > > const& tail = src->tail->tail;
  return color_transition( State< Node21, Node5, Tail... >::make( Node21( content ), tail ), arg1 );
}

template< typename... Tail >
auto color_transition( std::shared_ptr< State< Node3, Node4, Node6, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->head.arg1;
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsCons( x1, x2 ) );
  std::shared_ptr< State< Node6, Tail... > > const& tail = src->tail->tail;
  return color_transition( State< Node12, Node6, Tail... >::make( Node12( content ), tail ), arg1 );
}

template< typename... Tail >
auto color_transition( std::shared_ptr< State< Node3, Node4, Node7, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->head.arg1;
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsCons( x1, x2 ) );
  std::shared_ptr< State< Node7, Tail... > > const& tail = src->tail->tail;
  return color_transition( State< Node18, Node7, Tail... >::make( Node18( content ), tail ), arg1 );
}

template< typename... Tail >
auto edge_transition( std::shared_ptr< State< Node3, Node4, Node4, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->head.arg1;
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsCons( x1, x2 ) );
  std::shared_ptr< State< Node4, Tail... > > const& tail = src->tail->tail;
  return edge_transition( State< Node3, Node4, Tail... >::make( Node3( content ), tail ), arg1 );
}

template< typename... Tail >
auto edge_transition( std::shared_ptr< State< Node3, Node4, Node5, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->head.arg1;
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsCons( x1, x2 ) );
  std::shared_ptr< State< Node5, Tail... > > const& tail = src->tail->tail;
  return edge_transition( State< Node21, Node5, Tail... >::make( Node21( content ), tail ), arg1 );
}

template< typename... Tail >
auto edge_transition( std::shared_ptr< State< Node3, Node4, Node6, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->head.arg1;
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsCons( x1, x2 ) );
  std::shared_ptr< State< Node6, Tail... > > const& tail = src->tail->tail;
  return edge_transition( State< Node12, Node6, Tail... >::make( Node12( content ), tail ), arg1 );
}

template< typename... Tail >
auto edge_transition( std::shared_ptr< State< Node3, Node4, Node7, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->head.arg1;
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsCons( x1, x2 ) );
  std::shared_ptr< State< Node7, Tail... > > const& tail = src->tail->tail;
  return edge_transition( State< Node18, Node7, Tail... >::make( Node18( content ), tail ), arg1 );
}

template< typename... Tail >
auto node_transition( std::shared_ptr< State< Node3, Node4, Node4, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->head.arg1;
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsCons( x1, x2 ) );
  std::shared_ptr< State< Node4, Tail... > > const& tail = src->tail->tail;
  return node_transition( State< Node3, Node4, Tail... >::make( Node3( content ), tail ), arg1 );
}

template< typename... Tail >
auto node_transition( std::shared_ptr< State< Node3, Node4, Node5, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->head.arg1;
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsCons( x1, x2 ) );
  std::shared_ptr< State< Node5, Tail... > > const& tail = src->tail->tail;
  return node_transition( State< Node21, Node5, Tail... >::make( Node21( content ), tail ), arg1 );
}

template< typename... Tail >
auto node_transition( std::shared_ptr< State< Node3, Node4, Node6, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->head.arg1;
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsCons( x1, x2 ) );
  std::shared_ptr< State< Node6, Tail... > > const& tail = src->tail->tail;
  return node_transition( State< Node12, Node6, Tail... >::make( Node12( content ), tail ), arg1 );
}

template< typename... Tail >
auto node_transition( std::shared_ptr< State< Node3, Node4, Node7, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->head.arg1;
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsCons( x1, x2 ) );
  std::shared_ptr< State< Node7, Tail... > > const& tail = src->tail->tail;
  return node_transition( State< Node18, Node7, Tail... >::make( Node18( content ), tail ), arg1 );
}

template< typename... Tail >
auto shape_transition( std::shared_ptr< State< Node3, Node4, Node4, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->head.arg1;
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsCons( x1, x2 ) );
  std::shared_ptr< State< Node4, Tail... > > const& tail = src->tail->tail;
  return shape_transition( State< Node3, Node4, Tail... >::make( Node3( content ), tail ), arg1 );
}

template< typename... Tail >
auto shape_transition( std::shared_ptr< State< Node3, Node4, Node5, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->head.arg1;
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsCons( x1, x2 ) );
  std::shared_ptr< State< Node5, Tail... > > const& tail = src->tail->tail;
  return shape_transition( State< Node21, Node5, Tail... >::make( Node21( content ), tail ), arg1 );
}

template< typename... Tail >
auto shape_transition( std::shared_ptr< State< Node3, Node4, Node6, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->head.arg1;
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsCons( x1, x2 ) );
  std::shared_ptr< State< Node6, Tail... > > const& tail = src->tail->tail;
  return shape_transition( State< Node12, Node6, Tail... >::make( Node12( content ), tail ), arg1 );
}

template< typename... Tail >
auto shape_transition( std::shared_ptr< State< Node3, Node4, Node7, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->head.arg1;
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsCons( x1, x2 ) );
  std::shared_ptr< State< Node7, Tail... > > const& tail = src->tail->tail;
  return shape_transition( State< Node18, Node7, Tail... >::make( Node18( content ), tail ), arg1 );
}

template< typename... Tail >
auto style_transition( std::shared_ptr< State< Node3, Node4, Node4, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->head.arg1;
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsCons( x1, x2 ) );
  std::shared_ptr< State< Node4, Tail... > > const& tail = src->tail->tail;
  return style_transition( State< Node3, Node4, Tail... >::make( Node3( content ), tail ), arg1 );
}

template< typename... Tail >
auto style_transition( std::shared_ptr< State< Node3, Node4, Node5, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->head.arg1;
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsCons( x1, x2 ) );
  std::shared_ptr< State< Node5, Tail... > > const& tail = src->tail->tail;
  return style_transition( State< Node21, Node5, Tail... >::make( Node21( content ), tail ), arg1 );
}

template< typename... Tail >
auto style_transition( std::shared_ptr< State< Node3, Node4, Node6, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->head.arg1;
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsCons( x1, x2 ) );
  std::shared_ptr< State< Node6, Tail... > > const& tail = src->tail->tail;
  return style_transition( State< Node12, Node6, Tail... >::make( Node12( content ), tail ), arg1 );
}

template< typename... Tail >
auto style_transition( std::shared_ptr< State< Node3, Node4, Node7, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->head.arg1;
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsCons( x1, x2 ) );
  std::shared_ptr< State< Node7, Tail... > > const& tail = src->tail->tail;
  return style_transition( State< Node18, Node7, Tail... >::make( Node18( content ), tail ), arg1 );
}

template< typename... Tail >
auto to_transition( std::shared_ptr< State< Node3, Node4, Node4, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->head.arg1;
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsCons( x1, x2 ) );
  std::shared_ptr< State< Node4, Tail... > > const& tail = src->tail->tail;
  return to_transition( State< Node3, Node4, Tail... >::make( Node3( content ), tail ), arg1 );
}

template< typename... Tail >
auto to_transition( std::shared_ptr< State< Node3, Node4, Node5, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->head.arg1;
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsCons( x1, x2 ) );
  std::shared_ptr< State< Node5, Tail... > > const& tail = src->tail->tail;
  return to_transition( State< Node21, Node5, Tail... >::make( Node21( content ), tail ), arg1 );
}

template< typename... Tail >
auto to_transition( std::shared_ptr< State< Node3, Node4, Node6, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->head.arg1;
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsCons( x1, x2 ) );
  std::shared_ptr< State< Node6, Tail... > > const& tail = src->tail->tail;
  return to_transition( State< Node12, Node6, Tail... >::make( Node12( content ), tail ), arg1 );
}

template< typename... Tail >
auto to_transition( std::shared_ptr< State< Node3, Node4, Node7, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->head.arg1;
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsCons( x1, x2 ) );
  std::shared_ptr< State< Node7, Tail... > > const& tail = src->tail->tail;
  return to_transition( State< Node18, Node7, Tail... >::make( Node18( content ), tail ), arg1 );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node3, Node4, Node4, Tail... > > const& src ) {
  std::string const& x1 = src->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->head.arg1;
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsCons( x1, x2 ) );
  std::shared_ptr< State< Node4, Tail... > > const& tail = src->tail->tail;
  return end_transition( State< Node3, Node4, Tail... >::make( Node3( content ), tail ) );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node3, Node4, Node5, Tail... > > const& src ) {
  std::string const& x1 = src->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->head.arg1;
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsCons( x1, x2 ) );
  std::shared_ptr< State< Node5, Tail... > > const& tail = src->tail->tail;
  return end_transition( State< Node21, Node5, Tail... >::make( Node21( content ), tail ) );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node3, Node4, Node6, Tail... > > const& src ) {
  std::string const& x1 = src->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->head.arg1;
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsCons( x1, x2 ) );
  std::shared_ptr< State< Node6, Tail... > > const& tail = src->tail->tail;
  return end_transition( State< Node12, Node6, Tail... >::make( Node12( content ), tail ) );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node3, Node4, Node7, Tail... > > const& src ) {
  std::string const& x1 = src->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->head.arg1;
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsCons( x1, x2 ) );
  std::shared_ptr< State< Node7, Tail... > > const& tail = src->tail->tail;
  return end_transition( State< Node18, Node7, Tail... >::make( Node18( content ), tail ) );
}

template< typename... Tail >
auto and__transition( std::shared_ptr< State< Node4, Tail... > > const& src, std::string const& arg1 ) {
  return State< Node4, Node4, Tail... >::make( Node4( arg1 ), src );
}

template< typename... Tail >
auto color_transition( std::shared_ptr< State< Node4, Tail... > > const& src, std::string const& arg1 ) {
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsNull(  ) );
  std::shared_ptr< State< Node4, Tail... > > const& tail = src;
  return color_transition( State< Node3, Node4, Tail... >::make( Node3( content ), tail ), arg1 );
}

template< typename... Tail >
auto edge_transition( std::shared_ptr< State< Node4, Tail... > > const& src, std::string const& arg1 ) {
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsNull(  ) );
  std::shared_ptr< State< Node4, Tail... > > const& tail = src;
  return edge_transition( State< Node3, Node4, Tail... >::make( Node3( content ), tail ), arg1 );
}

template< typename... Tail >
auto node_transition( std::shared_ptr< State< Node4, Tail... > > const& src, std::string const& arg1 ) {
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsNull(  ) );
  std::shared_ptr< State< Node4, Tail... > > const& tail = src;
  return node_transition( State< Node3, Node4, Tail... >::make( Node3( content ), tail ), arg1 );
}

template< typename... Tail >
auto shape_transition( std::shared_ptr< State< Node4, Tail... > > const& src, std::string const& arg1 ) {
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsNull(  ) );
  std::shared_ptr< State< Node4, Tail... > > const& tail = src;
  return shape_transition( State< Node3, Node4, Tail... >::make( Node3( content ), tail ), arg1 );
}

template< typename... Tail >
auto style_transition( std::shared_ptr< State< Node4, Tail... > > const& src, std::string const& arg1 ) {
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsNull(  ) );
  std::shared_ptr< State< Node4, Tail... > > const& tail = src;
  return style_transition( State< Node3, Node4, Tail... >::make( Node3( content ), tail ), arg1 );
}

template< typename... Tail >
auto to_transition( std::shared_ptr< State< Node4, Tail... > > const& src, std::string const& arg1 ) {
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsNull(  ) );
  std::shared_ptr< State< Node4, Tail... > > const& tail = src;
  return to_transition( State< Node3, Node4, Tail... >::make( Node3( content ), tail ), arg1 );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node4, Tail... > > const& src ) {
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsNull(  ) );
  std::shared_ptr< State< Node4, Tail... > > const& tail = src;
  return end_transition( State< Node3, Node4, Tail... >::make( Node3( content ), tail ) );
}

template< typename... Tail >
auto and__transition( std::shared_ptr< State< Node5, Tail... > > const& src, std::string const& arg1 ) {
  return State< Node4, Node5, Tail... >::make( Node4( arg1 ), src );
}

template< typename... Tail >
auto color_transition( std::shared_ptr< State< Node5, Tail... > > const& src, std::string const& arg1 ) {
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsNull(  ) );
  std::shared_ptr< State< Node5, Tail... > > const& tail = src;
  return color_transition( State< Node21, Node5, Tail... >::make( Node21( content ), tail ), arg1 );
}

template< typename... Tail >
auto edge_transition( std::shared_ptr< State< Node5, Tail... > > const& src, std::string const& arg1 ) {
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsNull(  ) );
  std::shared_ptr< State< Node5, Tail... > > const& tail = src;
  return edge_transition( State< Node21, Node5, Tail... >::make( Node21( content ), tail ), arg1 );
}

template< typename... Tail >
auto node_transition( std::shared_ptr< State< Node5, Tail... > > const& src, std::string const& arg1 ) {
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsNull(  ) );
  std::shared_ptr< State< Node5, Tail... > > const& tail = src;
  return node_transition( State< Node21, Node5, Tail... >::make( Node21( content ), tail ), arg1 );
}

template< typename... Tail >
auto shape_transition( std::shared_ptr< State< Node5, Tail... > > const& src, std::string const& arg1 ) {
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsNull(  ) );
  std::shared_ptr< State< Node5, Tail... > > const& tail = src;
  return shape_transition( State< Node21, Node5, Tail... >::make( Node21( content ), tail ), arg1 );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node5, Tail... > > const& src ) {
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsNull(  ) );
  std::shared_ptr< State< Node5, Tail... > > const& tail = src;
  return end_transition( State< Node21, Node5, Tail... >::make( Node21( content ), tail ) );
}

template< typename... Tail >
auto and__transition( std::shared_ptr< State< Node6, Tail... > > const& src, std::string const& arg1 ) {
  return State< Node4, Node6, Tail... >::make( Node4( arg1 ), src );
}

template< typename... Tail >
auto color_transition( std::shared_ptr< State< Node6, Tail... > > const& src, std::string const& arg1 ) {
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsNull(  ) );
  std::shared_ptr< State< Node6, Tail... > > const& tail = src;
  return color_transition( State< Node12, Node6, Tail... >::make( Node12( content ), tail ), arg1 );
}

template< typename... Tail >
auto edge_transition( std::shared_ptr< State< Node6, Tail... > > const& src, std::string const& arg1 ) {
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsNull(  ) );
  std::shared_ptr< State< Node6, Tail... > > const& tail = src;
  return edge_transition( State< Node12, Node6, Tail... >::make( Node12( content ), tail ), arg1 );
}

template< typename... Tail >
auto node_transition( std::shared_ptr< State< Node6, Tail... > > const& src, std::string const& arg1 ) {
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsNull(  ) );
  std::shared_ptr< State< Node6, Tail... > > const& tail = src;
  return node_transition( State< Node12, Node6, Tail... >::make( Node12( content ), tail ), arg1 );
}

template< typename... Tail >
auto style_transition( std::shared_ptr< State< Node6, Tail... > > const& src, std::string const& arg1 ) {
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsNull(  ) );
  std::shared_ptr< State< Node6, Tail... > > const& tail = src;
  return style_transition( State< Node12, Node6, Tail... >::make( Node12( content ), tail ), arg1 );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node6, Tail... > > const& src ) {
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsNull(  ) );
  std::shared_ptr< State< Node6, Tail... > > const& tail = src;
  return end_transition( State< Node12, Node6, Tail... >::make( Node12( content ), tail ) );
}

template< typename... Tail >
auto and__transition( std::shared_ptr< State< Node7, Tail... > > const& src, std::string const& arg1 ) {
  return State< Node4, Node7, Tail... >::make( Node4( arg1 ), src );
}

template< typename... Tail >
auto to_transition( std::shared_ptr< State< Node7, Tail... > > const& src, std::string const& arg1 ) {
  std::shared_ptr< Ands > const& content = std::shared_ptr< Ands >( new AndsNull(  ) );
  std::shared_ptr< State< Node7, Tail... > > const& tail = src;
  return to_transition( State< Node18, Node7, Tail... >::make( Node18( content ), tail ), arg1 );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node8, Node9, Node1, Tail... > > const& src ) {
  std::string const& x1 = src->tail->head.arg1;
  std::shared_ptr< Stmts > const& x2 = src->head.arg1;
  std::shared_ptr< Graph > const& content = std::shared_ptr< Graph >( new Directed( x1, x2 ) );
  std::shared_ptr< State< Node1, Tail... > > const& tail = src->tail->tail;
  return end_transition( State< Node2, Node1, Tail... >::make( Node2( content ), tail ) );
}

template< typename... Tail >
auto edge_transition( std::shared_ptr< State< Node9, Tail... > > const& src, std::string const& arg1 ) {
  return State< Node7, Node9, Tail... >::make( Node7( arg1 ), src );
}

template< typename... Tail >
auto node_transition( std::shared_ptr< State< Node9, Tail... > > const& src, std::string const& arg1 ) {
  return State< Node5, Node9, Tail... >::make( Node5( arg1 ), src );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node9, Tail... > > const& src ) {
  std::shared_ptr< Stmts > const& content = std::shared_ptr< Stmts >( new StmtsNull(  ) );
  std::shared_ptr< State< Node9, Tail... > > const& tail = src;
  return end_transition( State< Node8, Node9, Tail... >::make( Node8( content ), tail ) );
}

template< typename... Tail >
auto color_transition( std::shared_ptr< State< Node10, Node11, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->head.arg1;
  std::shared_ptr< EdgeAttr > const& content = std::shared_ptr< EdgeAttr >( new EdgeAttrColor( x1 ) );
  std::shared_ptr< State< Node11, Tail... > > const& tail = src->tail;
  return color_transition( State< Node11, Node11, Tail... >::make( Node11( content ), tail ), arg1 );
}

template< typename... Tail >
auto color_transition( std::shared_ptr< State< Node10, Node12, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->head.arg1;
  std::shared_ptr< EdgeAttr > const& content = std::shared_ptr< EdgeAttr >( new EdgeAttrColor( x1 ) );
  std::shared_ptr< State< Node12, Tail... > > const& tail = src->tail;
  return color_transition( State< Node11, Node12, Tail... >::make( Node11( content ), tail ), arg1 );
}

template< typename... Tail >
auto edge_transition( std::shared_ptr< State< Node10, Node11, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->head.arg1;
  std::shared_ptr< EdgeAttr > const& content = std::shared_ptr< EdgeAttr >( new EdgeAttrColor( x1 ) );
  std::shared_ptr< State< Node11, Tail... > > const& tail = src->tail;
  return edge_transition( State< Node11, Node11, Tail... >::make( Node11( content ), tail ), arg1 );
}

template< typename... Tail >
auto edge_transition( std::shared_ptr< State< Node10, Node12, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->head.arg1;
  std::shared_ptr< EdgeAttr > const& content = std::shared_ptr< EdgeAttr >( new EdgeAttrColor( x1 ) );
  std::shared_ptr< State< Node12, Tail... > > const& tail = src->tail;
  return edge_transition( State< Node11, Node12, Tail... >::make( Node11( content ), tail ), arg1 );
}

template< typename... Tail >
auto node_transition( std::shared_ptr< State< Node10, Node11, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->head.arg1;
  std::shared_ptr< EdgeAttr > const& content = std::shared_ptr< EdgeAttr >( new EdgeAttrColor( x1 ) );
  std::shared_ptr< State< Node11, Tail... > > const& tail = src->tail;
  return node_transition( State< Node11, Node11, Tail... >::make( Node11( content ), tail ), arg1 );
}

template< typename... Tail >
auto node_transition( std::shared_ptr< State< Node10, Node12, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->head.arg1;
  std::shared_ptr< EdgeAttr > const& content = std::shared_ptr< EdgeAttr >( new EdgeAttrColor( x1 ) );
  std::shared_ptr< State< Node12, Tail... > > const& tail = src->tail;
  return node_transition( State< Node11, Node12, Tail... >::make( Node11( content ), tail ), arg1 );
}

template< typename... Tail >
auto style_transition( std::shared_ptr< State< Node10, Node11, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->head.arg1;
  std::shared_ptr< EdgeAttr > const& content = std::shared_ptr< EdgeAttr >( new EdgeAttrColor( x1 ) );
  std::shared_ptr< State< Node11, Tail... > > const& tail = src->tail;
  return style_transition( State< Node11, Node11, Tail... >::make( Node11( content ), tail ), arg1 );
}

template< typename... Tail >
auto style_transition( std::shared_ptr< State< Node10, Node12, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->head.arg1;
  std::shared_ptr< EdgeAttr > const& content = std::shared_ptr< EdgeAttr >( new EdgeAttrColor( x1 ) );
  std::shared_ptr< State< Node12, Tail... > > const& tail = src->tail;
  return style_transition( State< Node11, Node12, Tail... >::make( Node11( content ), tail ), arg1 );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node10, Node11, Tail... > > const& src ) {
  std::string const& x1 = src->head.arg1;
  std::shared_ptr< EdgeAttr > const& content = std::shared_ptr< EdgeAttr >( new EdgeAttrColor( x1 ) );
  std::shared_ptr< State< Node11, Tail... > > const& tail = src->tail;
  return end_transition( State< Node11, Node11, Tail... >::make( Node11( content ), tail ) );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node10, Node12, Tail... > > const& src ) {
  std::string const& x1 = src->head.arg1;
  std::shared_ptr< EdgeAttr > const& content = std::shared_ptr< EdgeAttr >( new EdgeAttrColor( x1 ) );
  std::shared_ptr< State< Node12, Tail... > > const& tail = src->tail;
  return end_transition( State< Node11, Node12, Tail... >::make( Node11( content ), tail ) );
}

template< typename... Tail >
auto color_transition( std::shared_ptr< State< Node11, Tail... > > const& src, std::string const& arg1 ) {
  return State< Node10, Node11, Tail... >::make( Node10( arg1 ), src );
}

template< typename... Tail >
auto edge_transition( std::shared_ptr< State< Node11, Tail... > > const& src, std::string const& arg1 ) {
  std::shared_ptr< EdgeAttrs > const& content = std::shared_ptr< EdgeAttrs >( new EdgeAttrsNull(  ) );
  std::shared_ptr< State< Node11, Tail... > > const& tail = src;
  return edge_transition( State< Node14, Node11, Tail... >::make( Node14( content ), tail ), arg1 );
}

template< typename... Tail >
auto node_transition( std::shared_ptr< State< Node11, Tail... > > const& src, std::string const& arg1 ) {
  std::shared_ptr< EdgeAttrs > const& content = std::shared_ptr< EdgeAttrs >( new EdgeAttrsNull(  ) );
  std::shared_ptr< State< Node11, Tail... > > const& tail = src;
  return node_transition( State< Node14, Node11, Tail... >::make( Node14( content ), tail ), arg1 );
}

template< typename... Tail >
auto style_transition( std::shared_ptr< State< Node11, Tail... > > const& src, std::string const& arg1 ) {
  return State< Node13, Node11, Tail... >::make( Node13( arg1 ), src );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node11, Tail... > > const& src ) {
  std::shared_ptr< EdgeAttrs > const& content = std::shared_ptr< EdgeAttrs >( new EdgeAttrsNull(  ) );
  std::shared_ptr< State< Node11, Tail... > > const& tail = src;
  return end_transition( State< Node14, Node11, Tail... >::make( Node14( content ), tail ) );
}

template< typename... Tail >
auto color_transition( std::shared_ptr< State< Node12, Tail... > > const& src, std::string const& arg1 ) {
  return State< Node10, Node12, Tail... >::make( Node10( arg1 ), src );
}

template< typename... Tail >
auto edge_transition( std::shared_ptr< State< Node12, Tail... > > const& src, std::string const& arg1 ) {
  std::shared_ptr< EdgeAttrs > const& content = std::shared_ptr< EdgeAttrs >( new EdgeAttrsNull(  ) );
  std::shared_ptr< State< Node12, Tail... > > const& tail = src;
  return edge_transition( State< Node15, Node12, Tail... >::make( Node15( content ), tail ), arg1 );
}

template< typename... Tail >
auto node_transition( std::shared_ptr< State< Node12, Tail... > > const& src, std::string const& arg1 ) {
  std::shared_ptr< EdgeAttrs > const& content = std::shared_ptr< EdgeAttrs >( new EdgeAttrsNull(  ) );
  std::shared_ptr< State< Node12, Tail... > > const& tail = src;
  return node_transition( State< Node15, Node12, Tail... >::make( Node15( content ), tail ), arg1 );
}

template< typename... Tail >
auto style_transition( std::shared_ptr< State< Node12, Tail... > > const& src, std::string const& arg1 ) {
  return State< Node13, Node12, Tail... >::make( Node13( arg1 ), src );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node12, Tail... > > const& src ) {
  std::shared_ptr< EdgeAttrs > const& content = std::shared_ptr< EdgeAttrs >( new EdgeAttrsNull(  ) );
  std::shared_ptr< State< Node12, Tail... > > const& tail = src;
  return end_transition( State< Node15, Node12, Tail... >::make( Node15( content ), tail ) );
}

template< typename... Tail >
auto color_transition( std::shared_ptr< State< Node13, Node11, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->head.arg1;
  std::shared_ptr< EdgeAttr > const& content = std::shared_ptr< EdgeAttr >( new EdgeAttrStyle( x1 ) );
  std::shared_ptr< State< Node11, Tail... > > const& tail = src->tail;
  return color_transition( State< Node11, Node11, Tail... >::make( Node11( content ), tail ), arg1 );
}

template< typename... Tail >
auto color_transition( std::shared_ptr< State< Node13, Node12, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->head.arg1;
  std::shared_ptr< EdgeAttr > const& content = std::shared_ptr< EdgeAttr >( new EdgeAttrStyle( x1 ) );
  std::shared_ptr< State< Node12, Tail... > > const& tail = src->tail;
  return color_transition( State< Node11, Node12, Tail... >::make( Node11( content ), tail ), arg1 );
}

template< typename... Tail >
auto edge_transition( std::shared_ptr< State< Node13, Node11, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->head.arg1;
  std::shared_ptr< EdgeAttr > const& content = std::shared_ptr< EdgeAttr >( new EdgeAttrStyle( x1 ) );
  std::shared_ptr< State< Node11, Tail... > > const& tail = src->tail;
  return edge_transition( State< Node11, Node11, Tail... >::make( Node11( content ), tail ), arg1 );
}

template< typename... Tail >
auto edge_transition( std::shared_ptr< State< Node13, Node12, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->head.arg1;
  std::shared_ptr< EdgeAttr > const& content = std::shared_ptr< EdgeAttr >( new EdgeAttrStyle( x1 ) );
  std::shared_ptr< State< Node12, Tail... > > const& tail = src->tail;
  return edge_transition( State< Node11, Node12, Tail... >::make( Node11( content ), tail ), arg1 );
}

template< typename... Tail >
auto node_transition( std::shared_ptr< State< Node13, Node11, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->head.arg1;
  std::shared_ptr< EdgeAttr > const& content = std::shared_ptr< EdgeAttr >( new EdgeAttrStyle( x1 ) );
  std::shared_ptr< State< Node11, Tail... > > const& tail = src->tail;
  return node_transition( State< Node11, Node11, Tail... >::make( Node11( content ), tail ), arg1 );
}

template< typename... Tail >
auto node_transition( std::shared_ptr< State< Node13, Node12, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->head.arg1;
  std::shared_ptr< EdgeAttr > const& content = std::shared_ptr< EdgeAttr >( new EdgeAttrStyle( x1 ) );
  std::shared_ptr< State< Node12, Tail... > > const& tail = src->tail;
  return node_transition( State< Node11, Node12, Tail... >::make( Node11( content ), tail ), arg1 );
}

template< typename... Tail >
auto style_transition( std::shared_ptr< State< Node13, Node11, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->head.arg1;
  std::shared_ptr< EdgeAttr > const& content = std::shared_ptr< EdgeAttr >( new EdgeAttrStyle( x1 ) );
  std::shared_ptr< State< Node11, Tail... > > const& tail = src->tail;
  return style_transition( State< Node11, Node11, Tail... >::make( Node11( content ), tail ), arg1 );
}

template< typename... Tail >
auto style_transition( std::shared_ptr< State< Node13, Node12, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->head.arg1;
  std::shared_ptr< EdgeAttr > const& content = std::shared_ptr< EdgeAttr >( new EdgeAttrStyle( x1 ) );
  std::shared_ptr< State< Node12, Tail... > > const& tail = src->tail;
  return style_transition( State< Node11, Node12, Tail... >::make( Node11( content ), tail ), arg1 );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node13, Node11, Tail... > > const& src ) {
  std::string const& x1 = src->head.arg1;
  std::shared_ptr< EdgeAttr > const& content = std::shared_ptr< EdgeAttr >( new EdgeAttrStyle( x1 ) );
  std::shared_ptr< State< Node11, Tail... > > const& tail = src->tail;
  return end_transition( State< Node11, Node11, Tail... >::make( Node11( content ), tail ) );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node13, Node12, Tail... > > const& src ) {
  std::string const& x1 = src->head.arg1;
  std::shared_ptr< EdgeAttr > const& content = std::shared_ptr< EdgeAttr >( new EdgeAttrStyle( x1 ) );
  std::shared_ptr< State< Node12, Tail... > > const& tail = src->tail;
  return end_transition( State< Node11, Node12, Tail... >::make( Node11( content ), tail ) );
}

template< typename... Tail >
auto edge_transition( std::shared_ptr< State< Node14, Node11, Node11, Tail... > > const& src, std::string const& arg1 ) {
  std::shared_ptr< EdgeAttr > const& x1 = src->tail->head.arg1;
  std::shared_ptr< EdgeAttrs > const& x2 = src->head.arg1;
  std::shared_ptr< EdgeAttrs > const& content = std::shared_ptr< EdgeAttrs >( new EdgeAttrsCons( x1, x2 ) );
  std::shared_ptr< State< Node11, Tail... > > const& tail = src->tail->tail;
  return edge_transition( State< Node14, Node11, Tail... >::make( Node14( content ), tail ), arg1 );
}

template< typename... Tail >
auto edge_transition( std::shared_ptr< State< Node14, Node11, Node12, Tail... > > const& src, std::string const& arg1 ) {
  std::shared_ptr< EdgeAttr > const& x1 = src->tail->head.arg1;
  std::shared_ptr< EdgeAttrs > const& x2 = src->head.arg1;
  std::shared_ptr< EdgeAttrs > const& content = std::shared_ptr< EdgeAttrs >( new EdgeAttrsCons( x1, x2 ) );
  std::shared_ptr< State< Node12, Tail... > > const& tail = src->tail->tail;
  return edge_transition( State< Node15, Node12, Tail... >::make( Node15( content ), tail ), arg1 );
}

template< typename... Tail >
auto node_transition( std::shared_ptr< State< Node14, Node11, Node11, Tail... > > const& src, std::string const& arg1 ) {
  std::shared_ptr< EdgeAttr > const& x1 = src->tail->head.arg1;
  std::shared_ptr< EdgeAttrs > const& x2 = src->head.arg1;
  std::shared_ptr< EdgeAttrs > const& content = std::shared_ptr< EdgeAttrs >( new EdgeAttrsCons( x1, x2 ) );
  std::shared_ptr< State< Node11, Tail... > > const& tail = src->tail->tail;
  return node_transition( State< Node14, Node11, Tail... >::make( Node14( content ), tail ), arg1 );
}

template< typename... Tail >
auto node_transition( std::shared_ptr< State< Node14, Node11, Node12, Tail... > > const& src, std::string const& arg1 ) {
  std::shared_ptr< EdgeAttr > const& x1 = src->tail->head.arg1;
  std::shared_ptr< EdgeAttrs > const& x2 = src->head.arg1;
  std::shared_ptr< EdgeAttrs > const& content = std::shared_ptr< EdgeAttrs >( new EdgeAttrsCons( x1, x2 ) );
  std::shared_ptr< State< Node12, Tail... > > const& tail = src->tail->tail;
  return node_transition( State< Node15, Node12, Tail... >::make( Node15( content ), tail ), arg1 );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node14, Node11, Node11, Tail... > > const& src ) {
  std::shared_ptr< EdgeAttr > const& x1 = src->tail->head.arg1;
  std::shared_ptr< EdgeAttrs > const& x2 = src->head.arg1;
  std::shared_ptr< EdgeAttrs > const& content = std::shared_ptr< EdgeAttrs >( new EdgeAttrsCons( x1, x2 ) );
  std::shared_ptr< State< Node11, Tail... > > const& tail = src->tail->tail;
  return end_transition( State< Node14, Node11, Tail... >::make( Node14( content ), tail ) );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node14, Node11, Node12, Tail... > > const& src ) {
  std::shared_ptr< EdgeAttr > const& x1 = src->tail->head.arg1;
  std::shared_ptr< EdgeAttrs > const& x2 = src->head.arg1;
  std::shared_ptr< EdgeAttrs > const& content = std::shared_ptr< EdgeAttrs >( new EdgeAttrsCons( x1, x2 ) );
  std::shared_ptr< State< Node12, Tail... > > const& tail = src->tail->tail;
  return end_transition( State< Node15, Node12, Tail... >::make( Node15( content ), tail ) );
}

template< typename... Tail >
auto edge_transition( std::shared_ptr< State< Node15, Node12, Node6, Node18, Node7, Node9, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->tail->tail->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->tail->tail->tail->head.arg1;
  std::string const& x3 = src->tail->tail->head.arg1;
  std::shared_ptr< Ands > const& x4 = src->tail->head.arg1;
  std::shared_ptr< EdgeAttrs > const& x5 = src->head.arg1;
  std::shared_ptr< Stmt > const& content = std::shared_ptr< Stmt >( new EdgeStmt( x1, x2, x3, x4, x5 ) );
  std::shared_ptr< State< Node9, Tail... > > const& tail = src->tail->tail->tail->tail->tail;
  return edge_transition( State< Node16, Node9, Tail... >::make( Node16( content ), tail ), arg1 );
}

template< typename... Tail >
auto edge_transition( std::shared_ptr< State< Node15, Node12, Node6, Node18, Node7, Node16, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->tail->tail->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->tail->tail->tail->head.arg1;
  std::string const& x3 = src->tail->tail->head.arg1;
  std::shared_ptr< Ands > const& x4 = src->tail->head.arg1;
  std::shared_ptr< EdgeAttrs > const& x5 = src->head.arg1;
  std::shared_ptr< Stmt > const& content = std::shared_ptr< Stmt >( new EdgeStmt( x1, x2, x3, x4, x5 ) );
  std::shared_ptr< State< Node16, Tail... > > const& tail = src->tail->tail->tail->tail->tail;
  return edge_transition( State< Node16, Node16, Tail... >::make( Node16( content ), tail ), arg1 );
}

template< typename... Tail >
auto edge_transition( std::shared_ptr< State< Node15, Node12, Node6, Node18, Node7, Node17, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->tail->tail->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->tail->tail->tail->head.arg1;
  std::string const& x3 = src->tail->tail->head.arg1;
  std::shared_ptr< Ands > const& x4 = src->tail->head.arg1;
  std::shared_ptr< EdgeAttrs > const& x5 = src->head.arg1;
  std::shared_ptr< Stmt > const& content = std::shared_ptr< Stmt >( new EdgeStmt( x1, x2, x3, x4, x5 ) );
  std::shared_ptr< State< Node17, Tail... > > const& tail = src->tail->tail->tail->tail->tail;
  return edge_transition( State< Node16, Node17, Tail... >::make( Node16( content ), tail ), arg1 );
}

template< typename... Tail >
auto node_transition( std::shared_ptr< State< Node15, Node12, Node6, Node18, Node7, Node9, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->tail->tail->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->tail->tail->tail->head.arg1;
  std::string const& x3 = src->tail->tail->head.arg1;
  std::shared_ptr< Ands > const& x4 = src->tail->head.arg1;
  std::shared_ptr< EdgeAttrs > const& x5 = src->head.arg1;
  std::shared_ptr< Stmt > const& content = std::shared_ptr< Stmt >( new EdgeStmt( x1, x2, x3, x4, x5 ) );
  std::shared_ptr< State< Node9, Tail... > > const& tail = src->tail->tail->tail->tail->tail;
  return node_transition( State< Node16, Node9, Tail... >::make( Node16( content ), tail ), arg1 );
}

template< typename... Tail >
auto node_transition( std::shared_ptr< State< Node15, Node12, Node6, Node18, Node7, Node16, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->tail->tail->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->tail->tail->tail->head.arg1;
  std::string const& x3 = src->tail->tail->head.arg1;
  std::shared_ptr< Ands > const& x4 = src->tail->head.arg1;
  std::shared_ptr< EdgeAttrs > const& x5 = src->head.arg1;
  std::shared_ptr< Stmt > const& content = std::shared_ptr< Stmt >( new EdgeStmt( x1, x2, x3, x4, x5 ) );
  std::shared_ptr< State< Node16, Tail... > > const& tail = src->tail->tail->tail->tail->tail;
  return node_transition( State< Node16, Node16, Tail... >::make( Node16( content ), tail ), arg1 );
}

template< typename... Tail >
auto node_transition( std::shared_ptr< State< Node15, Node12, Node6, Node18, Node7, Node17, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->tail->tail->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->tail->tail->tail->head.arg1;
  std::string const& x3 = src->tail->tail->head.arg1;
  std::shared_ptr< Ands > const& x4 = src->tail->head.arg1;
  std::shared_ptr< EdgeAttrs > const& x5 = src->head.arg1;
  std::shared_ptr< Stmt > const& content = std::shared_ptr< Stmt >( new EdgeStmt( x1, x2, x3, x4, x5 ) );
  std::shared_ptr< State< Node17, Tail... > > const& tail = src->tail->tail->tail->tail->tail;
  return node_transition( State< Node16, Node17, Tail... >::make( Node16( content ), tail ), arg1 );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node15, Node12, Node6, Node18, Node7, Node9, Tail... > > const& src ) {
  std::string const& x1 = src->tail->tail->tail->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->tail->tail->tail->head.arg1;
  std::string const& x3 = src->tail->tail->head.arg1;
  std::shared_ptr< Ands > const& x4 = src->tail->head.arg1;
  std::shared_ptr< EdgeAttrs > const& x5 = src->head.arg1;
  std::shared_ptr< Stmt > const& content = std::shared_ptr< Stmt >( new EdgeStmt( x1, x2, x3, x4, x5 ) );
  std::shared_ptr< State< Node9, Tail... > > const& tail = src->tail->tail->tail->tail->tail;
  return end_transition( State< Node16, Node9, Tail... >::make( Node16( content ), tail ) );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node15, Node12, Node6, Node18, Node7, Node16, Tail... > > const& src ) {
  std::string const& x1 = src->tail->tail->tail->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->tail->tail->tail->head.arg1;
  std::string const& x3 = src->tail->tail->head.arg1;
  std::shared_ptr< Ands > const& x4 = src->tail->head.arg1;
  std::shared_ptr< EdgeAttrs > const& x5 = src->head.arg1;
  std::shared_ptr< Stmt > const& content = std::shared_ptr< Stmt >( new EdgeStmt( x1, x2, x3, x4, x5 ) );
  std::shared_ptr< State< Node16, Tail... > > const& tail = src->tail->tail->tail->tail->tail;
  return end_transition( State< Node16, Node16, Tail... >::make( Node16( content ), tail ) );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node15, Node12, Node6, Node18, Node7, Node17, Tail... > > const& src ) {
  std::string const& x1 = src->tail->tail->tail->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->tail->tail->tail->head.arg1;
  std::string const& x3 = src->tail->tail->head.arg1;
  std::shared_ptr< Ands > const& x4 = src->tail->head.arg1;
  std::shared_ptr< EdgeAttrs > const& x5 = src->head.arg1;
  std::shared_ptr< Stmt > const& content = std::shared_ptr< Stmt >( new EdgeStmt( x1, x2, x3, x4, x5 ) );
  std::shared_ptr< State< Node17, Tail... > > const& tail = src->tail->tail->tail->tail->tail;
  return end_transition( State< Node16, Node17, Tail... >::make( Node16( content ), tail ) );
}

template< typename... Tail >
auto edge_transition( std::shared_ptr< State< Node16, Tail... > > const& src, std::string const& arg1 ) {
  return State< Node7, Node16, Tail... >::make( Node7( arg1 ), src );
}

template< typename... Tail >
auto node_transition( std::shared_ptr< State< Node16, Tail... > > const& src, std::string const& arg1 ) {
  return State< Node5, Node16, Tail... >::make( Node5( arg1 ), src );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node16, Tail... > > const& src ) {
  std::shared_ptr< Stmts > const& content = std::shared_ptr< Stmts >( new StmtsNull(  ) );
  std::shared_ptr< State< Node16, Tail... > > const& tail = src;
  return end_transition( State< Node25, Node16, Tail... >::make( Node25( content ), tail ) );
}

template< typename... Tail >
auto edge_transition( std::shared_ptr< State< Node17, Tail... > > const& src, std::string const& arg1 ) {
  return State< Node7, Node17, Tail... >::make( Node7( arg1 ), src );
}

template< typename... Tail >
auto node_transition( std::shared_ptr< State< Node17, Tail... > > const& src, std::string const& arg1 ) {
  return State< Node5, Node17, Tail... >::make( Node5( arg1 ), src );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node17, Tail... > > const& src ) {
  std::shared_ptr< Stmts > const& content = std::shared_ptr< Stmts >( new StmtsNull(  ) );
  std::shared_ptr< State< Node17, Tail... > > const& tail = src;
  return end_transition( State< Node26, Node17, Tail... >::make( Node26( content ), tail ) );
}

template< typename... Tail >
auto to_transition( std::shared_ptr< State< Node18, Tail... > > const& src, std::string const& arg1 ) {
  return State< Node6, Node18, Tail... >::make( Node6( arg1 ), src );
}

template< typename... Tail >
auto color_transition( std::shared_ptr< State< Node19, Node20, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->head.arg1;
  std::shared_ptr< NodeAttr > const& content = std::shared_ptr< NodeAttr >( new NodeAttrColor( x1 ) );
  std::shared_ptr< State< Node20, Tail... > > const& tail = src->tail;
  return color_transition( State< Node20, Node20, Tail... >::make( Node20( content ), tail ), arg1 );
}

template< typename... Tail >
auto color_transition( std::shared_ptr< State< Node19, Node21, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->head.arg1;
  std::shared_ptr< NodeAttr > const& content = std::shared_ptr< NodeAttr >( new NodeAttrColor( x1 ) );
  std::shared_ptr< State< Node21, Tail... > > const& tail = src->tail;
  return color_transition( State< Node20, Node21, Tail... >::make( Node20( content ), tail ), arg1 );
}

template< typename... Tail >
auto edge_transition( std::shared_ptr< State< Node19, Node20, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->head.arg1;
  std::shared_ptr< NodeAttr > const& content = std::shared_ptr< NodeAttr >( new NodeAttrColor( x1 ) );
  std::shared_ptr< State< Node20, Tail... > > const& tail = src->tail;
  return edge_transition( State< Node20, Node20, Tail... >::make( Node20( content ), tail ), arg1 );
}

template< typename... Tail >
auto edge_transition( std::shared_ptr< State< Node19, Node21, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->head.arg1;
  std::shared_ptr< NodeAttr > const& content = std::shared_ptr< NodeAttr >( new NodeAttrColor( x1 ) );
  std::shared_ptr< State< Node21, Tail... > > const& tail = src->tail;
  return edge_transition( State< Node20, Node21, Tail... >::make( Node20( content ), tail ), arg1 );
}

template< typename... Tail >
auto node_transition( std::shared_ptr< State< Node19, Node20, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->head.arg1;
  std::shared_ptr< NodeAttr > const& content = std::shared_ptr< NodeAttr >( new NodeAttrColor( x1 ) );
  std::shared_ptr< State< Node20, Tail... > > const& tail = src->tail;
  return node_transition( State< Node20, Node20, Tail... >::make( Node20( content ), tail ), arg1 );
}

template< typename... Tail >
auto node_transition( std::shared_ptr< State< Node19, Node21, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->head.arg1;
  std::shared_ptr< NodeAttr > const& content = std::shared_ptr< NodeAttr >( new NodeAttrColor( x1 ) );
  std::shared_ptr< State< Node21, Tail... > > const& tail = src->tail;
  return node_transition( State< Node20, Node21, Tail... >::make( Node20( content ), tail ), arg1 );
}

template< typename... Tail >
auto shape_transition( std::shared_ptr< State< Node19, Node20, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->head.arg1;
  std::shared_ptr< NodeAttr > const& content = std::shared_ptr< NodeAttr >( new NodeAttrColor( x1 ) );
  std::shared_ptr< State< Node20, Tail... > > const& tail = src->tail;
  return shape_transition( State< Node20, Node20, Tail... >::make( Node20( content ), tail ), arg1 );
}

template< typename... Tail >
auto shape_transition( std::shared_ptr< State< Node19, Node21, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->head.arg1;
  std::shared_ptr< NodeAttr > const& content = std::shared_ptr< NodeAttr >( new NodeAttrColor( x1 ) );
  std::shared_ptr< State< Node21, Tail... > > const& tail = src->tail;
  return shape_transition( State< Node20, Node21, Tail... >::make( Node20( content ), tail ), arg1 );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node19, Node20, Tail... > > const& src ) {
  std::string const& x1 = src->head.arg1;
  std::shared_ptr< NodeAttr > const& content = std::shared_ptr< NodeAttr >( new NodeAttrColor( x1 ) );
  std::shared_ptr< State< Node20, Tail... > > const& tail = src->tail;
  return end_transition( State< Node20, Node20, Tail... >::make( Node20( content ), tail ) );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node19, Node21, Tail... > > const& src ) {
  std::string const& x1 = src->head.arg1;
  std::shared_ptr< NodeAttr > const& content = std::shared_ptr< NodeAttr >( new NodeAttrColor( x1 ) );
  std::shared_ptr< State< Node21, Tail... > > const& tail = src->tail;
  return end_transition( State< Node20, Node21, Tail... >::make( Node20( content ), tail ) );
}

template< typename... Tail >
auto color_transition( std::shared_ptr< State< Node20, Tail... > > const& src, std::string const& arg1 ) {
  return State< Node19, Node20, Tail... >::make( Node19( arg1 ), src );
}

template< typename... Tail >
auto edge_transition( std::shared_ptr< State< Node20, Tail... > > const& src, std::string const& arg1 ) {
  std::shared_ptr< NodeAttrs > const& content = std::shared_ptr< NodeAttrs >( new NodeAttrsNull(  ) );
  std::shared_ptr< State< Node20, Tail... > > const& tail = src;
  return edge_transition( State< Node23, Node20, Tail... >::make( Node23( content ), tail ), arg1 );
}

template< typename... Tail >
auto node_transition( std::shared_ptr< State< Node20, Tail... > > const& src, std::string const& arg1 ) {
  std::shared_ptr< NodeAttrs > const& content = std::shared_ptr< NodeAttrs >( new NodeAttrsNull(  ) );
  std::shared_ptr< State< Node20, Tail... > > const& tail = src;
  return node_transition( State< Node23, Node20, Tail... >::make( Node23( content ), tail ), arg1 );
}

template< typename... Tail >
auto shape_transition( std::shared_ptr< State< Node20, Tail... > > const& src, std::string const& arg1 ) {
  return State< Node22, Node20, Tail... >::make( Node22( arg1 ), src );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node20, Tail... > > const& src ) {
  std::shared_ptr< NodeAttrs > const& content = std::shared_ptr< NodeAttrs >( new NodeAttrsNull(  ) );
  std::shared_ptr< State< Node20, Tail... > > const& tail = src;
  return end_transition( State< Node23, Node20, Tail... >::make( Node23( content ), tail ) );
}

template< typename... Tail >
auto color_transition( std::shared_ptr< State< Node21, Tail... > > const& src, std::string const& arg1 ) {
  return State< Node19, Node21, Tail... >::make( Node19( arg1 ), src );
}

template< typename... Tail >
auto edge_transition( std::shared_ptr< State< Node21, Tail... > > const& src, std::string const& arg1 ) {
  std::shared_ptr< NodeAttrs > const& content = std::shared_ptr< NodeAttrs >( new NodeAttrsNull(  ) );
  std::shared_ptr< State< Node21, Tail... > > const& tail = src;
  return edge_transition( State< Node24, Node21, Tail... >::make( Node24( content ), tail ), arg1 );
}

template< typename... Tail >
auto node_transition( std::shared_ptr< State< Node21, Tail... > > const& src, std::string const& arg1 ) {
  std::shared_ptr< NodeAttrs > const& content = std::shared_ptr< NodeAttrs >( new NodeAttrsNull(  ) );
  std::shared_ptr< State< Node21, Tail... > > const& tail = src;
  return node_transition( State< Node24, Node21, Tail... >::make( Node24( content ), tail ), arg1 );
}

template< typename... Tail >
auto shape_transition( std::shared_ptr< State< Node21, Tail... > > const& src, std::string const& arg1 ) {
  return State< Node22, Node21, Tail... >::make( Node22( arg1 ), src );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node21, Tail... > > const& src ) {
  std::shared_ptr< NodeAttrs > const& content = std::shared_ptr< NodeAttrs >( new NodeAttrsNull(  ) );
  std::shared_ptr< State< Node21, Tail... > > const& tail = src;
  return end_transition( State< Node24, Node21, Tail... >::make( Node24( content ), tail ) );
}

template< typename... Tail >
auto color_transition( std::shared_ptr< State< Node22, Node20, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->head.arg1;
  std::shared_ptr< NodeAttr > const& content = std::shared_ptr< NodeAttr >( new NodeAttrShape( x1 ) );
  std::shared_ptr< State< Node20, Tail... > > const& tail = src->tail;
  return color_transition( State< Node20, Node20, Tail... >::make( Node20( content ), tail ), arg1 );
}

template< typename... Tail >
auto color_transition( std::shared_ptr< State< Node22, Node21, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->head.arg1;
  std::shared_ptr< NodeAttr > const& content = std::shared_ptr< NodeAttr >( new NodeAttrShape( x1 ) );
  std::shared_ptr< State< Node21, Tail... > > const& tail = src->tail;
  return color_transition( State< Node20, Node21, Tail... >::make( Node20( content ), tail ), arg1 );
}

template< typename... Tail >
auto edge_transition( std::shared_ptr< State< Node22, Node20, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->head.arg1;
  std::shared_ptr< NodeAttr > const& content = std::shared_ptr< NodeAttr >( new NodeAttrShape( x1 ) );
  std::shared_ptr< State< Node20, Tail... > > const& tail = src->tail;
  return edge_transition( State< Node20, Node20, Tail... >::make( Node20( content ), tail ), arg1 );
}

template< typename... Tail >
auto edge_transition( std::shared_ptr< State< Node22, Node21, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->head.arg1;
  std::shared_ptr< NodeAttr > const& content = std::shared_ptr< NodeAttr >( new NodeAttrShape( x1 ) );
  std::shared_ptr< State< Node21, Tail... > > const& tail = src->tail;
  return edge_transition( State< Node20, Node21, Tail... >::make( Node20( content ), tail ), arg1 );
}

template< typename... Tail >
auto node_transition( std::shared_ptr< State< Node22, Node20, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->head.arg1;
  std::shared_ptr< NodeAttr > const& content = std::shared_ptr< NodeAttr >( new NodeAttrShape( x1 ) );
  std::shared_ptr< State< Node20, Tail... > > const& tail = src->tail;
  return node_transition( State< Node20, Node20, Tail... >::make( Node20( content ), tail ), arg1 );
}

template< typename... Tail >
auto node_transition( std::shared_ptr< State< Node22, Node21, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->head.arg1;
  std::shared_ptr< NodeAttr > const& content = std::shared_ptr< NodeAttr >( new NodeAttrShape( x1 ) );
  std::shared_ptr< State< Node21, Tail... > > const& tail = src->tail;
  return node_transition( State< Node20, Node21, Tail... >::make( Node20( content ), tail ), arg1 );
}

template< typename... Tail >
auto shape_transition( std::shared_ptr< State< Node22, Node20, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->head.arg1;
  std::shared_ptr< NodeAttr > const& content = std::shared_ptr< NodeAttr >( new NodeAttrShape( x1 ) );
  std::shared_ptr< State< Node20, Tail... > > const& tail = src->tail;
  return shape_transition( State< Node20, Node20, Tail... >::make( Node20( content ), tail ), arg1 );
}

template< typename... Tail >
auto shape_transition( std::shared_ptr< State< Node22, Node21, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->head.arg1;
  std::shared_ptr< NodeAttr > const& content = std::shared_ptr< NodeAttr >( new NodeAttrShape( x1 ) );
  std::shared_ptr< State< Node21, Tail... > > const& tail = src->tail;
  return shape_transition( State< Node20, Node21, Tail... >::make( Node20( content ), tail ), arg1 );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node22, Node20, Tail... > > const& src ) {
  std::string const& x1 = src->head.arg1;
  std::shared_ptr< NodeAttr > const& content = std::shared_ptr< NodeAttr >( new NodeAttrShape( x1 ) );
  std::shared_ptr< State< Node20, Tail... > > const& tail = src->tail;
  return end_transition( State< Node20, Node20, Tail... >::make( Node20( content ), tail ) );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node22, Node21, Tail... > > const& src ) {
  std::string const& x1 = src->head.arg1;
  std::shared_ptr< NodeAttr > const& content = std::shared_ptr< NodeAttr >( new NodeAttrShape( x1 ) );
  std::shared_ptr< State< Node21, Tail... > > const& tail = src->tail;
  return end_transition( State< Node20, Node21, Tail... >::make( Node20( content ), tail ) );
}

template< typename... Tail >
auto edge_transition( std::shared_ptr< State< Node23, Node20, Node20, Tail... > > const& src, std::string const& arg1 ) {
  std::shared_ptr< NodeAttr > const& x1 = src->tail->head.arg1;
  std::shared_ptr< NodeAttrs > const& x2 = src->head.arg1;
  std::shared_ptr< NodeAttrs > const& content = std::shared_ptr< NodeAttrs >( new NodeAttrsCons( x1, x2 ) );
  std::shared_ptr< State< Node20, Tail... > > const& tail = src->tail->tail;
  return edge_transition( State< Node23, Node20, Tail... >::make( Node23( content ), tail ), arg1 );
}

template< typename... Tail >
auto edge_transition( std::shared_ptr< State< Node23, Node20, Node21, Tail... > > const& src, std::string const& arg1 ) {
  std::shared_ptr< NodeAttr > const& x1 = src->tail->head.arg1;
  std::shared_ptr< NodeAttrs > const& x2 = src->head.arg1;
  std::shared_ptr< NodeAttrs > const& content = std::shared_ptr< NodeAttrs >( new NodeAttrsCons( x1, x2 ) );
  std::shared_ptr< State< Node21, Tail... > > const& tail = src->tail->tail;
  return edge_transition( State< Node24, Node21, Tail... >::make( Node24( content ), tail ), arg1 );
}

template< typename... Tail >
auto node_transition( std::shared_ptr< State< Node23, Node20, Node20, Tail... > > const& src, std::string const& arg1 ) {
  std::shared_ptr< NodeAttr > const& x1 = src->tail->head.arg1;
  std::shared_ptr< NodeAttrs > const& x2 = src->head.arg1;
  std::shared_ptr< NodeAttrs > const& content = std::shared_ptr< NodeAttrs >( new NodeAttrsCons( x1, x2 ) );
  std::shared_ptr< State< Node20, Tail... > > const& tail = src->tail->tail;
  return node_transition( State< Node23, Node20, Tail... >::make( Node23( content ), tail ), arg1 );
}

template< typename... Tail >
auto node_transition( std::shared_ptr< State< Node23, Node20, Node21, Tail... > > const& src, std::string const& arg1 ) {
  std::shared_ptr< NodeAttr > const& x1 = src->tail->head.arg1;
  std::shared_ptr< NodeAttrs > const& x2 = src->head.arg1;
  std::shared_ptr< NodeAttrs > const& content = std::shared_ptr< NodeAttrs >( new NodeAttrsCons( x1, x2 ) );
  std::shared_ptr< State< Node21, Tail... > > const& tail = src->tail->tail;
  return node_transition( State< Node24, Node21, Tail... >::make( Node24( content ), tail ), arg1 );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node23, Node20, Node20, Tail... > > const& src ) {
  std::shared_ptr< NodeAttr > const& x1 = src->tail->head.arg1;
  std::shared_ptr< NodeAttrs > const& x2 = src->head.arg1;
  std::shared_ptr< NodeAttrs > const& content = std::shared_ptr< NodeAttrs >( new NodeAttrsCons( x1, x2 ) );
  std::shared_ptr< State< Node20, Tail... > > const& tail = src->tail->tail;
  return end_transition( State< Node23, Node20, Tail... >::make( Node23( content ), tail ) );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node23, Node20, Node21, Tail... > > const& src ) {
  std::shared_ptr< NodeAttr > const& x1 = src->tail->head.arg1;
  std::shared_ptr< NodeAttrs > const& x2 = src->head.arg1;
  std::shared_ptr< NodeAttrs > const& content = std::shared_ptr< NodeAttrs >( new NodeAttrsCons( x1, x2 ) );
  std::shared_ptr< State< Node21, Tail... > > const& tail = src->tail->tail;
  return end_transition( State< Node24, Node21, Tail... >::make( Node24( content ), tail ) );
}

template< typename... Tail >
auto edge_transition( std::shared_ptr< State< Node24, Node21, Node5, Node9, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->tail->head.arg1;
  std::shared_ptr< NodeAttrs > const& x3 = src->head.arg1;
  std::shared_ptr< Stmt > const& content = std::shared_ptr< Stmt >( new NodeStmt( x1, x2, x3 ) );
  std::shared_ptr< State< Node9, Tail... > > const& tail = src->tail->tail->tail;
  return edge_transition( State< Node16, Node9, Tail... >::make( Node16( content ), tail ), arg1 );
}

template< typename... Tail >
auto edge_transition( std::shared_ptr< State< Node24, Node21, Node5, Node16, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->tail->head.arg1;
  std::shared_ptr< NodeAttrs > const& x3 = src->head.arg1;
  std::shared_ptr< Stmt > const& content = std::shared_ptr< Stmt >( new NodeStmt( x1, x2, x3 ) );
  std::shared_ptr< State< Node16, Tail... > > const& tail = src->tail->tail->tail;
  return edge_transition( State< Node16, Node16, Tail... >::make( Node16( content ), tail ), arg1 );
}

template< typename... Tail >
auto edge_transition( std::shared_ptr< State< Node24, Node21, Node5, Node17, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->tail->head.arg1;
  std::shared_ptr< NodeAttrs > const& x3 = src->head.arg1;
  std::shared_ptr< Stmt > const& content = std::shared_ptr< Stmt >( new NodeStmt( x1, x2, x3 ) );
  std::shared_ptr< State< Node17, Tail... > > const& tail = src->tail->tail->tail;
  return edge_transition( State< Node16, Node17, Tail... >::make( Node16( content ), tail ), arg1 );
}

template< typename... Tail >
auto node_transition( std::shared_ptr< State< Node24, Node21, Node5, Node9, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->tail->head.arg1;
  std::shared_ptr< NodeAttrs > const& x3 = src->head.arg1;
  std::shared_ptr< Stmt > const& content = std::shared_ptr< Stmt >( new NodeStmt( x1, x2, x3 ) );
  std::shared_ptr< State< Node9, Tail... > > const& tail = src->tail->tail->tail;
  return node_transition( State< Node16, Node9, Tail... >::make( Node16( content ), tail ), arg1 );
}

template< typename... Tail >
auto node_transition( std::shared_ptr< State< Node24, Node21, Node5, Node16, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->tail->head.arg1;
  std::shared_ptr< NodeAttrs > const& x3 = src->head.arg1;
  std::shared_ptr< Stmt > const& content = std::shared_ptr< Stmt >( new NodeStmt( x1, x2, x3 ) );
  std::shared_ptr< State< Node16, Tail... > > const& tail = src->tail->tail->tail;
  return node_transition( State< Node16, Node16, Tail... >::make( Node16( content ), tail ), arg1 );
}

template< typename... Tail >
auto node_transition( std::shared_ptr< State< Node24, Node21, Node5, Node17, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->tail->head.arg1;
  std::shared_ptr< NodeAttrs > const& x3 = src->head.arg1;
  std::shared_ptr< Stmt > const& content = std::shared_ptr< Stmt >( new NodeStmt( x1, x2, x3 ) );
  std::shared_ptr< State< Node17, Tail... > > const& tail = src->tail->tail->tail;
  return node_transition( State< Node16, Node17, Tail... >::make( Node16( content ), tail ), arg1 );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node24, Node21, Node5, Node9, Tail... > > const& src ) {
  std::string const& x1 = src->tail->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->tail->head.arg1;
  std::shared_ptr< NodeAttrs > const& x3 = src->head.arg1;
  std::shared_ptr< Stmt > const& content = std::shared_ptr< Stmt >( new NodeStmt( x1, x2, x3 ) );
  std::shared_ptr< State< Node9, Tail... > > const& tail = src->tail->tail->tail;
  return end_transition( State< Node16, Node9, Tail... >::make( Node16( content ), tail ) );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node24, Node21, Node5, Node16, Tail... > > const& src ) {
  std::string const& x1 = src->tail->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->tail->head.arg1;
  std::shared_ptr< NodeAttrs > const& x3 = src->head.arg1;
  std::shared_ptr< Stmt > const& content = std::shared_ptr< Stmt >( new NodeStmt( x1, x2, x3 ) );
  std::shared_ptr< State< Node16, Tail... > > const& tail = src->tail->tail->tail;
  return end_transition( State< Node16, Node16, Tail... >::make( Node16( content ), tail ) );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node24, Node21, Node5, Node17, Tail... > > const& src ) {
  std::string const& x1 = src->tail->tail->head.arg1;
  std::shared_ptr< Ands > const& x2 = src->tail->head.arg1;
  std::shared_ptr< NodeAttrs > const& x3 = src->head.arg1;
  std::shared_ptr< Stmt > const& content = std::shared_ptr< Stmt >( new NodeStmt( x1, x2, x3 ) );
  std::shared_ptr< State< Node17, Tail... > > const& tail = src->tail->tail->tail;
  return end_transition( State< Node16, Node17, Tail... >::make( Node16( content ), tail ) );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node25, Node16, Node9, Tail... > > const& src ) {
  std::shared_ptr< Stmt > const& x1 = src->tail->head.arg1;
  std::shared_ptr< Stmts > const& x2 = src->head.arg1;
  std::shared_ptr< Stmts > const& content = std::shared_ptr< Stmts >( new StmtsCons( x1, x2 ) );
  std::shared_ptr< State< Node9, Tail... > > const& tail = src->tail->tail;
  return end_transition( State< Node8, Node9, Tail... >::make( Node8( content ), tail ) );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node25, Node16, Node16, Tail... > > const& src ) {
  std::shared_ptr< Stmt > const& x1 = src->tail->head.arg1;
  std::shared_ptr< Stmts > const& x2 = src->head.arg1;
  std::shared_ptr< Stmts > const& content = std::shared_ptr< Stmts >( new StmtsCons( x1, x2 ) );
  std::shared_ptr< State< Node16, Tail... > > const& tail = src->tail->tail;
  return end_transition( State< Node25, Node16, Tail... >::make( Node25( content ), tail ) );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node25, Node16, Node17, Tail... > > const& src ) {
  std::shared_ptr< Stmt > const& x1 = src->tail->head.arg1;
  std::shared_ptr< Stmts > const& x2 = src->head.arg1;
  std::shared_ptr< Stmts > const& content = std::shared_ptr< Stmts >( new StmtsCons( x1, x2 ) );
  std::shared_ptr< State< Node17, Tail... > > const& tail = src->tail->tail;
  return end_transition( State< Node26, Node17, Tail... >::make( Node26( content ), tail ) );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node26, Node17, Node1, Tail... > > const& src ) {
  std::string const& x1 = src->tail->head.arg1;
  std::shared_ptr< Stmts > const& x2 = src->head.arg1;
  std::shared_ptr< Graph > const& content = std::shared_ptr< Graph >( new Undirected( x1, x2 ) );
  std::shared_ptr< State< Node1, Tail... > > const& tail = src->tail->tail;
  return end_transition( State< Node2, Node1, Tail... >::make( Node2( content ), tail ) );
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

