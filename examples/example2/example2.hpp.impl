
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template< typename Head, typename... Tail >
State< Head, Tail... >::State( Head const& head_, std::shared_ptr< State< Tail... > > const& tail_ )
  :head( head_ ), tail( tail_ ) {}

template< typename Head, typename... Tail >
std::shared_ptr< State< Head, Tail... > > State< Head, Tail... >::make( Head const& head, std::shared_ptr< State< Tail... > > const& tail ) {
  std::shared_ptr< State< Head, Tail... > > result( new State< Head, Tail... >( head, tail ) );
  result->this_ = result;
  return result;
}


template< typename Head, typename... Tail >
auto State< Head, Tail... >::end() {
  return end_transition( this_ );
}

template< typename Head, typename... Tail >
auto State< Head, Tail... >::add() {
  return add_transition( this_ );
}

template< typename Head, typename... Tail >
auto State< Head, Tail... >::num( Int arg1 ) {
  return num_transition( this_, arg1 );
}

template< typename Head, typename... Tail >
auto State< Head, Tail... >::lp() {
  return lp_transition( this_ );
}

template< typename Head, typename... Tail >
auto State< Head, Tail... >::rp() {
  return rp_transition( this_ );
}

template< typename Head, typename... Tail >
auto State< Head, Tail... >::mul() {
  return mul_transition( this_ );
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template< typename... Stack >
auto end_transition( std::shared_ptr< State< Stack... > > const& src ) {
  return reduce( src )->end();
}

template< typename... Stack >
auto add_transition( std::shared_ptr< State< Stack... > > const& src ) {
  return reduce( src )->add();
}

template< typename... Stack >
auto num_transition( std::shared_ptr< State< Stack... > > const& src, Int const& arg1 ) {
  return reduce( src )->num( arg1 );
}

template< typename... Stack >
auto lp_transition( std::shared_ptr< State< Stack... > > const& src ) {
  return reduce( src )->lp();
}

template< typename... Stack >
auto rp_transition( std::shared_ptr< State< Stack... > > const& src ) {
  return reduce( src )->rp();
}

template< typename... Stack >
auto mul_transition( std::shared_ptr< State< Stack... > > const& src ) {
  return reduce( src )->mul();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// shift transitions

template< typename Prev >
inline auto end_transition( std::shared_ptr< State< Node2, Prev > > const& src ) {
  return src->head.content;
}

template< typename... Tail >
auto add_transition( std::shared_ptr< State< Node2, Tail... > > const& src ) {
  return State< Node5, Node2, Tail... >::make( Node5(), src );
}

template< typename... Tail >
auto add_transition( std::shared_ptr< State< Node6, Tail... > > const& src ) {
  return State< Node5, Node6, Tail... >::make( Node5(), src );
}


template< typename... Tail >
auto lp_transition( std::shared_ptr< State< Node1, Tail... > > const& src ) {
  return State< Node4, Node1, Tail... >::make( Node4(), src );
}

template< typename... Tail >
auto lp_transition( std::shared_ptr< State< Node4, Tail... > > const& src ) {
  return State< Node4, Node4, Tail... >::make( Node4(), src );
}

template< typename... Tail >
auto lp_transition( std::shared_ptr< State< Node5, Tail... > > const& src ) {
  return State< Node4, Node5, Tail... >::make( Node4(), src );
}

template< typename... Tail >
auto lp_transition( std::shared_ptr< State< Node9, Tail... > > const& src ) {
  return State< Node4, Node9, Tail... >::make( Node4(), src );
}


template< typename... Tail >
auto mul_transition( std::shared_ptr< State< Node3, Tail... > > const& src ) {
  return State< Node9, Node3, Tail... >::make( Node9(), src );
}

template< typename... Tail >
auto mul_transition( std::shared_ptr< State< Node10, Tail... > > const& src ) {
  return State< Node9, Node10, Tail... >::make( Node9(), src );
}


template< typename... Tail >
auto num_transition( std::shared_ptr< State< Node1, Tail... > > const& src, Int const& arg1 ) {
  return State< Node11, Node1, Tail... >::make( Node11( arg1 ), src );
}

template< typename... Tail >
auto num_transition( std::shared_ptr< State< Node4, Tail... > > const& src, Int const& arg1 ) {
  return State< Node11, Node4, Tail... >::make( Node11( arg1 ), src );
}

template< typename... Tail >
auto num_transition( std::shared_ptr< State< Node5, Tail... > > const& src, Int const& arg1 ) {
  return State< Node11, Node5, Tail... >::make( Node11( arg1 ), src );
}

template< typename... Tail >
auto num_transition( std::shared_ptr< State< Node9, Tail... > > const& src, Int const& arg1 ) {
  return State< Node11, Node9, Tail... >::make( Node11( arg1 ), src );
}


template< typename... Tail >
auto rp_transition( std::shared_ptr< State< Node6, Tail... > > const& src ) {
  return State< Node12, Node6, Tail... >::make( Node12(), src );
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// reduces

// Add : E -> E "add()" T
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node3, Node5, Node2, Node1, Tail... > > const& src ) {
  E const& arg1 = src->head.arg1;
  T const& arg2 = src->tail->tail->head.arg1;
  E content( new Add( arg1, arg2 ) );
  std::shared_ptr< State< Node1, Tail... > > const& tail = src->tail->tail->tail;
  return State< Node2, Node1, Tail... >::make( Node2( content ), tail );
}
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node3, Node5, Node6, Node4, Tail... > > const& src ) {
  E const& arg1 = src->head.arg1;
  T const& arg2 = src->tail->tail->head.arg1;
  E content( new Add( arg1, arg2 ) );
  std::shared_ptr< State< Node4, Tail... > > const& tail = src->tail->tail->tail;
  return State< Node6, Node4, Tail... >::make( Node6( content ), tail );
}
// TToE : E -> T
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node10, Node1, Tail... > > const& src ) {
  T const& arg1 = src->head.arg1;
  E content( new TToE( arg1 ) );
  std::shared_ptr< State< Node1, Tail... > > const& tail = src->tail;
  return State< Node2, Node1, Tail... >::make( Node2( content ), tail );
}
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node10, Node4, Tail... > > const& src ) {
  T const& arg1 = src->head.arg1;
  E content( new TToE( arg1 ) );
  std::shared_ptr< State< Node4, Tail... > > const& tail = src->tail;
  return State< Node6, Node4, Tail... >::make( Node6( content ), tail );
}
// Num : F -> "num(Int)"
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node11, Node1, Tail... > > const& src ) {
  Int const& arg1 = src->head.arg1;
  F content( new Num( arg1 ) );
  std::shared_ptr< State< Node1, Tail... > > const& tail = src->tail;
  return State< Node7, Node1, Tail... >::make( Node7( content ), tail );
}
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node11, Node4, Tail... > > const& src ) {
  Int const& arg1 = src->head.arg1;
  F content( new Num( arg1 ) );
  std::shared_ptr< State< Node4, Tail... > > const& tail = src->tail;
  return State< Node7, Node4, Tail... >::make( Node7( content ), tail );
}
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node11, Node5, Tail... > > const& src ) {
  Int const& arg1 = src->head.arg1;
  F content( new Num( arg1 ) );
  std::shared_ptr< State< Node5, Tail... > > const& tail = src->tail;
  return State< Node7, Node5, Tail... >::make( Node7( content ), tail );
}
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node11, Node9, Tail... > > const& src ) {
  Int const& arg1 = src->head.arg1;
  F content( new Num( arg1 ) );
  std::shared_ptr< State< Node9, Tail... > > const& tail = src->tail;
  return State< Node8, Node9, Tail... >::make( Node8( content ), tail );
}
// Paren : F -> "lp()" E "rp()"
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node12, Node6, Node4, Node1, Tail... > > const& src ) {
  E const& arg1 = src->tail->head.arg1;
  F content( new Paren( arg1 ) );
  std::shared_ptr< State< Node1, Tail... > > const& tail = src->tail->tail->tail;
  return State< Node7, Node1, Tail... >::make( Node7( content ), tail );
}
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node12, Node6, Node4, Node4, Tail... > > const& src ) {
  E const& arg1 = src->tail->head.arg1;
  F content( new Paren( arg1 ) );
  std::shared_ptr< State< Node4, Tail... > > const& tail = src->tail->tail->tail;
  return State< Node7, Node4, Tail... >::make( Node7( content ), tail );
}
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node12, Node6, Node4, Node5, Tail... > > const& src ) {
  E const& arg1 = src->tail->head.arg1;
  F content( new Paren( arg1 ) );
  std::shared_ptr< State< Node5, Tail... > > const& tail = src->tail->tail->tail;
  return State< Node7, Node5, Tail... >::make( Node7( content ), tail );
}
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node12, Node6, Node4, Node9, Tail... > > const& src ) {
  E const& arg1 = src->tail->head.arg1;
  F content( new Paren( arg1 ) );
  std::shared_ptr< State< Node9, Tail... > > const& tail = src->tail->tail->tail;
  return State< Node8, Node9, Tail... >::make( Node8( content ), tail );
}
// Mul : T -> T "mul()" F
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node8, Node9, Node10, Node1, Tail... > > const& src ) {
  T const& arg1 = src->head.arg1;
  F const& arg2 = src->tail->tail->head.arg1;
  T content( new Mul( arg1, arg2 ) );
  std::shared_ptr< State< Node1, Tail... > > const& tail = src->tail->tail->tail;
  return State< Node10, Node1, Tail... >::make( Node10( content ), tail );
}
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node8, Node9, Node10, Node4, Tail... > > const& src ) {
  T const& arg1 = src->head.arg1;
  F const& arg2 = src->tail->tail->head.arg1;
  T content( new Mul( arg1, arg2 ) );
  std::shared_ptr< State< Node4, Tail... > > const& tail = src->tail->tail->tail;
  return State< Node10, Node4, Tail... >::make( Node10( content ), tail );
}
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node8, Node9, Node3, Node5, Tail... > > const& src ) {
  T const& arg1 = src->head.arg1;
  F const& arg2 = src->tail->tail->head.arg1;
  T content( new Mul( arg1, arg2 ) );
  std::shared_ptr< State< Node5, Tail... > > const& tail = src->tail->tail->tail;
  return State< Node3, Node5, Tail... >::make( Node3( content ), tail );
}
// FToT : T -> F
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node7, Node1, Tail... > > const& src ) {
  F const& arg1 = src->head.arg1;
  T content( new FToT( arg1 ) );
  std::shared_ptr< State< Node1, Tail... > > const& tail = src->tail;
  return State< Node10, Node1, Tail... >::make( Node10( content ), tail );
}
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node7, Node4, Tail... > > const& src ) {
  F const& arg1 = src->head.arg1;
  T content( new FToT( arg1 ) );
  std::shared_ptr< State< Node4, Tail... > > const& tail = src->tail;
  return State< Node10, Node4, Tail... >::make( Node10( content ), tail );
}
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node7, Node5, Tail... > > const& src ) {
  F const& arg1 = src->head.arg1;
  T content( new FToT( arg1 ) );
  std::shared_ptr< State< Node5, Tail... > > const& tail = src->tail;
  return State< Node3, Node5, Tail... >::make( Node3( content ), tail );
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

