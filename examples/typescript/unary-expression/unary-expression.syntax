syntax UnaryExpression (unaryExpression) {
  CastExpression : castExpression -> unaryExpression
  UnaryPostfixExpression : unaryExpression -> postfixExpression
  UnaryPlusExpression : unaryExpression -> "plusPlus" unaryExpression
  UnaryMinusExpression : unaryExpression -> "minusMinus" unaryExpression
  UnaryOperatorCastExpression : unaryExpression -> unaryOperator castExpression
  UnarySizeofExpression : unaryExpression -> "sizeof" unaryExpression
  PostfixPrimaryExpression : postfixExpression -> primaryExpression
  PostfixExpressions : postfixExpression -> postfixExpression expression
  PostfixAssignmentExpressions : postfixExpression -> postfixExpression assignmentExpressions
  PostfixDotExpressions : postfixExpression -> postfixExpression "dot" identifier
  PostfixArrowExpressions : postfixExpression -> postfixExpression "arrow" identifier
  PostfixPlusExpressions : postfixExpression -> postfixExpression "plusPlus"
  PostfixMinusExpressions : postfixExpression -> postfixExpression "minusMinus"
  AssignmentExpressions : assignmentExpressions -> assignmentExpression assignmentExpressions
  EpsilonAssignmentExpressions : assignmentExpressions -> eps
  PrimaryIdentifierExpression : primaryExpression -> identifier
  PrimaryConstantExpression : primaryExpression -> constant
  ConstantInteger : constant -> "integer(number)"
  ConstantString : constant -> "character(string)"
  ConstantFloat : constant -> "floating(number)"
  ConstantEnum : constant -> enumerationConstant
  ConditionalAssignmentExpression : assignmentExpression -> conditionalExpression
  AssignmentExpression : assignmentExpression -> unaryExpression assignmentOperator assignmentExpression
  AssignmentEqualOperator : assignmentOperator -> "euaql"
  AssignmentMultiEqualOperator : assignmentOperator -> "multiEqual"
  AssignmentDivEqualOperator : assignmentOperator -> "divEqual"
  AssignmentPercentEqualOperator : assignmentOperator -> "percentEqual"
  AssignmentPlusEqualOperator : assignmentOperator -> "plusEqual"
  AssignmentMinuxEqualOperator : assignmentOperator -> "minusEqual"
  AssignmentLeftShiftOperator : assignmentOperator -> "leftShiftEqual"
  AssignmentRightShiftOperator : assignmentOperator -> "rifhtShiftEqual"
  AssignmentAndEqualOperator : assignmentOperator -> "andEqual"
  AssignmentXorEqualOperator : assignmentOperator -> "xorEqual"
  AssignmentOrEqualOperator : assignmentOperator -> "orEqual"
  UnaryAndOperator : unaryOperator -> "and"
  UnaryMultiOperator : unaryOperator -> "multi"
  UnaryPlusOperator : unaryOperator -> "plus"
  UnaryMinusOperator : unaryOperator -> "minus"
  UnaryComplementOperator : unaryOperator -> "complement"
  UnaryNotOperator : unaryOperator -> "not"
  ParameterList : parameterList -> parameterDeclaration
  ParameterLists : parameterList -> parameterList parameterDeclaration
  DeclaratorParameterDeclaration : parameterDeclaration -> declarationSpecifier declarationSpecifiers declarator
  AbstractParameterDeclaration : parameterDeclaration -> declarationSpecifier declarationSpecifiers abstractDeclarator
  ParameterDeclaration : parameterDeclaration -> declarationSpecifier declarationSpecifiers
  AbstractPointerDeclarator : abstractDeclarator -> pointer
  AbstractPointerDirectDeclarator : abstractDeclarator -> pointer directAbstractDeclarator
  AbstractDirectDeclarator : abstractDeclarator -> directAbstractDeclarator
  EnumIdentifierListSpecifier : enumSpecifier -> "enum" identifier enumeratorList
  EnumListSpecifier : enumSpecifier -> "enum" enumeratorList
  EnumIdentifierSpecifier : enumSpecifier -> "enum" identifier
  EnumeratorList : enumeratorList -> enumerator
  EnumeratorLists : enumeratorList -> enumeratorList enumerator
  EnumeratorIdentifier : enumerator -> identifier
  Identifier : identifier -> constantExpression
}
