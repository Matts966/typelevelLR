
///////////////////////////////////////////////////////////////////////////////

// grammar definition

// _UnaryPostfixExpression : unaryExpression -> postfixExpression
// _UnaryPlusExpression : unaryExpression -> "plusPlus()" unaryExpression
// _UnaryMinusExpression : unaryExpression -> "minusMinus()" unaryExpression
// _UnaryOperatorCastExpression : unaryExpression -> unaryOperator castExpression
// _UnarySizeofExpression : unaryExpression -> "sizeof()" unaryExpression
// _AssignmentExpression : assignmentExpression -> unaryExpression assignmentOperator assignmentExpression
// _AssignmentExpressions : assignmentExpressions -> assignmentExpression assignmentExpressions
// _EpsilonAssignmentExpressions : assignmentExpressions -> eps
// _AssignmentEqualOperator : assignmentOperator -> "euaql()"
// _AssignmentMultiEqualOperator : assignmentOperator -> "multiEqual()"
// _AssignmentDivEqualOperator : assignmentOperator -> "divEqual()"
// _AssignmentPercentEqualOperator : assignmentOperator -> "percentEqual()"
// _AssignmentPlusEqualOperator : assignmentOperator -> "plusEqual()"
// _AssignmentMinuxEqualOperator : assignmentOperator -> "minusEqual()"
// _AssignmentLeftShiftOperator : assignmentOperator -> "leftShiftEqual()"
// _AssignmentRightShiftOperator : assignmentOperator -> "rifhtShiftEqual()"
// _AssignmentAndEqualOperator : assignmentOperator -> "andEqual()"
// _AssignmentXorEqualOperator : assignmentOperator -> "xorEqual()"
// _AssignmentOrEqualOperator : assignmentOperator -> "orEqual()"
// _UnaryCastExpression : castExpression -> unaryExpression
// _ConstantInteger : constant -> "integer(number)"
// _ConstantString : constant -> "character(string)"
// _ConstantFloat : constant -> "floating(number)"
// _EnumIdentifierListSpecifier : enumSpecifier -> "enum()" identifier enumeratorList
// _EnumListSpecifier : enumSpecifier -> "enum()" enumeratorList
// _EnumIdentifierSpecifier : enumSpecifier -> "enum()" identifier
// _EnumeratorIdentifier : enumerator -> identifier
// _EnumeratorList : enumeratorList -> enumerator
// _EnumeratorLists : enumeratorList -> enumeratorList enumerator
// _Identifier : identifier -> "identifier(string)"
// _PostfixPrimaryExpression : postfixExpression -> primaryExpression
// _PostfixAssignmentExpressions : postfixExpression -> postfixExpression assignmentExpressions
// _PostfixDotExpressions : postfixExpression -> postfixExpression "dot()" identifier
// _PostfixArrowExpressions : postfixExpression -> postfixExpression "arrow()" identifier
// _PostfixPlusExpressions : postfixExpression -> postfixExpression "plusPlus()"
// _PostfixMinusExpressions : postfixExpression -> postfixExpression "minusMinus()"
// _PrimaryIdentifierExpression : primaryExpression -> identifier
// _PrimaryConstantExpression : primaryExpression -> constant
// _UnaryAndOperator : unaryOperator -> "and()"
// _UnaryMultiOperator : unaryOperator -> "multi()"
// _UnaryPlusOperator : unaryOperator -> "plus()"
// _UnaryMinusOperator : unaryOperator -> "minus()"
// _UnaryComplementOperator : unaryOperator -> "complement()"
// _UnaryNotOperator : unaryOperator -> "not()"

///////////////////////////////////////////////////////////////////////////////

// util scripts

type Length<T extends unknown[]> = T['length']
type Prepend<Elm, T extends unknown[]> = ((
	arg: Elm,
	...rest: T
) => void) extends ((...args: infer T2) => void)
	? T2
	: never

type Rest<T extends unknown[]> = ((
	...rest: T
) => void) extends ((head: unknown, ...args: infer T2) => void)
	? T2
	: never
type Tail<T extends any[]> = ((...args: T) => any) extends ((
	_: infer First,
	...rest: infer R
) => any)
	? T extends any[] ? R : ReadonlyArray<R[number]>
	: []
declare const None: unique symbol
type None = typeof None
type Head<T extends unknown[]> = Length<T> extends 0 ? None : T[0]
type AddUnknownNodeRest<Tuple extends Node[], Result extends Node[] = [...Node[]]> = {
	empty: Result,
	nonEmpty: ((..._: Tuple) => Node) extends ((_: infer First, ..._1: infer Next) => Node)
		? Prepend<First, AddUnknownNodeRest<Rest<Tuple>, Result>>
		: never
}[
	Tuple extends [unknown, ...unknown[]]
		? 'nonEmpty'
		: 'empty'
]

type CompareLength<Left extends any[], Right extends any[]> = {
	fitBoth: 'equal'
	fitLeft: 'shorterLeft'
	fitRight: 'shorterRight'
	unfit: ((..._: Left) => any) extends ((_: any, ..._1: infer LeftRest) => any) ?
		 ((..._: Right) => any) extends ((_: any, ..._1: infer RightRest) => any) ?
					CompareLength<LeftRest, RightRest>
			: never
			: never
}[
	Left['length'] extends Right['length'] ? 'fitBoth' :
	Left extends [] ? 'fitLeft' :
	Right extends [] ? 'fitRight' :
	'unfit'
]

type StartsWith<Tuple extends unknown[], Tuple2 extends unknown[]> = {
	false: 0,
	empty: 1,
	nonEmpty: Head<Tuple> extends Head<Tuple2>
		? StartsWith<Rest<Tuple>, Rest<Tuple2>>
		: 0
}[
	CompareLength<Tuple, Tuple2> extends 'shorterLeft'
		? 'false'
		: IsFinite<Tuple2, 'finite', 'infinite'> extends 'infinite'
			? 'false'
			: Tuple2 extends [unknown, ...unknown[]]
				? 'nonEmpty'
				: 'empty'
]
type IsFinite<Tuple extends unknown[], Finite, Infinite> = {
	empty: Finite
	nonEmpty: ((..._: Tuple) => unknown) extends ((_: infer First, ..._1: infer Rest) => unknown)
		? IsFinite<Rest, Finite, Infinite>
		: never
	infinite: Infinite
}[
	Tuple extends [] ? 'empty' :
	Tuple extends (infer Element)[] ?
	Element[] extends Tuple ?
		'infinite'
	: 'nonEmpty'
	: never
]

///////////////////////////////////////////////////////////////////////////////

// AST nodes

interface UnaryExpression {
	accept(v? : Visitor): void
}

interface AssignmentExpression {
	accept(v? : Visitor): void
}

interface AssignmentExpressions {
	accept(v? : Visitor): void
}

interface AssignmentOperator {
	accept(v? : Visitor): void
}

interface CastExpression {
	accept(v? : Visitor): void
}

interface Constant {
	accept(v? : Visitor): void
}

interface EnumSpecifier {
	accept(v? : Visitor): void
}

interface Enumerator {
	accept(v? : Visitor): void
}

interface EnumeratorList {
	accept(v? : Visitor): void
}

interface Identifier {
	accept(v? : Visitor): void
}

interface PostfixExpression {
	accept(v? : Visitor): void
}

interface PrimaryExpression {
	accept(v? : Visitor): void
}

interface UnaryOperator {
	accept(v? : Visitor): void
}

interface Eps {
	accept(v? : Visitor): void
}

export class _UnaryPostfixExpression implements UnaryExpression {
	arg1 : PostfixExpression
	constructor(arg1 : PostfixExpression) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visit_UnaryPostfixExpression(this)
		} else {
			new DefaultVisitor().visit_UnaryPostfixExpression(this)
		}
	}
}

export class _UnaryPlusExpression implements UnaryExpression {
	arg1 : UnaryExpression
	constructor(arg1 : UnaryExpression) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visit_UnaryPlusExpression(this)
		} else {
			new DefaultVisitor().visit_UnaryPlusExpression(this)
		}
	}
}

export class _UnaryMinusExpression implements UnaryExpression {
	arg1 : UnaryExpression
	constructor(arg1 : UnaryExpression) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visit_UnaryMinusExpression(this)
		} else {
			new DefaultVisitor().visit_UnaryMinusExpression(this)
		}
	}
}

export class _UnaryOperatorCastExpression implements UnaryExpression {
	arg1 : UnaryOperator
	arg2 : CastExpression
	constructor(arg1 : UnaryOperator, arg2 : CastExpression) {
		this.arg1 = arg1
		this.arg2 = arg2
	}
	accept(v? : Visitor) {
		if (v) {
			v.visit_UnaryOperatorCastExpression(this)
		} else {
			new DefaultVisitor().visit_UnaryOperatorCastExpression(this)
		}
	}
}

export class _UnarySizeofExpression implements UnaryExpression {
	arg1 : UnaryExpression
	constructor(arg1 : UnaryExpression) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visit_UnarySizeofExpression(this)
		} else {
			new DefaultVisitor().visit_UnarySizeofExpression(this)
		}
	}
}

export class _AssignmentExpression implements AssignmentExpression {
	arg1 : UnaryExpression
	arg2 : AssignmentOperator
	arg3 : AssignmentExpression
	constructor(arg1 : UnaryExpression, arg2 : AssignmentOperator, arg3 : AssignmentExpression) {
		this.arg1 = arg1
		this.arg2 = arg2
		this.arg3 = arg3
	}
	accept(v? : Visitor) {
		if (v) {
			v.visit_AssignmentExpression(this)
		} else {
			new DefaultVisitor().visit_AssignmentExpression(this)
		}
	}
}

export class _AssignmentExpressions implements AssignmentExpressions {
	arg1 : AssignmentExpression
	arg2 : AssignmentExpressions
	constructor(arg1 : AssignmentExpression, arg2 : AssignmentExpressions) {
		this.arg1 = arg1
		this.arg2 = arg2
	}
	accept(v? : Visitor) {
		if (v) {
			v.visit_AssignmentExpressions(this)
		} else {
			new DefaultVisitor().visit_AssignmentExpressions(this)
		}
	}
}

export class _EpsilonAssignmentExpressions implements AssignmentExpressions {
	arg1 : Eps
	constructor(arg1 : Eps) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visit_EpsilonAssignmentExpressions(this)
		} else {
			new DefaultVisitor().visit_EpsilonAssignmentExpressions(this)
		}
	}
}

export class _AssignmentEqualOperator implements AssignmentOperator {
	accept(v? : Visitor) {
		if (v) {
			v.visit_AssignmentEqualOperator(this)
		} else {
			new DefaultVisitor().visit_AssignmentEqualOperator(this)
		}
	}
}

export class _AssignmentMultiEqualOperator implements AssignmentOperator {
	accept(v? : Visitor) {
		if (v) {
			v.visit_AssignmentMultiEqualOperator(this)
		} else {
			new DefaultVisitor().visit_AssignmentMultiEqualOperator(this)
		}
	}
}

export class _AssignmentDivEqualOperator implements AssignmentOperator {
	accept(v? : Visitor) {
		if (v) {
			v.visit_AssignmentDivEqualOperator(this)
		} else {
			new DefaultVisitor().visit_AssignmentDivEqualOperator(this)
		}
	}
}

export class _AssignmentPercentEqualOperator implements AssignmentOperator {
	accept(v? : Visitor) {
		if (v) {
			v.visit_AssignmentPercentEqualOperator(this)
		} else {
			new DefaultVisitor().visit_AssignmentPercentEqualOperator(this)
		}
	}
}

export class _AssignmentPlusEqualOperator implements AssignmentOperator {
	accept(v? : Visitor) {
		if (v) {
			v.visit_AssignmentPlusEqualOperator(this)
		} else {
			new DefaultVisitor().visit_AssignmentPlusEqualOperator(this)
		}
	}
}

export class _AssignmentMinuxEqualOperator implements AssignmentOperator {
	accept(v? : Visitor) {
		if (v) {
			v.visit_AssignmentMinuxEqualOperator(this)
		} else {
			new DefaultVisitor().visit_AssignmentMinuxEqualOperator(this)
		}
	}
}

export class _AssignmentLeftShiftOperator implements AssignmentOperator {
	accept(v? : Visitor) {
		if (v) {
			v.visit_AssignmentLeftShiftOperator(this)
		} else {
			new DefaultVisitor().visit_AssignmentLeftShiftOperator(this)
		}
	}
}

export class _AssignmentRightShiftOperator implements AssignmentOperator {
	accept(v? : Visitor) {
		if (v) {
			v.visit_AssignmentRightShiftOperator(this)
		} else {
			new DefaultVisitor().visit_AssignmentRightShiftOperator(this)
		}
	}
}

export class _AssignmentAndEqualOperator implements AssignmentOperator {
	accept(v? : Visitor) {
		if (v) {
			v.visit_AssignmentAndEqualOperator(this)
		} else {
			new DefaultVisitor().visit_AssignmentAndEqualOperator(this)
		}
	}
}

export class _AssignmentXorEqualOperator implements AssignmentOperator {
	accept(v? : Visitor) {
		if (v) {
			v.visit_AssignmentXorEqualOperator(this)
		} else {
			new DefaultVisitor().visit_AssignmentXorEqualOperator(this)
		}
	}
}

export class _AssignmentOrEqualOperator implements AssignmentOperator {
	accept(v? : Visitor) {
		if (v) {
			v.visit_AssignmentOrEqualOperator(this)
		} else {
			new DefaultVisitor().visit_AssignmentOrEqualOperator(this)
		}
	}
}

export class _UnaryCastExpression implements CastExpression {
	arg1 : UnaryExpression
	constructor(arg1 : UnaryExpression) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visit_UnaryCastExpression(this)
		} else {
			new DefaultVisitor().visit_UnaryCastExpression(this)
		}
	}
}

export class _ConstantInteger implements Constant {
	arg1 : number
	constructor(arg1 : number) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visit_ConstantInteger(this)
		} else {
			new DefaultVisitor().visit_ConstantInteger(this)
		}
	}
}

export class _ConstantString implements Constant {
	arg1 : string
	constructor(arg1 : string) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visit_ConstantString(this)
		} else {
			new DefaultVisitor().visit_ConstantString(this)
		}
	}
}

export class _ConstantFloat implements Constant {
	arg1 : number
	constructor(arg1 : number) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visit_ConstantFloat(this)
		} else {
			new DefaultVisitor().visit_ConstantFloat(this)
		}
	}
}

export class _EnumIdentifierListSpecifier implements EnumSpecifier {
	arg1 : Identifier
	arg2 : EnumeratorList
	constructor(arg1 : Identifier, arg2 : EnumeratorList) {
		this.arg1 = arg1
		this.arg2 = arg2
	}
	accept(v? : Visitor) {
		if (v) {
			v.visit_EnumIdentifierListSpecifier(this)
		} else {
			new DefaultVisitor().visit_EnumIdentifierListSpecifier(this)
		}
	}
}

export class _EnumListSpecifier implements EnumSpecifier {
	arg1 : EnumeratorList
	constructor(arg1 : EnumeratorList) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visit_EnumListSpecifier(this)
		} else {
			new DefaultVisitor().visit_EnumListSpecifier(this)
		}
	}
}

export class _EnumIdentifierSpecifier implements EnumSpecifier {
	arg1 : Identifier
	constructor(arg1 : Identifier) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visit_EnumIdentifierSpecifier(this)
		} else {
			new DefaultVisitor().visit_EnumIdentifierSpecifier(this)
		}
	}
}

export class _EnumeratorIdentifier implements Enumerator {
	arg1 : Identifier
	constructor(arg1 : Identifier) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visit_EnumeratorIdentifier(this)
		} else {
			new DefaultVisitor().visit_EnumeratorIdentifier(this)
		}
	}
}

export class _EnumeratorList implements EnumeratorList {
	arg1 : Enumerator
	constructor(arg1 : Enumerator) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visit_EnumeratorList(this)
		} else {
			new DefaultVisitor().visit_EnumeratorList(this)
		}
	}
}

export class _EnumeratorLists implements EnumeratorList {
	arg1 : EnumeratorList
	arg2 : Enumerator
	constructor(arg1 : EnumeratorList, arg2 : Enumerator) {
		this.arg1 = arg1
		this.arg2 = arg2
	}
	accept(v? : Visitor) {
		if (v) {
			v.visit_EnumeratorLists(this)
		} else {
			new DefaultVisitor().visit_EnumeratorLists(this)
		}
	}
}

export class _Identifier implements Identifier {
	arg1 : string
	constructor(arg1 : string) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visit_Identifier(this)
		} else {
			new DefaultVisitor().visit_Identifier(this)
		}
	}
}

export class _PostfixPrimaryExpression implements PostfixExpression {
	arg1 : PrimaryExpression
	constructor(arg1 : PrimaryExpression) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visit_PostfixPrimaryExpression(this)
		} else {
			new DefaultVisitor().visit_PostfixPrimaryExpression(this)
		}
	}
}

export class _PostfixAssignmentExpressions implements PostfixExpression {
	arg1 : PostfixExpression
	arg2 : AssignmentExpressions
	constructor(arg1 : PostfixExpression, arg2 : AssignmentExpressions) {
		this.arg1 = arg1
		this.arg2 = arg2
	}
	accept(v? : Visitor) {
		if (v) {
			v.visit_PostfixAssignmentExpressions(this)
		} else {
			new DefaultVisitor().visit_PostfixAssignmentExpressions(this)
		}
	}
}

export class _PostfixDotExpressions implements PostfixExpression {
	arg1 : PostfixExpression
	arg2 : Identifier
	constructor(arg1 : PostfixExpression, arg2 : Identifier) {
		this.arg1 = arg1
		this.arg2 = arg2
	}
	accept(v? : Visitor) {
		if (v) {
			v.visit_PostfixDotExpressions(this)
		} else {
			new DefaultVisitor().visit_PostfixDotExpressions(this)
		}
	}
}

export class _PostfixArrowExpressions implements PostfixExpression {
	arg1 : PostfixExpression
	arg2 : Identifier
	constructor(arg1 : PostfixExpression, arg2 : Identifier) {
		this.arg1 = arg1
		this.arg2 = arg2
	}
	accept(v? : Visitor) {
		if (v) {
			v.visit_PostfixArrowExpressions(this)
		} else {
			new DefaultVisitor().visit_PostfixArrowExpressions(this)
		}
	}
}

export class _PostfixPlusExpressions implements PostfixExpression {
	arg1 : PostfixExpression
	constructor(arg1 : PostfixExpression) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visit_PostfixPlusExpressions(this)
		} else {
			new DefaultVisitor().visit_PostfixPlusExpressions(this)
		}
	}
}

export class _PostfixMinusExpressions implements PostfixExpression {
	arg1 : PostfixExpression
	constructor(arg1 : PostfixExpression) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visit_PostfixMinusExpressions(this)
		} else {
			new DefaultVisitor().visit_PostfixMinusExpressions(this)
		}
	}
}

export class _PrimaryIdentifierExpression implements PrimaryExpression {
	arg1 : Identifier
	constructor(arg1 : Identifier) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visit_PrimaryIdentifierExpression(this)
		} else {
			new DefaultVisitor().visit_PrimaryIdentifierExpression(this)
		}
	}
}

export class _PrimaryConstantExpression implements PrimaryExpression {
	arg1 : Constant
	constructor(arg1 : Constant) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visit_PrimaryConstantExpression(this)
		} else {
			new DefaultVisitor().visit_PrimaryConstantExpression(this)
		}
	}
}

export class _UnaryAndOperator implements UnaryOperator {
	accept(v? : Visitor) {
		if (v) {
			v.visit_UnaryAndOperator(this)
		} else {
			new DefaultVisitor().visit_UnaryAndOperator(this)
		}
	}
}

export class _UnaryMultiOperator implements UnaryOperator {
	accept(v? : Visitor) {
		if (v) {
			v.visit_UnaryMultiOperator(this)
		} else {
			new DefaultVisitor().visit_UnaryMultiOperator(this)
		}
	}
}

export class _UnaryPlusOperator implements UnaryOperator {
	accept(v? : Visitor) {
		if (v) {
			v.visit_UnaryPlusOperator(this)
		} else {
			new DefaultVisitor().visit_UnaryPlusOperator(this)
		}
	}
}

export class _UnaryMinusOperator implements UnaryOperator {
	accept(v? : Visitor) {
		if (v) {
			v.visit_UnaryMinusOperator(this)
		} else {
			new DefaultVisitor().visit_UnaryMinusOperator(this)
		}
	}
}

export class _UnaryComplementOperator implements UnaryOperator {
	accept(v? : Visitor) {
		if (v) {
			v.visit_UnaryComplementOperator(this)
		} else {
			new DefaultVisitor().visit_UnaryComplementOperator(this)
		}
	}
}

export class _UnaryNotOperator implements UnaryOperator {
	accept(v? : Visitor) {
		if (v) {
			v.visit_UnaryNotOperator(this)
		} else {
			new DefaultVisitor().visit_UnaryNotOperator(this)
		}
	}
}


interface Visitor {
	visit_UnaryPostfixExpression(host : _UnaryPostfixExpression): void
	visit_UnaryPlusExpression(host : _UnaryPlusExpression): void
	visit_UnaryMinusExpression(host : _UnaryMinusExpression): void
	visit_UnaryOperatorCastExpression(host : _UnaryOperatorCastExpression): void
	visit_UnarySizeofExpression(host : _UnarySizeofExpression): void
	visit_AssignmentExpression(host : _AssignmentExpression): void
	visit_AssignmentExpressions(host : _AssignmentExpressions): void
	visit_EpsilonAssignmentExpressions(host : _EpsilonAssignmentExpressions): void
	visit_AssignmentEqualOperator(host : _AssignmentEqualOperator): void
	visit_AssignmentMultiEqualOperator(host : _AssignmentMultiEqualOperator): void
	visit_AssignmentDivEqualOperator(host : _AssignmentDivEqualOperator): void
	visit_AssignmentPercentEqualOperator(host : _AssignmentPercentEqualOperator): void
	visit_AssignmentPlusEqualOperator(host : _AssignmentPlusEqualOperator): void
	visit_AssignmentMinuxEqualOperator(host : _AssignmentMinuxEqualOperator): void
	visit_AssignmentLeftShiftOperator(host : _AssignmentLeftShiftOperator): void
	visit_AssignmentRightShiftOperator(host : _AssignmentRightShiftOperator): void
	visit_AssignmentAndEqualOperator(host : _AssignmentAndEqualOperator): void
	visit_AssignmentXorEqualOperator(host : _AssignmentXorEqualOperator): void
	visit_AssignmentOrEqualOperator(host : _AssignmentOrEqualOperator): void
	visit_UnaryCastExpression(host : _UnaryCastExpression): void
	visit_ConstantInteger(host : _ConstantInteger): void
	visit_ConstantString(host : _ConstantString): void
	visit_ConstantFloat(host : _ConstantFloat): void
	visit_EnumIdentifierListSpecifier(host : _EnumIdentifierListSpecifier): void
	visit_EnumListSpecifier(host : _EnumListSpecifier): void
	visit_EnumIdentifierSpecifier(host : _EnumIdentifierSpecifier): void
	visit_EnumeratorIdentifier(host : _EnumeratorIdentifier): void
	visit_EnumeratorList(host : _EnumeratorList): void
	visit_EnumeratorLists(host : _EnumeratorLists): void
	visit_Identifier(host : _Identifier): void
	visit_PostfixPrimaryExpression(host : _PostfixPrimaryExpression): void
	visit_PostfixAssignmentExpressions(host : _PostfixAssignmentExpressions): void
	visit_PostfixDotExpressions(host : _PostfixDotExpressions): void
	visit_PostfixArrowExpressions(host : _PostfixArrowExpressions): void
	visit_PostfixPlusExpressions(host : _PostfixPlusExpressions): void
	visit_PostfixMinusExpressions(host : _PostfixMinusExpressions): void
	visit_PrimaryIdentifierExpression(host : _PrimaryIdentifierExpression): void
	visit_PrimaryConstantExpression(host : _PrimaryConstantExpression): void
	visit_UnaryAndOperator(host : _UnaryAndOperator): void
	visit_UnaryMultiOperator(host : _UnaryMultiOperator): void
	visit_UnaryPlusOperator(host : _UnaryPlusOperator): void
	visit_UnaryMinusOperator(host : _UnaryMinusOperator): void
	visit_UnaryComplementOperator(host : _UnaryComplementOperator): void
	visit_UnaryNotOperator(host : _UnaryNotOperator): void
}

export class DefaultVisitor implements Visitor {
	visit_UnaryPostfixExpression(host : _UnaryPostfixExpression) {
		host.arg1.accept(this)
	}
	visit_UnaryPlusExpression(host : _UnaryPlusExpression) {
		process.stdout.write("plusPlus")
		process.stdout.write(" ")
		host.arg1.accept(this)
	}
	visit_UnaryMinusExpression(host : _UnaryMinusExpression) {
		process.stdout.write("minusMinus")
		process.stdout.write(" ")
		host.arg1.accept(this)
	}
	visit_UnaryOperatorCastExpression(host : _UnaryOperatorCastExpression) {
		host.arg1.accept(this)
		process.stdout.write(" ")
		host.arg2.accept(this)
	}
	visit_UnarySizeofExpression(host : _UnarySizeofExpression) {
		process.stdout.write("sizeof")
		process.stdout.write(" ")
		host.arg1.accept(this)
	}
	visit_AssignmentExpression(host : _AssignmentExpression) {
		host.arg1.accept(this)
		process.stdout.write(" ")
		host.arg2.accept(this)
		process.stdout.write(" ")
		host.arg3.accept(this)
	}
	visit_AssignmentExpressions(host : _AssignmentExpressions) {
		host.arg1.accept(this)
		process.stdout.write(" ")
		host.arg2.accept(this)
	}
	visit_EpsilonAssignmentExpressions(host : _EpsilonAssignmentExpressions) {
		host.arg1.accept(this)
	}
	visit_AssignmentEqualOperator(host : _AssignmentEqualOperator) {
		process.stdout.write("euaql")
	}
	visit_AssignmentMultiEqualOperator(host : _AssignmentMultiEqualOperator) {
		process.stdout.write("multiEqual")
	}
	visit_AssignmentDivEqualOperator(host : _AssignmentDivEqualOperator) {
		process.stdout.write("divEqual")
	}
	visit_AssignmentPercentEqualOperator(host : _AssignmentPercentEqualOperator) {
		process.stdout.write("percentEqual")
	}
	visit_AssignmentPlusEqualOperator(host : _AssignmentPlusEqualOperator) {
		process.stdout.write("plusEqual")
	}
	visit_AssignmentMinuxEqualOperator(host : _AssignmentMinuxEqualOperator) {
		process.stdout.write("minusEqual")
	}
	visit_AssignmentLeftShiftOperator(host : _AssignmentLeftShiftOperator) {
		process.stdout.write("leftShiftEqual")
	}
	visit_AssignmentRightShiftOperator(host : _AssignmentRightShiftOperator) {
		process.stdout.write("rifhtShiftEqual")
	}
	visit_AssignmentAndEqualOperator(host : _AssignmentAndEqualOperator) {
		process.stdout.write("andEqual")
	}
	visit_AssignmentXorEqualOperator(host : _AssignmentXorEqualOperator) {
		process.stdout.write("xorEqual")
	}
	visit_AssignmentOrEqualOperator(host : _AssignmentOrEqualOperator) {
		process.stdout.write("orEqual")
	}
	visit_UnaryCastExpression(host : _UnaryCastExpression) {
		host.arg1.accept(this)
	}
	visit_ConstantInteger(host : _ConstantInteger) {
		process.stdout.write(""+host.arg1)
	}
	visit_ConstantString(host : _ConstantString) {
		process.stdout.write(""+host.arg1)
	}
	visit_ConstantFloat(host : _ConstantFloat) {
		process.stdout.write(""+host.arg1)
	}
	visit_EnumIdentifierListSpecifier(host : _EnumIdentifierListSpecifier) {
		process.stdout.write("enum")
		process.stdout.write(" ")
		host.arg1.accept(this)
		process.stdout.write(" ")
		host.arg2.accept(this)
	}
	visit_EnumListSpecifier(host : _EnumListSpecifier) {
		process.stdout.write("enum")
		process.stdout.write(" ")
		host.arg1.accept(this)
	}
	visit_EnumIdentifierSpecifier(host : _EnumIdentifierSpecifier) {
		process.stdout.write("enum")
		process.stdout.write(" ")
		host.arg1.accept(this)
	}
	visit_EnumeratorIdentifier(host : _EnumeratorIdentifier) {
		host.arg1.accept(this)
	}
	visit_EnumeratorList(host : _EnumeratorList) {
		host.arg1.accept(this)
	}
	visit_EnumeratorLists(host : _EnumeratorLists) {
		host.arg1.accept(this)
		process.stdout.write(" ")
		host.arg2.accept(this)
	}
	visit_Identifier(host : _Identifier) {
		process.stdout.write(""+host.arg1)
	}
	visit_PostfixPrimaryExpression(host : _PostfixPrimaryExpression) {
		host.arg1.accept(this)
	}
	visit_PostfixAssignmentExpressions(host : _PostfixAssignmentExpressions) {
		host.arg1.accept(this)
		process.stdout.write(" ")
		host.arg2.accept(this)
	}
	visit_PostfixDotExpressions(host : _PostfixDotExpressions) {
		host.arg1.accept(this)
		process.stdout.write(" ")
		process.stdout.write("dot")
		process.stdout.write(" ")
		host.arg2.accept(this)
	}
	visit_PostfixArrowExpressions(host : _PostfixArrowExpressions) {
		host.arg1.accept(this)
		process.stdout.write(" ")
		process.stdout.write("arrow")
		process.stdout.write(" ")
		host.arg2.accept(this)
	}
	visit_PostfixPlusExpressions(host : _PostfixPlusExpressions) {
		host.arg1.accept(this)
		process.stdout.write(" ")
		process.stdout.write("plusPlus")
	}
	visit_PostfixMinusExpressions(host : _PostfixMinusExpressions) {
		host.arg1.accept(this)
		process.stdout.write(" ")
		process.stdout.write("minusMinus")
	}
	visit_PrimaryIdentifierExpression(host : _PrimaryIdentifierExpression) {
		host.arg1.accept(this)
	}
	visit_PrimaryConstantExpression(host : _PrimaryConstantExpression) {
		host.arg1.accept(this)
	}
	visit_UnaryAndOperator(host : _UnaryAndOperator) {
		process.stdout.write("and")
	}
	visit_UnaryMultiOperator(host : _UnaryMultiOperator) {
		process.stdout.write("multi")
	}
	visit_UnaryPlusOperator(host : _UnaryPlusOperator) {
		process.stdout.write("plus")
	}
	visit_UnaryMinusOperator(host : _UnaryMinusOperator) {
		process.stdout.write("minus")
	}
	visit_UnaryComplementOperator(host : _UnaryComplementOperator) {
		process.stdout.write("complement")
	}
	visit_UnaryNotOperator(host : _UnaryNotOperator) {
		process.stdout.write("not")
	}
}

///////////////////////////////////////////////////////////////////////////////

// automaton states

type Node = Node1 | Node2 | Node3 | Node4 | Node5 | Node6 | Node7 | Node8 | Node9 | Node10 | Node11 | Node12 | Node13 | Node14 | Node15 | Node16 | Node17 | Node18 | Node19 | Node20 | Node21 | Node22 | Node23 | Node24 | Node25 | Node26 | Node27 | Node28 | Node29 | Node30 | Node31 | Node32 | Node33 | Node34 | Node35 | Node36 | Node37 | Node38 | Node39 | Node40 | Node41 | Node42 | Node43 | Node44 | Node45 | Node46 | Node47 | Node48 | Node49

class Node1 {
	private _Node1Brand: boolean = true
}

class Node2 {
	private _Node2Brand: boolean = true
	arg1 : UnaryExpression
	constructor(arg1 : UnaryExpression) {
		this.arg1 = arg1
	}
}

class Node3 {
	private _Node3Brand: boolean = true
}

class Node4 {
	private _Node4Brand: boolean = true
	arg1 : UnaryExpression
	constructor(arg1 : UnaryExpression) {
		this.arg1 = arg1
	}
}

class Node5 {
	private _Node5Brand: boolean = true
}

class Node6 {
	private _Node6Brand: boolean = true
}

class Node7 {
	private _Node7Brand: boolean = true
	arg1 : AssignmentExpression
	constructor(arg1 : AssignmentExpression) {
		this.arg1 = arg1
	}
}

class Node8 {
	private _Node8Brand: boolean = true
	arg1 : AssignmentOperator
	constructor(arg1 : AssignmentOperator) {
		this.arg1 = arg1
	}
}

class Node9 {
	private _Node9Brand: boolean = true
	arg1 : AssignmentExpression
	constructor(arg1 : AssignmentExpression) {
		this.arg1 = arg1
	}
}

class Node10 {
	private _Node10Brand: boolean = true
	arg1 : PostfixExpression
	constructor(arg1 : PostfixExpression) {
		this.arg1 = arg1
	}
}

class Node11 {
	private _Node11Brand: boolean = true
	arg1 : AssignmentExpressions
	constructor(arg1 : AssignmentExpressions) {
		this.arg1 = arg1
	}
}

class Node12 {
	private _Node12Brand: boolean = true
}

class Node13 {
	private _Node13Brand: boolean = true
}

class Node14 {
	private _Node14Brand: boolean = true
}

class Node15 {
	private _Node15Brand: boolean = true
}

class Node16 {
	private _Node16Brand: boolean = true
}

class Node17 {
	private _Node17Brand: boolean = true
}

class Node18 {
	private _Node18Brand: boolean = true
}

class Node19 {
	private _Node19Brand: boolean = true
}

class Node20 {
	private _Node20Brand: boolean = true
	arg1 : number
	constructor(arg1 : number) {
		this.arg1 = arg1
	}
}

class Node21 {
	private _Node21Brand: boolean = true
}

class Node22 {
	private _Node22Brand: boolean = true
}

class Node23 {
	private _Node23Brand: boolean = true
	arg1 : UnaryOperator
	constructor(arg1 : UnaryOperator) {
		this.arg1 = arg1
	}
}

class Node24 {
	private _Node24Brand: boolean = true
}

class Node25 {
	private _Node25Brand: boolean = true
}

class Node26 {
	private _Node26Brand: boolean = true
}

class Node27 {
	private _Node27Brand: boolean = true
	arg1 : number
	constructor(arg1 : number) {
		this.arg1 = arg1
	}
}

class Node28 {
	private _Node28Brand: boolean = true
	arg1 : string
	constructor(arg1 : string) {
		this.arg1 = arg1
	}
}

class Node29 {
	private _Node29Brand: boolean = true
	arg1 : Eps
	constructor(arg1 : Eps) {
		this.arg1 = arg1
	}
}

class Node30 {
	private _Node30Brand: boolean = true
	arg1 : string
	constructor(arg1 : string) {
		this.arg1 = arg1
	}
}

class Node31 {
	private _Node31Brand: boolean = true
}

class Node32 {
	private _Node32Brand: boolean = true
}

class Node33 {
	private _Node33Brand: boolean = true
	arg1 : Identifier
	constructor(arg1 : Identifier) {
		this.arg1 = arg1
	}
}

class Node34 {
	private _Node34Brand: boolean = true
	arg1 : AssignmentExpressions
	constructor(arg1 : AssignmentExpressions) {
		this.arg1 = arg1
	}
}

class Node35 {
	private _Node35Brand: boolean = true
	arg1 : Identifier
	constructor(arg1 : Identifier) {
		this.arg1 = arg1
	}
}

class Node36 {
	private _Node36Brand: boolean = true
	arg1 : PrimaryExpression
	constructor(arg1 : PrimaryExpression) {
		this.arg1 = arg1
	}
}

class Node37 {
	private _Node37Brand: boolean = true
	arg1 : Constant
	constructor(arg1 : Constant) {
		this.arg1 = arg1
	}
}

class Node38 {
	private _Node38Brand: boolean = true
	arg1 : Identifier
	constructor(arg1 : Identifier) {
		this.arg1 = arg1
	}
}

class Node39 {
	private _Node39Brand: boolean = true
}

class Node40 {
	private _Node40Brand: boolean = true
	arg1 : UnaryExpression
	constructor(arg1 : UnaryExpression) {
		this.arg1 = arg1
	}
}

class Node41 {
	private _Node41Brand: boolean = true
}

class Node42 {
	private _Node42Brand: boolean = true
	arg1 : UnaryExpression
	constructor(arg1 : UnaryExpression) {
		this.arg1 = arg1
	}
}

class Node43 {
	private _Node43Brand: boolean = true
}

class Node44 {
	private _Node44Brand: boolean = true
}

class Node45 {
	private _Node45Brand: boolean = true
}

class Node46 {
	private _Node46Brand: boolean = true
	arg1 : CastExpression
	constructor(arg1 : CastExpression) {
		this.arg1 = arg1
	}
}

class Node47 {
	private _Node47Brand: boolean = true
	arg1 : UnaryExpression
	constructor(arg1 : UnaryExpression) {
		this.arg1 = arg1
	}
}

class Node48 {
	private _Node48Brand: boolean = true
}

class Node49 {
	private _Node49Brand: boolean = true
	arg1 : UnaryExpression
	constructor(arg1 : UnaryExpression) {
		this.arg1 = arg1
	}
}

///////////////////////////////////////////////////////////////////////////////

// transitions

function startsWithNode1(arg: any): arg is AddUnknownNodeRest<[Node1]> {
	return arg[0] && arg[0]._Node1Brand
}

function startsWithNode10(arg: any): arg is AddUnknownNodeRest<[Node10]> {
	return arg[0] && arg[0]._Node10Brand
}

function startsWithNode10Node1(arg: any): arg is AddUnknownNodeRest<[Node10, Node1]> {
	return arg[0] && arg[0]._Node10Brand
		&& arg[1] && arg[1]._Node1Brand
}

function startsWithNode10Node10(arg: any): arg is AddUnknownNodeRest<[Node10, Node10]> {
	return arg[0] && arg[0]._Node10Brand
		&& arg[1] && arg[1]._Node10Brand
}

function startsWithNode10Node21(arg: any): arg is AddUnknownNodeRest<[Node10, Node21]> {
	return arg[0] && arg[0]._Node10Brand
		&& arg[1] && arg[1]._Node21Brand
}

function startsWithNode10Node22(arg: any): arg is AddUnknownNodeRest<[Node10, Node22]> {
	return arg[0] && arg[0]._Node10Brand
		&& arg[1] && arg[1]._Node22Brand
}

function startsWithNode10Node23(arg: any): arg is AddUnknownNodeRest<[Node10, Node23]> {
	return arg[0] && arg[0]._Node10Brand
		&& arg[1] && arg[1]._Node23Brand
}

function startsWithNode10Node24(arg: any): arg is AddUnknownNodeRest<[Node10, Node24]> {
	return arg[0] && arg[0]._Node10Brand
		&& arg[1] && arg[1]._Node24Brand
}

function startsWithNode10Node25(arg: any): arg is AddUnknownNodeRest<[Node10, Node25]> {
	return arg[0] && arg[0]._Node10Brand
		&& arg[1] && arg[1]._Node25Brand
}

function startsWithNode10Node26(arg: any): arg is AddUnknownNodeRest<[Node10, Node26]> {
	return arg[0] && arg[0]._Node10Brand
		&& arg[1] && arg[1]._Node26Brand
}

function startsWithNode10Node8(arg: any): arg is AddUnknownNodeRest<[Node10, Node8]> {
	return arg[0] && arg[0]._Node10Brand
		&& arg[1] && arg[1]._Node8Brand
}

function startsWithNode10Node9(arg: any): arg is AddUnknownNodeRest<[Node10, Node9]> {
	return arg[0] && arg[0]._Node10Brand
		&& arg[1] && arg[1]._Node9Brand
}

function startsWithNode11Node9Node10(arg: any): arg is AddUnknownNodeRest<[Node11, Node9, Node10]> {
	return arg[0] && arg[0]._Node11Brand
		&& arg[1] && arg[1]._Node9Brand
		&& arg[2] && arg[2]._Node10Brand
}

function startsWithNode11Node9Node9(arg: any): arg is AddUnknownNodeRest<[Node11, Node9, Node9]> {
	return arg[0] && arg[0]._Node11Brand
		&& arg[1] && arg[1]._Node9Brand
		&& arg[2] && arg[2]._Node9Brand
}

function startsWithNode12Node4(arg: any): arg is AddUnknownNodeRest<[Node12, Node4]> {
	return arg[0] && arg[0]._Node12Brand
		&& arg[1] && arg[1]._Node4Brand
}

function startsWithNode13Node4(arg: any): arg is AddUnknownNodeRest<[Node13, Node4]> {
	return arg[0] && arg[0]._Node13Brand
		&& arg[1] && arg[1]._Node4Brand
}

function startsWithNode14Node4(arg: any): arg is AddUnknownNodeRest<[Node14, Node4]> {
	return arg[0] && arg[0]._Node14Brand
		&& arg[1] && arg[1]._Node4Brand
}

function startsWithNode15Node4(arg: any): arg is AddUnknownNodeRest<[Node15, Node4]> {
	return arg[0] && arg[0]._Node15Brand
		&& arg[1] && arg[1]._Node4Brand
}

function startsWithNode16Node4(arg: any): arg is AddUnknownNodeRest<[Node16, Node4]> {
	return arg[0] && arg[0]._Node16Brand
		&& arg[1] && arg[1]._Node4Brand
}

function startsWithNode17Node4(arg: any): arg is AddUnknownNodeRest<[Node17, Node4]> {
	return arg[0] && arg[0]._Node17Brand
		&& arg[1] && arg[1]._Node4Brand
}

function startsWithNode18Node4(arg: any): arg is AddUnknownNodeRest<[Node18, Node4]> {
	return arg[0] && arg[0]._Node18Brand
		&& arg[1] && arg[1]._Node4Brand
}

function startsWithNode19Node4(arg: any): arg is AddUnknownNodeRest<[Node19, Node4]> {
	return arg[0] && arg[0]._Node19Brand
		&& arg[1] && arg[1]._Node4Brand
}

function startsWithNode2(arg: any): arg is AddUnknownNodeRest<[Node2]> {
	return arg[0] && arg[0]._Node2Brand
}

function startsWithNode20Node1(arg: any): arg is AddUnknownNodeRest<[Node20, Node1]> {
	return arg[0] && arg[0]._Node20Brand
		&& arg[1] && arg[1]._Node1Brand
}

function startsWithNode20Node10(arg: any): arg is AddUnknownNodeRest<[Node20, Node10]> {
	return arg[0] && arg[0]._Node20Brand
		&& arg[1] && arg[1]._Node10Brand
}

function startsWithNode20Node21(arg: any): arg is AddUnknownNodeRest<[Node20, Node21]> {
	return arg[0] && arg[0]._Node20Brand
		&& arg[1] && arg[1]._Node21Brand
}

function startsWithNode20Node22(arg: any): arg is AddUnknownNodeRest<[Node20, Node22]> {
	return arg[0] && arg[0]._Node20Brand
		&& arg[1] && arg[1]._Node22Brand
}

function startsWithNode20Node23(arg: any): arg is AddUnknownNodeRest<[Node20, Node23]> {
	return arg[0] && arg[0]._Node20Brand
		&& arg[1] && arg[1]._Node23Brand
}

function startsWithNode20Node24(arg: any): arg is AddUnknownNodeRest<[Node20, Node24]> {
	return arg[0] && arg[0]._Node20Brand
		&& arg[1] && arg[1]._Node24Brand
}

function startsWithNode20Node25(arg: any): arg is AddUnknownNodeRest<[Node20, Node25]> {
	return arg[0] && arg[0]._Node20Brand
		&& arg[1] && arg[1]._Node25Brand
}

function startsWithNode20Node26(arg: any): arg is AddUnknownNodeRest<[Node20, Node26]> {
	return arg[0] && arg[0]._Node20Brand
		&& arg[1] && arg[1]._Node26Brand
}

function startsWithNode20Node8(arg: any): arg is AddUnknownNodeRest<[Node20, Node8]> {
	return arg[0] && arg[0]._Node20Brand
		&& arg[1] && arg[1]._Node8Brand
}

function startsWithNode20Node9(arg: any): arg is AddUnknownNodeRest<[Node20, Node9]> {
	return arg[0] && arg[0]._Node20Brand
		&& arg[1] && arg[1]._Node9Brand
}

function startsWithNode21(arg: any): arg is AddUnknownNodeRest<[Node21]> {
	return arg[0] && arg[0]._Node21Brand
}

function startsWithNode21Node10Node1(arg: any): arg is AddUnknownNodeRest<[Node21, Node10, Node1]> {
	return arg[0] && arg[0]._Node21Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node1Brand
}

function startsWithNode21Node10Node10(arg: any): arg is AddUnknownNodeRest<[Node21, Node10, Node10]> {
	return arg[0] && arg[0]._Node21Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node10Brand
}

function startsWithNode21Node10Node21(arg: any): arg is AddUnknownNodeRest<[Node21, Node10, Node21]> {
	return arg[0] && arg[0]._Node21Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node21Brand
}

function startsWithNode21Node10Node22(arg: any): arg is AddUnknownNodeRest<[Node21, Node10, Node22]> {
	return arg[0] && arg[0]._Node21Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node22Brand
}

function startsWithNode21Node10Node23(arg: any): arg is AddUnknownNodeRest<[Node21, Node10, Node23]> {
	return arg[0] && arg[0]._Node21Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node23Brand
}

function startsWithNode21Node10Node24(arg: any): arg is AddUnknownNodeRest<[Node21, Node10, Node24]> {
	return arg[0] && arg[0]._Node21Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node24Brand
}

function startsWithNode21Node10Node25(arg: any): arg is AddUnknownNodeRest<[Node21, Node10, Node25]> {
	return arg[0] && arg[0]._Node21Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node25Brand
}

function startsWithNode21Node10Node26(arg: any): arg is AddUnknownNodeRest<[Node21, Node10, Node26]> {
	return arg[0] && arg[0]._Node21Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node26Brand
}

function startsWithNode21Node10Node8(arg: any): arg is AddUnknownNodeRest<[Node21, Node10, Node8]> {
	return arg[0] && arg[0]._Node21Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node8Brand
}

function startsWithNode21Node10Node9(arg: any): arg is AddUnknownNodeRest<[Node21, Node10, Node9]> {
	return arg[0] && arg[0]._Node21Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node9Brand
}

function startsWithNode22(arg: any): arg is AddUnknownNodeRest<[Node22]> {
	return arg[0] && arg[0]._Node22Brand
}

function startsWithNode22Node10Node1(arg: any): arg is AddUnknownNodeRest<[Node22, Node10, Node1]> {
	return arg[0] && arg[0]._Node22Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node1Brand
}

function startsWithNode22Node10Node10(arg: any): arg is AddUnknownNodeRest<[Node22, Node10, Node10]> {
	return arg[0] && arg[0]._Node22Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node10Brand
}

function startsWithNode22Node10Node21(arg: any): arg is AddUnknownNodeRest<[Node22, Node10, Node21]> {
	return arg[0] && arg[0]._Node22Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node21Brand
}

function startsWithNode22Node10Node22(arg: any): arg is AddUnknownNodeRest<[Node22, Node10, Node22]> {
	return arg[0] && arg[0]._Node22Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node22Brand
}

function startsWithNode22Node10Node23(arg: any): arg is AddUnknownNodeRest<[Node22, Node10, Node23]> {
	return arg[0] && arg[0]._Node22Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node23Brand
}

function startsWithNode22Node10Node24(arg: any): arg is AddUnknownNodeRest<[Node22, Node10, Node24]> {
	return arg[0] && arg[0]._Node22Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node24Brand
}

function startsWithNode22Node10Node25(arg: any): arg is AddUnknownNodeRest<[Node22, Node10, Node25]> {
	return arg[0] && arg[0]._Node22Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node25Brand
}

function startsWithNode22Node10Node26(arg: any): arg is AddUnknownNodeRest<[Node22, Node10, Node26]> {
	return arg[0] && arg[0]._Node22Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node26Brand
}

function startsWithNode22Node10Node8(arg: any): arg is AddUnknownNodeRest<[Node22, Node10, Node8]> {
	return arg[0] && arg[0]._Node22Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node8Brand
}

function startsWithNode22Node10Node9(arg: any): arg is AddUnknownNodeRest<[Node22, Node10, Node9]> {
	return arg[0] && arg[0]._Node22Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node9Brand
}

function startsWithNode23(arg: any): arg is AddUnknownNodeRest<[Node23]> {
	return arg[0] && arg[0]._Node23Brand
}

function startsWithNode24(arg: any): arg is AddUnknownNodeRest<[Node24]> {
	return arg[0] && arg[0]._Node24Brand
}

function startsWithNode25(arg: any): arg is AddUnknownNodeRest<[Node25]> {
	return arg[0] && arg[0]._Node25Brand
}

function startsWithNode26(arg: any): arg is AddUnknownNodeRest<[Node26]> {
	return arg[0] && arg[0]._Node26Brand
}

function startsWithNode27Node1(arg: any): arg is AddUnknownNodeRest<[Node27, Node1]> {
	return arg[0] && arg[0]._Node27Brand
		&& arg[1] && arg[1]._Node1Brand
}

function startsWithNode27Node10(arg: any): arg is AddUnknownNodeRest<[Node27, Node10]> {
	return arg[0] && arg[0]._Node27Brand
		&& arg[1] && arg[1]._Node10Brand
}

function startsWithNode27Node21(arg: any): arg is AddUnknownNodeRest<[Node27, Node21]> {
	return arg[0] && arg[0]._Node27Brand
		&& arg[1] && arg[1]._Node21Brand
}

function startsWithNode27Node22(arg: any): arg is AddUnknownNodeRest<[Node27, Node22]> {
	return arg[0] && arg[0]._Node27Brand
		&& arg[1] && arg[1]._Node22Brand
}

function startsWithNode27Node23(arg: any): arg is AddUnknownNodeRest<[Node27, Node23]> {
	return arg[0] && arg[0]._Node27Brand
		&& arg[1] && arg[1]._Node23Brand
}

function startsWithNode27Node24(arg: any): arg is AddUnknownNodeRest<[Node27, Node24]> {
	return arg[0] && arg[0]._Node27Brand
		&& arg[1] && arg[1]._Node24Brand
}

function startsWithNode27Node25(arg: any): arg is AddUnknownNodeRest<[Node27, Node25]> {
	return arg[0] && arg[0]._Node27Brand
		&& arg[1] && arg[1]._Node25Brand
}

function startsWithNode27Node26(arg: any): arg is AddUnknownNodeRest<[Node27, Node26]> {
	return arg[0] && arg[0]._Node27Brand
		&& arg[1] && arg[1]._Node26Brand
}

function startsWithNode27Node8(arg: any): arg is AddUnknownNodeRest<[Node27, Node8]> {
	return arg[0] && arg[0]._Node27Brand
		&& arg[1] && arg[1]._Node8Brand
}

function startsWithNode27Node9(arg: any): arg is AddUnknownNodeRest<[Node27, Node9]> {
	return arg[0] && arg[0]._Node27Brand
		&& arg[1] && arg[1]._Node9Brand
}

function startsWithNode28Node1(arg: any): arg is AddUnknownNodeRest<[Node28, Node1]> {
	return arg[0] && arg[0]._Node28Brand
		&& arg[1] && arg[1]._Node1Brand
}

function startsWithNode28Node10(arg: any): arg is AddUnknownNodeRest<[Node28, Node10]> {
	return arg[0] && arg[0]._Node28Brand
		&& arg[1] && arg[1]._Node10Brand
}

function startsWithNode28Node21(arg: any): arg is AddUnknownNodeRest<[Node28, Node21]> {
	return arg[0] && arg[0]._Node28Brand
		&& arg[1] && arg[1]._Node21Brand
}

function startsWithNode28Node22(arg: any): arg is AddUnknownNodeRest<[Node28, Node22]> {
	return arg[0] && arg[0]._Node28Brand
		&& arg[1] && arg[1]._Node22Brand
}

function startsWithNode28Node23(arg: any): arg is AddUnknownNodeRest<[Node28, Node23]> {
	return arg[0] && arg[0]._Node28Brand
		&& arg[1] && arg[1]._Node23Brand
}

function startsWithNode28Node24(arg: any): arg is AddUnknownNodeRest<[Node28, Node24]> {
	return arg[0] && arg[0]._Node28Brand
		&& arg[1] && arg[1]._Node24Brand
}

function startsWithNode28Node25(arg: any): arg is AddUnknownNodeRest<[Node28, Node25]> {
	return arg[0] && arg[0]._Node28Brand
		&& arg[1] && arg[1]._Node25Brand
}

function startsWithNode28Node26(arg: any): arg is AddUnknownNodeRest<[Node28, Node26]> {
	return arg[0] && arg[0]._Node28Brand
		&& arg[1] && arg[1]._Node26Brand
}

function startsWithNode28Node8(arg: any): arg is AddUnknownNodeRest<[Node28, Node8]> {
	return arg[0] && arg[0]._Node28Brand
		&& arg[1] && arg[1]._Node8Brand
}

function startsWithNode28Node9(arg: any): arg is AddUnknownNodeRest<[Node28, Node9]> {
	return arg[0] && arg[0]._Node28Brand
		&& arg[1] && arg[1]._Node9Brand
}

function startsWithNode29Node10(arg: any): arg is AddUnknownNodeRest<[Node29, Node10]> {
	return arg[0] && arg[0]._Node29Brand
		&& arg[1] && arg[1]._Node10Brand
}

function startsWithNode29Node9(arg: any): arg is AddUnknownNodeRest<[Node29, Node9]> {
	return arg[0] && arg[0]._Node29Brand
		&& arg[1] && arg[1]._Node9Brand
}

function startsWithNode3Node4(arg: any): arg is AddUnknownNodeRest<[Node3, Node4]> {
	return arg[0] && arg[0]._Node3Brand
		&& arg[1] && arg[1]._Node4Brand
}

function startsWithNode30Node1(arg: any): arg is AddUnknownNodeRest<[Node30, Node1]> {
	return arg[0] && arg[0]._Node30Brand
		&& arg[1] && arg[1]._Node1Brand
}

function startsWithNode30Node10(arg: any): arg is AddUnknownNodeRest<[Node30, Node10]> {
	return arg[0] && arg[0]._Node30Brand
		&& arg[1] && arg[1]._Node10Brand
}

function startsWithNode30Node21(arg: any): arg is AddUnknownNodeRest<[Node30, Node21]> {
	return arg[0] && arg[0]._Node30Brand
		&& arg[1] && arg[1]._Node21Brand
}

function startsWithNode30Node22(arg: any): arg is AddUnknownNodeRest<[Node30, Node22]> {
	return arg[0] && arg[0]._Node30Brand
		&& arg[1] && arg[1]._Node22Brand
}

function startsWithNode30Node23(arg: any): arg is AddUnknownNodeRest<[Node30, Node23]> {
	return arg[0] && arg[0]._Node30Brand
		&& arg[1] && arg[1]._Node23Brand
}

function startsWithNode30Node24(arg: any): arg is AddUnknownNodeRest<[Node30, Node24]> {
	return arg[0] && arg[0]._Node30Brand
		&& arg[1] && arg[1]._Node24Brand
}

function startsWithNode30Node25(arg: any): arg is AddUnknownNodeRest<[Node30, Node25]> {
	return arg[0] && arg[0]._Node30Brand
		&& arg[1] && arg[1]._Node25Brand
}

function startsWithNode30Node26(arg: any): arg is AddUnknownNodeRest<[Node30, Node26]> {
	return arg[0] && arg[0]._Node30Brand
		&& arg[1] && arg[1]._Node26Brand
}

function startsWithNode30Node31(arg: any): arg is AddUnknownNodeRest<[Node30, Node31]> {
	return arg[0] && arg[0]._Node30Brand
		&& arg[1] && arg[1]._Node31Brand
}

function startsWithNode30Node32(arg: any): arg is AddUnknownNodeRest<[Node30, Node32]> {
	return arg[0] && arg[0]._Node30Brand
		&& arg[1] && arg[1]._Node32Brand
}

function startsWithNode30Node8(arg: any): arg is AddUnknownNodeRest<[Node30, Node8]> {
	return arg[0] && arg[0]._Node30Brand
		&& arg[1] && arg[1]._Node8Brand
}

function startsWithNode30Node9(arg: any): arg is AddUnknownNodeRest<[Node30, Node9]> {
	return arg[0] && arg[0]._Node30Brand
		&& arg[1] && arg[1]._Node9Brand
}

function startsWithNode31(arg: any): arg is AddUnknownNodeRest<[Node31]> {
	return arg[0] && arg[0]._Node31Brand
}

function startsWithNode32(arg: any): arg is AddUnknownNodeRest<[Node32]> {
	return arg[0] && arg[0]._Node32Brand
}

function startsWithNode33Node31Node10Node1(arg: any): arg is AddUnknownNodeRest<[Node33, Node31, Node10, Node1]> {
	return arg[0] && arg[0]._Node33Brand
		&& arg[1] && arg[1]._Node31Brand
		&& arg[2] && arg[2]._Node10Brand
		&& arg[3] && arg[3]._Node1Brand
}

function startsWithNode33Node31Node10Node10(arg: any): arg is AddUnknownNodeRest<[Node33, Node31, Node10, Node10]> {
	return arg[0] && arg[0]._Node33Brand
		&& arg[1] && arg[1]._Node31Brand
		&& arg[2] && arg[2]._Node10Brand
		&& arg[3] && arg[3]._Node10Brand
}

function startsWithNode33Node31Node10Node21(arg: any): arg is AddUnknownNodeRest<[Node33, Node31, Node10, Node21]> {
	return arg[0] && arg[0]._Node33Brand
		&& arg[1] && arg[1]._Node31Brand
		&& arg[2] && arg[2]._Node10Brand
		&& arg[3] && arg[3]._Node21Brand
}

function startsWithNode33Node31Node10Node22(arg: any): arg is AddUnknownNodeRest<[Node33, Node31, Node10, Node22]> {
	return arg[0] && arg[0]._Node33Brand
		&& arg[1] && arg[1]._Node31Brand
		&& arg[2] && arg[2]._Node10Brand
		&& arg[3] && arg[3]._Node22Brand
}

function startsWithNode33Node31Node10Node23(arg: any): arg is AddUnknownNodeRest<[Node33, Node31, Node10, Node23]> {
	return arg[0] && arg[0]._Node33Brand
		&& arg[1] && arg[1]._Node31Brand
		&& arg[2] && arg[2]._Node10Brand
		&& arg[3] && arg[3]._Node23Brand
}

function startsWithNode33Node31Node10Node24(arg: any): arg is AddUnknownNodeRest<[Node33, Node31, Node10, Node24]> {
	return arg[0] && arg[0]._Node33Brand
		&& arg[1] && arg[1]._Node31Brand
		&& arg[2] && arg[2]._Node10Brand
		&& arg[3] && arg[3]._Node24Brand
}

function startsWithNode33Node31Node10Node25(arg: any): arg is AddUnknownNodeRest<[Node33, Node31, Node10, Node25]> {
	return arg[0] && arg[0]._Node33Brand
		&& arg[1] && arg[1]._Node31Brand
		&& arg[2] && arg[2]._Node10Brand
		&& arg[3] && arg[3]._Node25Brand
}

function startsWithNode33Node31Node10Node26(arg: any): arg is AddUnknownNodeRest<[Node33, Node31, Node10, Node26]> {
	return arg[0] && arg[0]._Node33Brand
		&& arg[1] && arg[1]._Node31Brand
		&& arg[2] && arg[2]._Node10Brand
		&& arg[3] && arg[3]._Node26Brand
}

function startsWithNode33Node31Node10Node8(arg: any): arg is AddUnknownNodeRest<[Node33, Node31, Node10, Node8]> {
	return arg[0] && arg[0]._Node33Brand
		&& arg[1] && arg[1]._Node31Brand
		&& arg[2] && arg[2]._Node10Brand
		&& arg[3] && arg[3]._Node8Brand
}

function startsWithNode33Node31Node10Node9(arg: any): arg is AddUnknownNodeRest<[Node33, Node31, Node10, Node9]> {
	return arg[0] && arg[0]._Node33Brand
		&& arg[1] && arg[1]._Node31Brand
		&& arg[2] && arg[2]._Node10Brand
		&& arg[3] && arg[3]._Node9Brand
}

function startsWithNode34Node10Node1(arg: any): arg is AddUnknownNodeRest<[Node34, Node10, Node1]> {
	return arg[0] && arg[0]._Node34Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node1Brand
}

function startsWithNode34Node10Node10(arg: any): arg is AddUnknownNodeRest<[Node34, Node10, Node10]> {
	return arg[0] && arg[0]._Node34Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node10Brand
}

function startsWithNode34Node10Node21(arg: any): arg is AddUnknownNodeRest<[Node34, Node10, Node21]> {
	return arg[0] && arg[0]._Node34Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node21Brand
}

function startsWithNode34Node10Node22(arg: any): arg is AddUnknownNodeRest<[Node34, Node10, Node22]> {
	return arg[0] && arg[0]._Node34Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node22Brand
}

function startsWithNode34Node10Node23(arg: any): arg is AddUnknownNodeRest<[Node34, Node10, Node23]> {
	return arg[0] && arg[0]._Node34Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node23Brand
}

function startsWithNode34Node10Node24(arg: any): arg is AddUnknownNodeRest<[Node34, Node10, Node24]> {
	return arg[0] && arg[0]._Node34Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node24Brand
}

function startsWithNode34Node10Node25(arg: any): arg is AddUnknownNodeRest<[Node34, Node10, Node25]> {
	return arg[0] && arg[0]._Node34Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node25Brand
}

function startsWithNode34Node10Node26(arg: any): arg is AddUnknownNodeRest<[Node34, Node10, Node26]> {
	return arg[0] && arg[0]._Node34Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node26Brand
}

function startsWithNode34Node10Node8(arg: any): arg is AddUnknownNodeRest<[Node34, Node10, Node8]> {
	return arg[0] && arg[0]._Node34Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node8Brand
}

function startsWithNode34Node10Node9(arg: any): arg is AddUnknownNodeRest<[Node34, Node10, Node9]> {
	return arg[0] && arg[0]._Node34Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node9Brand
}

function startsWithNode35Node32Node10Node1(arg: any): arg is AddUnknownNodeRest<[Node35, Node32, Node10, Node1]> {
	return arg[0] && arg[0]._Node35Brand
		&& arg[1] && arg[1]._Node32Brand
		&& arg[2] && arg[2]._Node10Brand
		&& arg[3] && arg[3]._Node1Brand
}

function startsWithNode35Node32Node10Node10(arg: any): arg is AddUnknownNodeRest<[Node35, Node32, Node10, Node10]> {
	return arg[0] && arg[0]._Node35Brand
		&& arg[1] && arg[1]._Node32Brand
		&& arg[2] && arg[2]._Node10Brand
		&& arg[3] && arg[3]._Node10Brand
}

function startsWithNode35Node32Node10Node21(arg: any): arg is AddUnknownNodeRest<[Node35, Node32, Node10, Node21]> {
	return arg[0] && arg[0]._Node35Brand
		&& arg[1] && arg[1]._Node32Brand
		&& arg[2] && arg[2]._Node10Brand
		&& arg[3] && arg[3]._Node21Brand
}

function startsWithNode35Node32Node10Node22(arg: any): arg is AddUnknownNodeRest<[Node35, Node32, Node10, Node22]> {
	return arg[0] && arg[0]._Node35Brand
		&& arg[1] && arg[1]._Node32Brand
		&& arg[2] && arg[2]._Node10Brand
		&& arg[3] && arg[3]._Node22Brand
}

function startsWithNode35Node32Node10Node23(arg: any): arg is AddUnknownNodeRest<[Node35, Node32, Node10, Node23]> {
	return arg[0] && arg[0]._Node35Brand
		&& arg[1] && arg[1]._Node32Brand
		&& arg[2] && arg[2]._Node10Brand
		&& arg[3] && arg[3]._Node23Brand
}

function startsWithNode35Node32Node10Node24(arg: any): arg is AddUnknownNodeRest<[Node35, Node32, Node10, Node24]> {
	return arg[0] && arg[0]._Node35Brand
		&& arg[1] && arg[1]._Node32Brand
		&& arg[2] && arg[2]._Node10Brand
		&& arg[3] && arg[3]._Node24Brand
}

function startsWithNode35Node32Node10Node25(arg: any): arg is AddUnknownNodeRest<[Node35, Node32, Node10, Node25]> {
	return arg[0] && arg[0]._Node35Brand
		&& arg[1] && arg[1]._Node32Brand
		&& arg[2] && arg[2]._Node10Brand
		&& arg[3] && arg[3]._Node25Brand
}

function startsWithNode35Node32Node10Node26(arg: any): arg is AddUnknownNodeRest<[Node35, Node32, Node10, Node26]> {
	return arg[0] && arg[0]._Node35Brand
		&& arg[1] && arg[1]._Node32Brand
		&& arg[2] && arg[2]._Node10Brand
		&& arg[3] && arg[3]._Node26Brand
}

function startsWithNode35Node32Node10Node8(arg: any): arg is AddUnknownNodeRest<[Node35, Node32, Node10, Node8]> {
	return arg[0] && arg[0]._Node35Brand
		&& arg[1] && arg[1]._Node32Brand
		&& arg[2] && arg[2]._Node10Brand
		&& arg[3] && arg[3]._Node8Brand
}

function startsWithNode35Node32Node10Node9(arg: any): arg is AddUnknownNodeRest<[Node35, Node32, Node10, Node9]> {
	return arg[0] && arg[0]._Node35Brand
		&& arg[1] && arg[1]._Node32Brand
		&& arg[2] && arg[2]._Node10Brand
		&& arg[3] && arg[3]._Node9Brand
}

function startsWithNode36Node1(arg: any): arg is AddUnknownNodeRest<[Node36, Node1]> {
	return arg[0] && arg[0]._Node36Brand
		&& arg[1] && arg[1]._Node1Brand
}

function startsWithNode36Node10(arg: any): arg is AddUnknownNodeRest<[Node36, Node10]> {
	return arg[0] && arg[0]._Node36Brand
		&& arg[1] && arg[1]._Node10Brand
}

function startsWithNode36Node21(arg: any): arg is AddUnknownNodeRest<[Node36, Node21]> {
	return arg[0] && arg[0]._Node36Brand
		&& arg[1] && arg[1]._Node21Brand
}

function startsWithNode36Node22(arg: any): arg is AddUnknownNodeRest<[Node36, Node22]> {
	return arg[0] && arg[0]._Node36Brand
		&& arg[1] && arg[1]._Node22Brand
}

function startsWithNode36Node23(arg: any): arg is AddUnknownNodeRest<[Node36, Node23]> {
	return arg[0] && arg[0]._Node36Brand
		&& arg[1] && arg[1]._Node23Brand
}

function startsWithNode36Node24(arg: any): arg is AddUnknownNodeRest<[Node36, Node24]> {
	return arg[0] && arg[0]._Node36Brand
		&& arg[1] && arg[1]._Node24Brand
}

function startsWithNode36Node25(arg: any): arg is AddUnknownNodeRest<[Node36, Node25]> {
	return arg[0] && arg[0]._Node36Brand
		&& arg[1] && arg[1]._Node25Brand
}

function startsWithNode36Node26(arg: any): arg is AddUnknownNodeRest<[Node36, Node26]> {
	return arg[0] && arg[0]._Node36Brand
		&& arg[1] && arg[1]._Node26Brand
}

function startsWithNode36Node8(arg: any): arg is AddUnknownNodeRest<[Node36, Node8]> {
	return arg[0] && arg[0]._Node36Brand
		&& arg[1] && arg[1]._Node8Brand
}

function startsWithNode36Node9(arg: any): arg is AddUnknownNodeRest<[Node36, Node9]> {
	return arg[0] && arg[0]._Node36Brand
		&& arg[1] && arg[1]._Node9Brand
}

function startsWithNode37Node1(arg: any): arg is AddUnknownNodeRest<[Node37, Node1]> {
	return arg[0] && arg[0]._Node37Brand
		&& arg[1] && arg[1]._Node1Brand
}

function startsWithNode37Node10(arg: any): arg is AddUnknownNodeRest<[Node37, Node10]> {
	return arg[0] && arg[0]._Node37Brand
		&& arg[1] && arg[1]._Node10Brand
}

function startsWithNode37Node21(arg: any): arg is AddUnknownNodeRest<[Node37, Node21]> {
	return arg[0] && arg[0]._Node37Brand
		&& arg[1] && arg[1]._Node21Brand
}

function startsWithNode37Node22(arg: any): arg is AddUnknownNodeRest<[Node37, Node22]> {
	return arg[0] && arg[0]._Node37Brand
		&& arg[1] && arg[1]._Node22Brand
}

function startsWithNode37Node23(arg: any): arg is AddUnknownNodeRest<[Node37, Node23]> {
	return arg[0] && arg[0]._Node37Brand
		&& arg[1] && arg[1]._Node23Brand
}

function startsWithNode37Node24(arg: any): arg is AddUnknownNodeRest<[Node37, Node24]> {
	return arg[0] && arg[0]._Node37Brand
		&& arg[1] && arg[1]._Node24Brand
}

function startsWithNode37Node25(arg: any): arg is AddUnknownNodeRest<[Node37, Node25]> {
	return arg[0] && arg[0]._Node37Brand
		&& arg[1] && arg[1]._Node25Brand
}

function startsWithNode37Node26(arg: any): arg is AddUnknownNodeRest<[Node37, Node26]> {
	return arg[0] && arg[0]._Node37Brand
		&& arg[1] && arg[1]._Node26Brand
}

function startsWithNode37Node8(arg: any): arg is AddUnknownNodeRest<[Node37, Node8]> {
	return arg[0] && arg[0]._Node37Brand
		&& arg[1] && arg[1]._Node8Brand
}

function startsWithNode37Node9(arg: any): arg is AddUnknownNodeRest<[Node37, Node9]> {
	return arg[0] && arg[0]._Node37Brand
		&& arg[1] && arg[1]._Node9Brand
}

function startsWithNode38Node1(arg: any): arg is AddUnknownNodeRest<[Node38, Node1]> {
	return arg[0] && arg[0]._Node38Brand
		&& arg[1] && arg[1]._Node1Brand
}

function startsWithNode38Node10(arg: any): arg is AddUnknownNodeRest<[Node38, Node10]> {
	return arg[0] && arg[0]._Node38Brand
		&& arg[1] && arg[1]._Node10Brand
}

function startsWithNode38Node21(arg: any): arg is AddUnknownNodeRest<[Node38, Node21]> {
	return arg[0] && arg[0]._Node38Brand
		&& arg[1] && arg[1]._Node21Brand
}

function startsWithNode38Node22(arg: any): arg is AddUnknownNodeRest<[Node38, Node22]> {
	return arg[0] && arg[0]._Node38Brand
		&& arg[1] && arg[1]._Node22Brand
}

function startsWithNode38Node23(arg: any): arg is AddUnknownNodeRest<[Node38, Node23]> {
	return arg[0] && arg[0]._Node38Brand
		&& arg[1] && arg[1]._Node23Brand
}

function startsWithNode38Node24(arg: any): arg is AddUnknownNodeRest<[Node38, Node24]> {
	return arg[0] && arg[0]._Node38Brand
		&& arg[1] && arg[1]._Node24Brand
}

function startsWithNode38Node25(arg: any): arg is AddUnknownNodeRest<[Node38, Node25]> {
	return arg[0] && arg[0]._Node38Brand
		&& arg[1] && arg[1]._Node25Brand
}

function startsWithNode38Node26(arg: any): arg is AddUnknownNodeRest<[Node38, Node26]> {
	return arg[0] && arg[0]._Node38Brand
		&& arg[1] && arg[1]._Node26Brand
}

function startsWithNode38Node8(arg: any): arg is AddUnknownNodeRest<[Node38, Node8]> {
	return arg[0] && arg[0]._Node38Brand
		&& arg[1] && arg[1]._Node8Brand
}

function startsWithNode38Node9(arg: any): arg is AddUnknownNodeRest<[Node38, Node9]> {
	return arg[0] && arg[0]._Node38Brand
		&& arg[1] && arg[1]._Node9Brand
}

function startsWithNode39Node1(arg: any): arg is AddUnknownNodeRest<[Node39, Node1]> {
	return arg[0] && arg[0]._Node39Brand
		&& arg[1] && arg[1]._Node1Brand
}

function startsWithNode39Node10(arg: any): arg is AddUnknownNodeRest<[Node39, Node10]> {
	return arg[0] && arg[0]._Node39Brand
		&& arg[1] && arg[1]._Node10Brand
}

function startsWithNode39Node21(arg: any): arg is AddUnknownNodeRest<[Node39, Node21]> {
	return arg[0] && arg[0]._Node39Brand
		&& arg[1] && arg[1]._Node21Brand
}

function startsWithNode39Node22(arg: any): arg is AddUnknownNodeRest<[Node39, Node22]> {
	return arg[0] && arg[0]._Node39Brand
		&& arg[1] && arg[1]._Node22Brand
}

function startsWithNode39Node23(arg: any): arg is AddUnknownNodeRest<[Node39, Node23]> {
	return arg[0] && arg[0]._Node39Brand
		&& arg[1] && arg[1]._Node23Brand
}

function startsWithNode39Node24(arg: any): arg is AddUnknownNodeRest<[Node39, Node24]> {
	return arg[0] && arg[0]._Node39Brand
		&& arg[1] && arg[1]._Node24Brand
}

function startsWithNode39Node25(arg: any): arg is AddUnknownNodeRest<[Node39, Node25]> {
	return arg[0] && arg[0]._Node39Brand
		&& arg[1] && arg[1]._Node25Brand
}

function startsWithNode39Node26(arg: any): arg is AddUnknownNodeRest<[Node39, Node26]> {
	return arg[0] && arg[0]._Node39Brand
		&& arg[1] && arg[1]._Node26Brand
}

function startsWithNode39Node8(arg: any): arg is AddUnknownNodeRest<[Node39, Node8]> {
	return arg[0] && arg[0]._Node39Brand
		&& arg[1] && arg[1]._Node8Brand
}

function startsWithNode39Node9(arg: any): arg is AddUnknownNodeRest<[Node39, Node9]> {
	return arg[0] && arg[0]._Node39Brand
		&& arg[1] && arg[1]._Node9Brand
}

function startsWithNode4(arg: any): arg is AddUnknownNodeRest<[Node4]> {
	return arg[0] && arg[0]._Node4Brand
}

function startsWithNode40Node23(arg: any): arg is AddUnknownNodeRest<[Node40, Node23]> {
	return arg[0] && arg[0]._Node40Brand
		&& arg[1] && arg[1]._Node23Brand
}

function startsWithNode41Node1(arg: any): arg is AddUnknownNodeRest<[Node41, Node1]> {
	return arg[0] && arg[0]._Node41Brand
		&& arg[1] && arg[1]._Node1Brand
}

function startsWithNode41Node10(arg: any): arg is AddUnknownNodeRest<[Node41, Node10]> {
	return arg[0] && arg[0]._Node41Brand
		&& arg[1] && arg[1]._Node10Brand
}

function startsWithNode41Node21(arg: any): arg is AddUnknownNodeRest<[Node41, Node21]> {
	return arg[0] && arg[0]._Node41Brand
		&& arg[1] && arg[1]._Node21Brand
}

function startsWithNode41Node22(arg: any): arg is AddUnknownNodeRest<[Node41, Node22]> {
	return arg[0] && arg[0]._Node41Brand
		&& arg[1] && arg[1]._Node22Brand
}

function startsWithNode41Node23(arg: any): arg is AddUnknownNodeRest<[Node41, Node23]> {
	return arg[0] && arg[0]._Node41Brand
		&& arg[1] && arg[1]._Node23Brand
}

function startsWithNode41Node24(arg: any): arg is AddUnknownNodeRest<[Node41, Node24]> {
	return arg[0] && arg[0]._Node41Brand
		&& arg[1] && arg[1]._Node24Brand
}

function startsWithNode41Node25(arg: any): arg is AddUnknownNodeRest<[Node41, Node25]> {
	return arg[0] && arg[0]._Node41Brand
		&& arg[1] && arg[1]._Node25Brand
}

function startsWithNode41Node26(arg: any): arg is AddUnknownNodeRest<[Node41, Node26]> {
	return arg[0] && arg[0]._Node41Brand
		&& arg[1] && arg[1]._Node26Brand
}

function startsWithNode41Node8(arg: any): arg is AddUnknownNodeRest<[Node41, Node8]> {
	return arg[0] && arg[0]._Node41Brand
		&& arg[1] && arg[1]._Node8Brand
}

function startsWithNode41Node9(arg: any): arg is AddUnknownNodeRest<[Node41, Node9]> {
	return arg[0] && arg[0]._Node41Brand
		&& arg[1] && arg[1]._Node9Brand
}

function startsWithNode42Node21Node10(arg: any): arg is AddUnknownNodeRest<[Node42, Node21, Node10]> {
	return arg[0] && arg[0]._Node42Brand
		&& arg[1] && arg[1]._Node21Brand
		&& arg[2] && arg[2]._Node10Brand
}

function startsWithNode42Node24Node1(arg: any): arg is AddUnknownNodeRest<[Node42, Node24, Node1]> {
	return arg[0] && arg[0]._Node42Brand
		&& arg[1] && arg[1]._Node24Brand
		&& arg[2] && arg[2]._Node1Brand
}

function startsWithNode42Node24Node21(arg: any): arg is AddUnknownNodeRest<[Node42, Node24, Node21]> {
	return arg[0] && arg[0]._Node42Brand
		&& arg[1] && arg[1]._Node24Brand
		&& arg[2] && arg[2]._Node21Brand
}

function startsWithNode42Node24Node22(arg: any): arg is AddUnknownNodeRest<[Node42, Node24, Node22]> {
	return arg[0] && arg[0]._Node42Brand
		&& arg[1] && arg[1]._Node24Brand
		&& arg[2] && arg[2]._Node22Brand
}

function startsWithNode42Node24Node23(arg: any): arg is AddUnknownNodeRest<[Node42, Node24, Node23]> {
	return arg[0] && arg[0]._Node42Brand
		&& arg[1] && arg[1]._Node24Brand
		&& arg[2] && arg[2]._Node23Brand
}

function startsWithNode42Node24Node24(arg: any): arg is AddUnknownNodeRest<[Node42, Node24, Node24]> {
	return arg[0] && arg[0]._Node42Brand
		&& arg[1] && arg[1]._Node24Brand
		&& arg[2] && arg[2]._Node24Brand
}

function startsWithNode42Node24Node25(arg: any): arg is AddUnknownNodeRest<[Node42, Node24, Node25]> {
	return arg[0] && arg[0]._Node42Brand
		&& arg[1] && arg[1]._Node24Brand
		&& arg[2] && arg[2]._Node25Brand
}

function startsWithNode42Node24Node26(arg: any): arg is AddUnknownNodeRest<[Node42, Node24, Node26]> {
	return arg[0] && arg[0]._Node42Brand
		&& arg[1] && arg[1]._Node24Brand
		&& arg[2] && arg[2]._Node26Brand
}

function startsWithNode42Node24Node8(arg: any): arg is AddUnknownNodeRest<[Node42, Node24, Node8]> {
	return arg[0] && arg[0]._Node42Brand
		&& arg[1] && arg[1]._Node24Brand
		&& arg[2] && arg[2]._Node8Brand
}

function startsWithNode42Node24Node9(arg: any): arg is AddUnknownNodeRest<[Node42, Node24, Node9]> {
	return arg[0] && arg[0]._Node42Brand
		&& arg[1] && arg[1]._Node24Brand
		&& arg[2] && arg[2]._Node9Brand
}

function startsWithNode43Node1(arg: any): arg is AddUnknownNodeRest<[Node43, Node1]> {
	return arg[0] && arg[0]._Node43Brand
		&& arg[1] && arg[1]._Node1Brand
}

function startsWithNode43Node10(arg: any): arg is AddUnknownNodeRest<[Node43, Node10]> {
	return arg[0] && arg[0]._Node43Brand
		&& arg[1] && arg[1]._Node10Brand
}

function startsWithNode43Node21(arg: any): arg is AddUnknownNodeRest<[Node43, Node21]> {
	return arg[0] && arg[0]._Node43Brand
		&& arg[1] && arg[1]._Node21Brand
}

function startsWithNode43Node22(arg: any): arg is AddUnknownNodeRest<[Node43, Node22]> {
	return arg[0] && arg[0]._Node43Brand
		&& arg[1] && arg[1]._Node22Brand
}

function startsWithNode43Node23(arg: any): arg is AddUnknownNodeRest<[Node43, Node23]> {
	return arg[0] && arg[0]._Node43Brand
		&& arg[1] && arg[1]._Node23Brand
}

function startsWithNode43Node24(arg: any): arg is AddUnknownNodeRest<[Node43, Node24]> {
	return arg[0] && arg[0]._Node43Brand
		&& arg[1] && arg[1]._Node24Brand
}

function startsWithNode43Node25(arg: any): arg is AddUnknownNodeRest<[Node43, Node25]> {
	return arg[0] && arg[0]._Node43Brand
		&& arg[1] && arg[1]._Node25Brand
}

function startsWithNode43Node26(arg: any): arg is AddUnknownNodeRest<[Node43, Node26]> {
	return arg[0] && arg[0]._Node43Brand
		&& arg[1] && arg[1]._Node26Brand
}

function startsWithNode43Node8(arg: any): arg is AddUnknownNodeRest<[Node43, Node8]> {
	return arg[0] && arg[0]._Node43Brand
		&& arg[1] && arg[1]._Node8Brand
}

function startsWithNode43Node9(arg: any): arg is AddUnknownNodeRest<[Node43, Node9]> {
	return arg[0] && arg[0]._Node43Brand
		&& arg[1] && arg[1]._Node9Brand
}

function startsWithNode44Node1(arg: any): arg is AddUnknownNodeRest<[Node44, Node1]> {
	return arg[0] && arg[0]._Node44Brand
		&& arg[1] && arg[1]._Node1Brand
}

function startsWithNode44Node10(arg: any): arg is AddUnknownNodeRest<[Node44, Node10]> {
	return arg[0] && arg[0]._Node44Brand
		&& arg[1] && arg[1]._Node10Brand
}

function startsWithNode44Node21(arg: any): arg is AddUnknownNodeRest<[Node44, Node21]> {
	return arg[0] && arg[0]._Node44Brand
		&& arg[1] && arg[1]._Node21Brand
}

function startsWithNode44Node22(arg: any): arg is AddUnknownNodeRest<[Node44, Node22]> {
	return arg[0] && arg[0]._Node44Brand
		&& arg[1] && arg[1]._Node22Brand
}

function startsWithNode44Node23(arg: any): arg is AddUnknownNodeRest<[Node44, Node23]> {
	return arg[0] && arg[0]._Node44Brand
		&& arg[1] && arg[1]._Node23Brand
}

function startsWithNode44Node24(arg: any): arg is AddUnknownNodeRest<[Node44, Node24]> {
	return arg[0] && arg[0]._Node44Brand
		&& arg[1] && arg[1]._Node24Brand
}

function startsWithNode44Node25(arg: any): arg is AddUnknownNodeRest<[Node44, Node25]> {
	return arg[0] && arg[0]._Node44Brand
		&& arg[1] && arg[1]._Node25Brand
}

function startsWithNode44Node26(arg: any): arg is AddUnknownNodeRest<[Node44, Node26]> {
	return arg[0] && arg[0]._Node44Brand
		&& arg[1] && arg[1]._Node26Brand
}

function startsWithNode44Node8(arg: any): arg is AddUnknownNodeRest<[Node44, Node8]> {
	return arg[0] && arg[0]._Node44Brand
		&& arg[1] && arg[1]._Node8Brand
}

function startsWithNode44Node9(arg: any): arg is AddUnknownNodeRest<[Node44, Node9]> {
	return arg[0] && arg[0]._Node44Brand
		&& arg[1] && arg[1]._Node9Brand
}

function startsWithNode45Node1(arg: any): arg is AddUnknownNodeRest<[Node45, Node1]> {
	return arg[0] && arg[0]._Node45Brand
		&& arg[1] && arg[1]._Node1Brand
}

function startsWithNode45Node10(arg: any): arg is AddUnknownNodeRest<[Node45, Node10]> {
	return arg[0] && arg[0]._Node45Brand
		&& arg[1] && arg[1]._Node10Brand
}

function startsWithNode45Node21(arg: any): arg is AddUnknownNodeRest<[Node45, Node21]> {
	return arg[0] && arg[0]._Node45Brand
		&& arg[1] && arg[1]._Node21Brand
}

function startsWithNode45Node22(arg: any): arg is AddUnknownNodeRest<[Node45, Node22]> {
	return arg[0] && arg[0]._Node45Brand
		&& arg[1] && arg[1]._Node22Brand
}

function startsWithNode45Node23(arg: any): arg is AddUnknownNodeRest<[Node45, Node23]> {
	return arg[0] && arg[0]._Node45Brand
		&& arg[1] && arg[1]._Node23Brand
}

function startsWithNode45Node24(arg: any): arg is AddUnknownNodeRest<[Node45, Node24]> {
	return arg[0] && arg[0]._Node45Brand
		&& arg[1] && arg[1]._Node24Brand
}

function startsWithNode45Node25(arg: any): arg is AddUnknownNodeRest<[Node45, Node25]> {
	return arg[0] && arg[0]._Node45Brand
		&& arg[1] && arg[1]._Node25Brand
}

function startsWithNode45Node26(arg: any): arg is AddUnknownNodeRest<[Node45, Node26]> {
	return arg[0] && arg[0]._Node45Brand
		&& arg[1] && arg[1]._Node26Brand
}

function startsWithNode45Node8(arg: any): arg is AddUnknownNodeRest<[Node45, Node8]> {
	return arg[0] && arg[0]._Node45Brand
		&& arg[1] && arg[1]._Node8Brand
}

function startsWithNode45Node9(arg: any): arg is AddUnknownNodeRest<[Node45, Node9]> {
	return arg[0] && arg[0]._Node45Brand
		&& arg[1] && arg[1]._Node9Brand
}

function startsWithNode46Node23Node1(arg: any): arg is AddUnknownNodeRest<[Node46, Node23, Node1]> {
	return arg[0] && arg[0]._Node46Brand
		&& arg[1] && arg[1]._Node23Brand
		&& arg[2] && arg[2]._Node1Brand
}

function startsWithNode46Node23Node10(arg: any): arg is AddUnknownNodeRest<[Node46, Node23, Node10]> {
	return arg[0] && arg[0]._Node46Brand
		&& arg[1] && arg[1]._Node23Brand
		&& arg[2] && arg[2]._Node10Brand
}

function startsWithNode46Node23Node21(arg: any): arg is AddUnknownNodeRest<[Node46, Node23, Node21]> {
	return arg[0] && arg[0]._Node46Brand
		&& arg[1] && arg[1]._Node23Brand
		&& arg[2] && arg[2]._Node21Brand
}

function startsWithNode46Node23Node22(arg: any): arg is AddUnknownNodeRest<[Node46, Node23, Node22]> {
	return arg[0] && arg[0]._Node46Brand
		&& arg[1] && arg[1]._Node23Brand
		&& arg[2] && arg[2]._Node22Brand
}

function startsWithNode46Node23Node23(arg: any): arg is AddUnknownNodeRest<[Node46, Node23, Node23]> {
	return arg[0] && arg[0]._Node46Brand
		&& arg[1] && arg[1]._Node23Brand
		&& arg[2] && arg[2]._Node23Brand
}

function startsWithNode46Node23Node24(arg: any): arg is AddUnknownNodeRest<[Node46, Node23, Node24]> {
	return arg[0] && arg[0]._Node46Brand
		&& arg[1] && arg[1]._Node23Brand
		&& arg[2] && arg[2]._Node24Brand
}

function startsWithNode46Node23Node25(arg: any): arg is AddUnknownNodeRest<[Node46, Node23, Node25]> {
	return arg[0] && arg[0]._Node46Brand
		&& arg[1] && arg[1]._Node23Brand
		&& arg[2] && arg[2]._Node25Brand
}

function startsWithNode46Node23Node26(arg: any): arg is AddUnknownNodeRest<[Node46, Node23, Node26]> {
	return arg[0] && arg[0]._Node46Brand
		&& arg[1] && arg[1]._Node23Brand
		&& arg[2] && arg[2]._Node26Brand
}

function startsWithNode46Node23Node8(arg: any): arg is AddUnknownNodeRest<[Node46, Node23, Node8]> {
	return arg[0] && arg[0]._Node46Brand
		&& arg[1] && arg[1]._Node23Brand
		&& arg[2] && arg[2]._Node8Brand
}

function startsWithNode46Node23Node9(arg: any): arg is AddUnknownNodeRest<[Node46, Node23, Node9]> {
	return arg[0] && arg[0]._Node46Brand
		&& arg[1] && arg[1]._Node23Brand
		&& arg[2] && arg[2]._Node9Brand
}

function startsWithNode47Node22Node10(arg: any): arg is AddUnknownNodeRest<[Node47, Node22, Node10]> {
	return arg[0] && arg[0]._Node47Brand
		&& arg[1] && arg[1]._Node22Brand
		&& arg[2] && arg[2]._Node10Brand
}

function startsWithNode47Node25Node1(arg: any): arg is AddUnknownNodeRest<[Node47, Node25, Node1]> {
	return arg[0] && arg[0]._Node47Brand
		&& arg[1] && arg[1]._Node25Brand
		&& arg[2] && arg[2]._Node1Brand
}

function startsWithNode47Node25Node21(arg: any): arg is AddUnknownNodeRest<[Node47, Node25, Node21]> {
	return arg[0] && arg[0]._Node47Brand
		&& arg[1] && arg[1]._Node25Brand
		&& arg[2] && arg[2]._Node21Brand
}

function startsWithNode47Node25Node22(arg: any): arg is AddUnknownNodeRest<[Node47, Node25, Node22]> {
	return arg[0] && arg[0]._Node47Brand
		&& arg[1] && arg[1]._Node25Brand
		&& arg[2] && arg[2]._Node22Brand
}

function startsWithNode47Node25Node23(arg: any): arg is AddUnknownNodeRest<[Node47, Node25, Node23]> {
	return arg[0] && arg[0]._Node47Brand
		&& arg[1] && arg[1]._Node25Brand
		&& arg[2] && arg[2]._Node23Brand
}

function startsWithNode47Node25Node24(arg: any): arg is AddUnknownNodeRest<[Node47, Node25, Node24]> {
	return arg[0] && arg[0]._Node47Brand
		&& arg[1] && arg[1]._Node25Brand
		&& arg[2] && arg[2]._Node24Brand
}

function startsWithNode47Node25Node25(arg: any): arg is AddUnknownNodeRest<[Node47, Node25, Node25]> {
	return arg[0] && arg[0]._Node47Brand
		&& arg[1] && arg[1]._Node25Brand
		&& arg[2] && arg[2]._Node25Brand
}

function startsWithNode47Node25Node26(arg: any): arg is AddUnknownNodeRest<[Node47, Node25, Node26]> {
	return arg[0] && arg[0]._Node47Brand
		&& arg[1] && arg[1]._Node25Brand
		&& arg[2] && arg[2]._Node26Brand
}

function startsWithNode47Node25Node8(arg: any): arg is AddUnknownNodeRest<[Node47, Node25, Node8]> {
	return arg[0] && arg[0]._Node47Brand
		&& arg[1] && arg[1]._Node25Brand
		&& arg[2] && arg[2]._Node8Brand
}

function startsWithNode47Node25Node9(arg: any): arg is AddUnknownNodeRest<[Node47, Node25, Node9]> {
	return arg[0] && arg[0]._Node47Brand
		&& arg[1] && arg[1]._Node25Brand
		&& arg[2] && arg[2]._Node9Brand
}

function startsWithNode48Node1(arg: any): arg is AddUnknownNodeRest<[Node48, Node1]> {
	return arg[0] && arg[0]._Node48Brand
		&& arg[1] && arg[1]._Node1Brand
}

function startsWithNode48Node10(arg: any): arg is AddUnknownNodeRest<[Node48, Node10]> {
	return arg[0] && arg[0]._Node48Brand
		&& arg[1] && arg[1]._Node10Brand
}

function startsWithNode48Node21(arg: any): arg is AddUnknownNodeRest<[Node48, Node21]> {
	return arg[0] && arg[0]._Node48Brand
		&& arg[1] && arg[1]._Node21Brand
}

function startsWithNode48Node22(arg: any): arg is AddUnknownNodeRest<[Node48, Node22]> {
	return arg[0] && arg[0]._Node48Brand
		&& arg[1] && arg[1]._Node22Brand
}

function startsWithNode48Node23(arg: any): arg is AddUnknownNodeRest<[Node48, Node23]> {
	return arg[0] && arg[0]._Node48Brand
		&& arg[1] && arg[1]._Node23Brand
}

function startsWithNode48Node24(arg: any): arg is AddUnknownNodeRest<[Node48, Node24]> {
	return arg[0] && arg[0]._Node48Brand
		&& arg[1] && arg[1]._Node24Brand
}

function startsWithNode48Node25(arg: any): arg is AddUnknownNodeRest<[Node48, Node25]> {
	return arg[0] && arg[0]._Node48Brand
		&& arg[1] && arg[1]._Node25Brand
}

function startsWithNode48Node26(arg: any): arg is AddUnknownNodeRest<[Node48, Node26]> {
	return arg[0] && arg[0]._Node48Brand
		&& arg[1] && arg[1]._Node26Brand
}

function startsWithNode48Node8(arg: any): arg is AddUnknownNodeRest<[Node48, Node8]> {
	return arg[0] && arg[0]._Node48Brand
		&& arg[1] && arg[1]._Node8Brand
}

function startsWithNode48Node9(arg: any): arg is AddUnknownNodeRest<[Node48, Node9]> {
	return arg[0] && arg[0]._Node48Brand
		&& arg[1] && arg[1]._Node9Brand
}

function startsWithNode49Node26Node1(arg: any): arg is AddUnknownNodeRest<[Node49, Node26, Node1]> {
	return arg[0] && arg[0]._Node49Brand
		&& arg[1] && arg[1]._Node26Brand
		&& arg[2] && arg[2]._Node1Brand
}

function startsWithNode49Node26Node10(arg: any): arg is AddUnknownNodeRest<[Node49, Node26, Node10]> {
	return arg[0] && arg[0]._Node49Brand
		&& arg[1] && arg[1]._Node26Brand
		&& arg[2] && arg[2]._Node10Brand
}

function startsWithNode49Node26Node21(arg: any): arg is AddUnknownNodeRest<[Node49, Node26, Node21]> {
	return arg[0] && arg[0]._Node49Brand
		&& arg[1] && arg[1]._Node26Brand
		&& arg[2] && arg[2]._Node21Brand
}

function startsWithNode49Node26Node22(arg: any): arg is AddUnknownNodeRest<[Node49, Node26, Node22]> {
	return arg[0] && arg[0]._Node49Brand
		&& arg[1] && arg[1]._Node26Brand
		&& arg[2] && arg[2]._Node22Brand
}

function startsWithNode49Node26Node23(arg: any): arg is AddUnknownNodeRest<[Node49, Node26, Node23]> {
	return arg[0] && arg[0]._Node49Brand
		&& arg[1] && arg[1]._Node26Brand
		&& arg[2] && arg[2]._Node23Brand
}

function startsWithNode49Node26Node24(arg: any): arg is AddUnknownNodeRest<[Node49, Node26, Node24]> {
	return arg[0] && arg[0]._Node49Brand
		&& arg[1] && arg[1]._Node26Brand
		&& arg[2] && arg[2]._Node24Brand
}

function startsWithNode49Node26Node25(arg: any): arg is AddUnknownNodeRest<[Node49, Node26, Node25]> {
	return arg[0] && arg[0]._Node49Brand
		&& arg[1] && arg[1]._Node26Brand
		&& arg[2] && arg[2]._Node25Brand
}

function startsWithNode49Node26Node26(arg: any): arg is AddUnknownNodeRest<[Node49, Node26, Node26]> {
	return arg[0] && arg[0]._Node49Brand
		&& arg[1] && arg[1]._Node26Brand
		&& arg[2] && arg[2]._Node26Brand
}

function startsWithNode49Node26Node8(arg: any): arg is AddUnknownNodeRest<[Node49, Node26, Node8]> {
	return arg[0] && arg[0]._Node49Brand
		&& arg[1] && arg[1]._Node26Brand
		&& arg[2] && arg[2]._Node8Brand
}

function startsWithNode49Node26Node9(arg: any): arg is AddUnknownNodeRest<[Node49, Node26, Node9]> {
	return arg[0] && arg[0]._Node49Brand
		&& arg[1] && arg[1]._Node26Brand
		&& arg[2] && arg[2]._Node9Brand
}

function startsWithNode5Node4(arg: any): arg is AddUnknownNodeRest<[Node5, Node4]> {
	return arg[0] && arg[0]._Node5Brand
		&& arg[1] && arg[1]._Node4Brand
}

function startsWithNode6Node4(arg: any): arg is AddUnknownNodeRest<[Node6, Node4]> {
	return arg[0] && arg[0]._Node6Brand
		&& arg[1] && arg[1]._Node4Brand
}

function startsWithNode7Node8Node4Node10(arg: any): arg is AddUnknownNodeRest<[Node7, Node8, Node4, Node10]> {
	return arg[0] && arg[0]._Node7Brand
		&& arg[1] && arg[1]._Node8Brand
		&& arg[2] && arg[2]._Node4Brand
		&& arg[3] && arg[3]._Node10Brand
}

function startsWithNode7Node8Node4Node8(arg: any): arg is AddUnknownNodeRest<[Node7, Node8, Node4, Node8]> {
	return arg[0] && arg[0]._Node7Brand
		&& arg[1] && arg[1]._Node8Brand
		&& arg[2] && arg[2]._Node4Brand
		&& arg[3] && arg[3]._Node8Brand
}

function startsWithNode7Node8Node4Node9(arg: any): arg is AddUnknownNodeRest<[Node7, Node8, Node4, Node9]> {
	return arg[0] && arg[0]._Node7Brand
		&& arg[1] && arg[1]._Node8Brand
		&& arg[2] && arg[2]._Node4Brand
		&& arg[3] && arg[3]._Node9Brand
}

function startsWithNode8(arg: any): arg is AddUnknownNodeRest<[Node8]> {
	return arg[0] && arg[0]._Node8Brand
}

function startsWithNode9(arg: any): arg is AddUnknownNodeRest<[Node9]> {
	return arg[0] && arg[0]._Node9Brand
}

type Fluent<Stack extends unknown[]> = (
	{
		0: {}
		1: { end: () => Node2['arg1'] }
	}[StartsWith<Stack, [Node2]>]
) & (
	{
		0: {}
		1: { and: () => Fluent<Prepend<Node39, Stack>> }
	}[StartsWith<Stack, [Node1]>]
) & (
	{
		0: {}
		1: { character: (arg1: string) => Fluent<Prepend<Node28, Stack>> }
	}[StartsWith<Stack, [Node1]>]
) & (
	{
		0: {}
		1: { complement: () => Fluent<Prepend<Node41, Stack>> }
	}[StartsWith<Stack, [Node1]>]
) & (
	{
		0: {}
		1: { floating: (arg1: number) => Fluent<Prepend<Node20, Stack>> }
	}[StartsWith<Stack, [Node1]>]
) & (
	{
		0: {}
		1: { identifier: (arg1: string) => Fluent<Prepend<Node30, Stack>> }
	}[StartsWith<Stack, [Node1]>]
) & (
	{
		0: {}
		1: { integer: (arg1: number) => Fluent<Prepend<Node27, Stack>> }
	}[StartsWith<Stack, [Node1]>]
) & (
	{
		0: {}
		1: { minus: () => Fluent<Prepend<Node43, Stack>> }
	}[StartsWith<Stack, [Node1]>]
) & (
	{
		0: {}
		1: { minusMinus: () => Fluent<Prepend<Node24, Stack>> }
	}[StartsWith<Stack, [Node1]>]
) & (
	{
		0: {}
		1: { multi: () => Fluent<Prepend<Node44, Stack>> }
	}[StartsWith<Stack, [Node1]>]
) & (
	{
		0: {}
		1: { not: () => Fluent<Prepend<Node45, Stack>> }
	}[StartsWith<Stack, [Node1]>]
) & (
	{
		0: {}
		1: { plus: () => Fluent<Prepend<Node48, Stack>> }
	}[StartsWith<Stack, [Node1]>]
) & (
	{
		0: {}
		1: { plusPlus: () => Fluent<Prepend<Node25, Stack>> }
	}[StartsWith<Stack, [Node1]>]
) & (
	{
		0: {}
		1: { sizeof: () => Fluent<Prepend<Node26, Stack>> }
	}[StartsWith<Stack, [Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node3, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node3, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node3, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node3, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node3, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node3, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node3, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node3, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node3, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node3, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node3, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node3, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node3, Node4]>]
) & (
	{
		0: {}
		1: { andEqual: () => Fluent<Prepend<Node3, Stack>> }
	}[StartsWith<Stack, [Node4]>]
) & (
	{
		0: {}
		1: { divEqual: () => Fluent<Prepend<Node5, Stack>> }
	}[StartsWith<Stack, [Node4]>]
) & (
	{
		0: {}
		1: { euaql: () => Fluent<Prepend<Node6, Stack>> }
	}[StartsWith<Stack, [Node4]>]
) & (
	{
		0: {}
		1: { leftShiftEqual: () => Fluent<Prepend<Node12, Stack>> }
	}[StartsWith<Stack, [Node4]>]
) & (
	{
		0: {}
		1: { minusEqual: () => Fluent<Prepend<Node13, Stack>> }
	}[StartsWith<Stack, [Node4]>]
) & (
	{
		0: {}
		1: { multiEqual: () => Fluent<Prepend<Node14, Stack>> }
	}[StartsWith<Stack, [Node4]>]
) & (
	{
		0: {}
		1: { orEqual: () => Fluent<Prepend<Node15, Stack>> }
	}[StartsWith<Stack, [Node4]>]
) & (
	{
		0: {}
		1: { percentEqual: () => Fluent<Prepend<Node16, Stack>> }
	}[StartsWith<Stack, [Node4]>]
) & (
	{
		0: {}
		1: { plusEqual: () => Fluent<Prepend<Node17, Stack>> }
	}[StartsWith<Stack, [Node4]>]
) & (
	{
		0: {}
		1: { rifhtShiftEqual: () => Fluent<Prepend<Node18, Stack>> }
	}[StartsWith<Stack, [Node4]>]
) & (
	{
		0: {}
		1: { xorEqual: () => Fluent<Prepend<Node19, Stack>> }
	}[StartsWith<Stack, [Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node5, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node5, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node5, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node5, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node5, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node5, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node5, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node5, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node5, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node5, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node5, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node5, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node5, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node6, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node6, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node6, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node6, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node6, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node6, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node6, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node6, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node6, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node6, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node6, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node6, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node6, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node7, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node7, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node7, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node7, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node7, Tail<Tail<Tail<Stack>>>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node7, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node7, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node7, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node7, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node7, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node7, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node7, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node7, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node10]>]
) & (
	{
		0: {}
		1: { and: () => Fluent<Prepend<Node39, Stack>> }
	}[StartsWith<Stack, [Node8]>]
) & (
	{
		0: {}
		1: { character: (arg1: string) => Fluent<Prepend<Node28, Stack>> }
	}[StartsWith<Stack, [Node8]>]
) & (
	{
		0: {}
		1: { complement: () => Fluent<Prepend<Node41, Stack>> }
	}[StartsWith<Stack, [Node8]>]
) & (
	{
		0: {}
		1: { floating: (arg1: number) => Fluent<Prepend<Node20, Stack>> }
	}[StartsWith<Stack, [Node8]>]
) & (
	{
		0: {}
		1: { identifier: (arg1: string) => Fluent<Prepend<Node30, Stack>> }
	}[StartsWith<Stack, [Node8]>]
) & (
	{
		0: {}
		1: { integer: (arg1: number) => Fluent<Prepend<Node27, Stack>> }
	}[StartsWith<Stack, [Node8]>]
) & (
	{
		0: {}
		1: { minus: () => Fluent<Prepend<Node43, Stack>> }
	}[StartsWith<Stack, [Node8]>]
) & (
	{
		0: {}
		1: { minusMinus: () => Fluent<Prepend<Node24, Stack>> }
	}[StartsWith<Stack, [Node8]>]
) & (
	{
		0: {}
		1: { multi: () => Fluent<Prepend<Node44, Stack>> }
	}[StartsWith<Stack, [Node8]>]
) & (
	{
		0: {}
		1: { not: () => Fluent<Prepend<Node45, Stack>> }
	}[StartsWith<Stack, [Node8]>]
) & (
	{
		0: {}
		1: { plus: () => Fluent<Prepend<Node48, Stack>> }
	}[StartsWith<Stack, [Node8]>]
) & (
	{
		0: {}
		1: { plusPlus: () => Fluent<Prepend<Node25, Stack>> }
	}[StartsWith<Stack, [Node8]>]
) & (
	{
		0: {}
		1: { sizeof: () => Fluent<Prepend<Node26, Stack>> }
	}[StartsWith<Stack, [Node8]>]
) & (
	{
		0: {}
		1: { and: () => Fluent<Prepend<Node39, Stack>> }
	}[StartsWith<Stack, [Node9]>]
) & (
	{
		0: {}
		1: { character: (arg1: string) => Fluent<Prepend<Node28, Stack>> }
	}[StartsWith<Stack, [Node9]>]
) & (
	{
		0: {}
		1: { complement: () => Fluent<Prepend<Node41, Stack>> }
	}[StartsWith<Stack, [Node9]>]
) & (
	{
		0: {}
		1: { floating: (arg1: number) => Fluent<Prepend<Node20, Stack>> }
	}[StartsWith<Stack, [Node9]>]
) & (
	{
		0: {}
		1: { identifier: (arg1: string) => Fluent<Prepend<Node30, Stack>> }
	}[StartsWith<Stack, [Node9]>]
) & (
	{
		0: {}
		1: { integer: (arg1: number) => Fluent<Prepend<Node27, Stack>> }
	}[StartsWith<Stack, [Node9]>]
) & (
	{
		0: {}
		1: { minus: () => Fluent<Prepend<Node43, Stack>> }
	}[StartsWith<Stack, [Node9]>]
) & (
	{
		0: {}
		1: { minusMinus: () => Fluent<Prepend<Node24, Stack>> }
	}[StartsWith<Stack, [Node9]>]
) & (
	{
		0: {}
		1: { multi: () => Fluent<Prepend<Node44, Stack>> }
	}[StartsWith<Stack, [Node9]>]
) & (
	{
		0: {}
		1: { not: () => Fluent<Prepend<Node45, Stack>> }
	}[StartsWith<Stack, [Node9]>]
) & (
	{
		0: {}
		1: { plus: () => Fluent<Prepend<Node48, Stack>> }
	}[StartsWith<Stack, [Node9]>]
) & (
	{
		0: {}
		1: { plusPlus: () => Fluent<Prepend<Node25, Stack>> }
	}[StartsWith<Stack, [Node9]>]
) & (
	{
		0: {}
		1: { sizeof: () => Fluent<Prepend<Node26, Stack>> }
	}[StartsWith<Stack, [Node9]>]
) & (
	{
		0: {}
		1: { and: () => Fluent<Prepend<Node39, Stack>> }
	}[StartsWith<Stack, [Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node26]>]
) & (
	{
		0: {}
		1: { arrow: () => Fluent<Prepend<Node31, Stack>> }
	}[StartsWith<Stack, [Node10]>]
) & (
	{
		0: {}
		1: { character: (arg1: string) => Fluent<Prepend<Node28, Stack>> }
	}[StartsWith<Stack, [Node10]>]
) & (
	{
		0: {}
		1: { complement: () => Fluent<Prepend<Node41, Stack>> }
	}[StartsWith<Stack, [Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node26]>]
) & (
	{
		0: {}
		1: { dot: () => Fluent<Prepend<Node32, Stack>> }
	}[StartsWith<Stack, [Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node10, Node26]>]
) & (
	{
		0: {}
		1: { floating: (arg1: number) => Fluent<Prepend<Node20, Stack>> }
	}[StartsWith<Stack, [Node10]>]
) & (
	{
		0: {}
		1: { identifier: (arg1: string) => Fluent<Prepend<Node30, Stack>> }
	}[StartsWith<Stack, [Node10]>]
) & (
	{
		0: {}
		1: { integer: (arg1: number) => Fluent<Prepend<Node27, Stack>> }
	}[StartsWith<Stack, [Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node26]>]
) & (
	{
		0: {}
		1: { minus: () => Fluent<Prepend<Node43, Stack>> }
	}[StartsWith<Stack, [Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node26]>]
) & (
	{
		0: {}
		1: { minusMinus: () => Fluent<Prepend<Node21, Stack>> }
	}[StartsWith<Stack, [Node10]>]
) & (
	{
		0: {}
		1: { multi: () => Fluent<Prepend<Node44, Stack>> }
	}[StartsWith<Stack, [Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node26]>]
) & (
	{
		0: {}
		1: { not: () => Fluent<Prepend<Node45, Stack>> }
	}[StartsWith<Stack, [Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node26]>]
) & (
	{
		0: {}
		1: { plus: () => Fluent<Prepend<Node48, Stack>> }
	}[StartsWith<Stack, [Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node26]>]
) & (
	{
		0: {}
		1: { plusPlus: () => Fluent<Prepend<Node22, Stack>> }
	}[StartsWith<Stack, [Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node26]>]
) & (
	{
		0: {}
		1: { sizeof: () => Fluent<Prepend<Node26, Stack>> }
	}[StartsWith<Stack, [Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Tail<Stack>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Tail<Stack>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Tail<Stack>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Tail<Stack>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Tail<Stack>>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Tail<Stack>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Tail<Stack>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Tail<Stack>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Tail<Stack>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Tail<Stack>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Tail<Stack>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Tail<Stack>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Tail<Stack>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node12, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node12, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node12, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node12, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node12, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node12, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node12, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node12, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node12, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node12, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node12, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node12, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node12, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node13, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node13, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node13, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node13, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node13, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node13, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node13, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node13, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node13, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node13, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node13, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node13, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node13, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node14, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node14, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node14, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node14, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node14, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node14, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node14, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node14, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node14, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node14, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node14, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node14, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node14, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node15, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node15, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node15, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node15, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node15, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node15, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node15, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node15, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node15, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node15, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node15, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node15, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node15, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node16, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node16, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node16, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node16, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node16, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node16, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node16, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node16, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node16, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node16, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node16, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node16, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node16, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node17, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node17, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node17, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node17, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node17, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node17, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node17, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node17, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node17, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node17, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node17, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node17, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node17, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node18, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node18, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node18, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node18, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node18, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node18, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node18, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node18, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node18, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node18, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node18, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node18, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node18, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node19, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node19, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node19, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node19, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node19, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node19, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node19, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node19, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node19, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node19, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node19, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node19, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node19, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node20, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node20, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node20, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node20, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node20, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node20, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node20, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node20, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node20, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node20, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node20, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node20, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node20, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node20, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node20, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node20, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node20, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node20, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node20, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node20, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node20, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node20, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node20, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node20, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node20, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node20, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node20, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node20, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node20, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node20, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node20, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node20, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node20, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node20, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node20, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node20, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node20, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node20, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node20, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node20, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node20, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node20, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node20, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node20, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node20, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node20, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node20, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node20, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node20, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node20, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node20, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node20, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node20, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node20, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node20, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node20, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node20, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node20, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node20, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node20, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node20, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node20, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node20, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node20, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node20, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node20, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node20, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node20, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node20, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node20, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node20, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node20, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node20, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node20, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node20, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node20, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node20, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node20, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node20, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node20, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node20, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node20, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node20, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node20, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node20, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node20, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node20, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node20, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node20, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node20, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node20, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node20, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node20, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node20, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node20, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node20, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node20, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node20, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node20, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node20, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node20, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node20, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node20, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node20, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node20, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node20, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node20, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node20, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node20, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node20, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node20, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node20, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node20, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node20, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node20, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node20, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node20, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node20, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node20, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node20, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node20, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node20, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node20, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node20, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node20, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node20, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node20, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node20, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node20, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node20, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node20, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node20, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node20, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node20, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node20, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node20, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node20, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node20, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node20, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node20, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node20, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node20, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node20, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node20, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node20, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node20, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node20, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node20, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node20, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node20, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node20, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node20, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node20, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node20, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node20, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node20, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node20, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node20, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node20, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node20, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node20, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node20, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node20, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node20, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node20, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node20, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node20, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node20, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node20, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node20, Node26]>]
) & (
	{
		0: {}
		1: { and: () => Fluent<Prepend<Node39, Stack>> }
	}[StartsWith<Stack, [Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node26]>]
) & (
	{
		0: {}
		1: { character: (arg1: string) => Fluent<Prepend<Node28, Stack>> }
	}[StartsWith<Stack, [Node21]>]
) & (
	{
		0: {}
		1: { complement: () => Fluent<Prepend<Node41, Stack>> }
	}[StartsWith<Stack, [Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node26]>]
) & (
	{
		0: {}
		1: { floating: (arg1: number) => Fluent<Prepend<Node20, Stack>> }
	}[StartsWith<Stack, [Node21]>]
) & (
	{
		0: {}
		1: { identifier: (arg1: string) => Fluent<Prepend<Node30, Stack>> }
	}[StartsWith<Stack, [Node21]>]
) & (
	{
		0: {}
		1: { integer: (arg1: number) => Fluent<Prepend<Node27, Stack>> }
	}[StartsWith<Stack, [Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node26]>]
) & (
	{
		0: {}
		1: { minus: () => Fluent<Prepend<Node43, Stack>> }
	}[StartsWith<Stack, [Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node26]>]
) & (
	{
		0: {}
		1: { minusMinus: () => Fluent<Prepend<Node24, Stack>> }
	}[StartsWith<Stack, [Node21]>]
) & (
	{
		0: {}
		1: { multi: () => Fluent<Prepend<Node44, Stack>> }
	}[StartsWith<Stack, [Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node26]>]
) & (
	{
		0: {}
		1: { not: () => Fluent<Prepend<Node45, Stack>> }
	}[StartsWith<Stack, [Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node26]>]
) & (
	{
		0: {}
		1: { plus: () => Fluent<Prepend<Node48, Stack>> }
	}[StartsWith<Stack, [Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node26]>]
) & (
	{
		0: {}
		1: { plusPlus: () => Fluent<Prepend<Node25, Stack>> }
	}[StartsWith<Stack, [Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node26]>]
) & (
	{
		0: {}
		1: { sizeof: () => Fluent<Prepend<Node26, Stack>> }
	}[StartsWith<Stack, [Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node21, Node10, Node26]>]
) & (
	{
		0: {}
		1: { and: () => Fluent<Prepend<Node39, Stack>> }
	}[StartsWith<Stack, [Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node26]>]
) & (
	{
		0: {}
		1: { character: (arg1: string) => Fluent<Prepend<Node28, Stack>> }
	}[StartsWith<Stack, [Node22]>]
) & (
	{
		0: {}
		1: { complement: () => Fluent<Prepend<Node41, Stack>> }
	}[StartsWith<Stack, [Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node26]>]
) & (
	{
		0: {}
		1: { floating: (arg1: number) => Fluent<Prepend<Node20, Stack>> }
	}[StartsWith<Stack, [Node22]>]
) & (
	{
		0: {}
		1: { identifier: (arg1: string) => Fluent<Prepend<Node30, Stack>> }
	}[StartsWith<Stack, [Node22]>]
) & (
	{
		0: {}
		1: { integer: (arg1: number) => Fluent<Prepend<Node27, Stack>> }
	}[StartsWith<Stack, [Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node26]>]
) & (
	{
		0: {}
		1: { minus: () => Fluent<Prepend<Node43, Stack>> }
	}[StartsWith<Stack, [Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node26]>]
) & (
	{
		0: {}
		1: { minusMinus: () => Fluent<Prepend<Node24, Stack>> }
	}[StartsWith<Stack, [Node22]>]
) & (
	{
		0: {}
		1: { multi: () => Fluent<Prepend<Node44, Stack>> }
	}[StartsWith<Stack, [Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node26]>]
) & (
	{
		0: {}
		1: { not: () => Fluent<Prepend<Node45, Stack>> }
	}[StartsWith<Stack, [Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node26]>]
) & (
	{
		0: {}
		1: { plus: () => Fluent<Prepend<Node48, Stack>> }
	}[StartsWith<Stack, [Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node26]>]
) & (
	{
		0: {}
		1: { plusPlus: () => Fluent<Prepend<Node25, Stack>> }
	}[StartsWith<Stack, [Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node26]>]
) & (
	{
		0: {}
		1: { sizeof: () => Fluent<Prepend<Node26, Stack>> }
	}[StartsWith<Stack, [Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10, Node26]>]
) & (
	{
		0: {}
		1: { and: () => Fluent<Prepend<Node39, Stack>> }
	}[StartsWith<Stack, [Node23]>]
) & (
	{
		0: {}
		1: { character: (arg1: string) => Fluent<Prepend<Node28, Stack>> }
	}[StartsWith<Stack, [Node23]>]
) & (
	{
		0: {}
		1: { complement: () => Fluent<Prepend<Node41, Stack>> }
	}[StartsWith<Stack, [Node23]>]
) & (
	{
		0: {}
		1: { floating: (arg1: number) => Fluent<Prepend<Node20, Stack>> }
	}[StartsWith<Stack, [Node23]>]
) & (
	{
		0: {}
		1: { identifier: (arg1: string) => Fluent<Prepend<Node30, Stack>> }
	}[StartsWith<Stack, [Node23]>]
) & (
	{
		0: {}
		1: { integer: (arg1: number) => Fluent<Prepend<Node27, Stack>> }
	}[StartsWith<Stack, [Node23]>]
) & (
	{
		0: {}
		1: { minus: () => Fluent<Prepend<Node43, Stack>> }
	}[StartsWith<Stack, [Node23]>]
) & (
	{
		0: {}
		1: { minusMinus: () => Fluent<Prepend<Node24, Stack>> }
	}[StartsWith<Stack, [Node23]>]
) & (
	{
		0: {}
		1: { multi: () => Fluent<Prepend<Node44, Stack>> }
	}[StartsWith<Stack, [Node23]>]
) & (
	{
		0: {}
		1: { not: () => Fluent<Prepend<Node45, Stack>> }
	}[StartsWith<Stack, [Node23]>]
) & (
	{
		0: {}
		1: { plus: () => Fluent<Prepend<Node48, Stack>> }
	}[StartsWith<Stack, [Node23]>]
) & (
	{
		0: {}
		1: { plusPlus: () => Fluent<Prepend<Node25, Stack>> }
	}[StartsWith<Stack, [Node23]>]
) & (
	{
		0: {}
		1: { sizeof: () => Fluent<Prepend<Node26, Stack>> }
	}[StartsWith<Stack, [Node23]>]
) & (
	{
		0: {}
		1: { and: () => Fluent<Prepend<Node39, Stack>> }
	}[StartsWith<Stack, [Node24]>]
) & (
	{
		0: {}
		1: { character: (arg1: string) => Fluent<Prepend<Node28, Stack>> }
	}[StartsWith<Stack, [Node24]>]
) & (
	{
		0: {}
		1: { complement: () => Fluent<Prepend<Node41, Stack>> }
	}[StartsWith<Stack, [Node24]>]
) & (
	{
		0: {}
		1: { floating: (arg1: number) => Fluent<Prepend<Node20, Stack>> }
	}[StartsWith<Stack, [Node24]>]
) & (
	{
		0: {}
		1: { identifier: (arg1: string) => Fluent<Prepend<Node30, Stack>> }
	}[StartsWith<Stack, [Node24]>]
) & (
	{
		0: {}
		1: { integer: (arg1: number) => Fluent<Prepend<Node27, Stack>> }
	}[StartsWith<Stack, [Node24]>]
) & (
	{
		0: {}
		1: { minus: () => Fluent<Prepend<Node43, Stack>> }
	}[StartsWith<Stack, [Node24]>]
) & (
	{
		0: {}
		1: { minusMinus: () => Fluent<Prepend<Node24, Stack>> }
	}[StartsWith<Stack, [Node24]>]
) & (
	{
		0: {}
		1: { multi: () => Fluent<Prepend<Node44, Stack>> }
	}[StartsWith<Stack, [Node24]>]
) & (
	{
		0: {}
		1: { not: () => Fluent<Prepend<Node45, Stack>> }
	}[StartsWith<Stack, [Node24]>]
) & (
	{
		0: {}
		1: { plus: () => Fluent<Prepend<Node48, Stack>> }
	}[StartsWith<Stack, [Node24]>]
) & (
	{
		0: {}
		1: { plusPlus: () => Fluent<Prepend<Node25, Stack>> }
	}[StartsWith<Stack, [Node24]>]
) & (
	{
		0: {}
		1: { sizeof: () => Fluent<Prepend<Node26, Stack>> }
	}[StartsWith<Stack, [Node24]>]
) & (
	{
		0: {}
		1: { and: () => Fluent<Prepend<Node39, Stack>> }
	}[StartsWith<Stack, [Node25]>]
) & (
	{
		0: {}
		1: { character: (arg1: string) => Fluent<Prepend<Node28, Stack>> }
	}[StartsWith<Stack, [Node25]>]
) & (
	{
		0: {}
		1: { complement: () => Fluent<Prepend<Node41, Stack>> }
	}[StartsWith<Stack, [Node25]>]
) & (
	{
		0: {}
		1: { floating: (arg1: number) => Fluent<Prepend<Node20, Stack>> }
	}[StartsWith<Stack, [Node25]>]
) & (
	{
		0: {}
		1: { identifier: (arg1: string) => Fluent<Prepend<Node30, Stack>> }
	}[StartsWith<Stack, [Node25]>]
) & (
	{
		0: {}
		1: { integer: (arg1: number) => Fluent<Prepend<Node27, Stack>> }
	}[StartsWith<Stack, [Node25]>]
) & (
	{
		0: {}
		1: { minus: () => Fluent<Prepend<Node43, Stack>> }
	}[StartsWith<Stack, [Node25]>]
) & (
	{
		0: {}
		1: { minusMinus: () => Fluent<Prepend<Node24, Stack>> }
	}[StartsWith<Stack, [Node25]>]
) & (
	{
		0: {}
		1: { multi: () => Fluent<Prepend<Node44, Stack>> }
	}[StartsWith<Stack, [Node25]>]
) & (
	{
		0: {}
		1: { not: () => Fluent<Prepend<Node45, Stack>> }
	}[StartsWith<Stack, [Node25]>]
) & (
	{
		0: {}
		1: { plus: () => Fluent<Prepend<Node48, Stack>> }
	}[StartsWith<Stack, [Node25]>]
) & (
	{
		0: {}
		1: { plusPlus: () => Fluent<Prepend<Node25, Stack>> }
	}[StartsWith<Stack, [Node25]>]
) & (
	{
		0: {}
		1: { sizeof: () => Fluent<Prepend<Node26, Stack>> }
	}[StartsWith<Stack, [Node25]>]
) & (
	{
		0: {}
		1: { and: () => Fluent<Prepend<Node39, Stack>> }
	}[StartsWith<Stack, [Node26]>]
) & (
	{
		0: {}
		1: { character: (arg1: string) => Fluent<Prepend<Node28, Stack>> }
	}[StartsWith<Stack, [Node26]>]
) & (
	{
		0: {}
		1: { complement: () => Fluent<Prepend<Node41, Stack>> }
	}[StartsWith<Stack, [Node26]>]
) & (
	{
		0: {}
		1: { floating: (arg1: number) => Fluent<Prepend<Node20, Stack>> }
	}[StartsWith<Stack, [Node26]>]
) & (
	{
		0: {}
		1: { identifier: (arg1: string) => Fluent<Prepend<Node30, Stack>> }
	}[StartsWith<Stack, [Node26]>]
) & (
	{
		0: {}
		1: { integer: (arg1: number) => Fluent<Prepend<Node27, Stack>> }
	}[StartsWith<Stack, [Node26]>]
) & (
	{
		0: {}
		1: { minus: () => Fluent<Prepend<Node43, Stack>> }
	}[StartsWith<Stack, [Node26]>]
) & (
	{
		0: {}
		1: { minusMinus: () => Fluent<Prepend<Node24, Stack>> }
	}[StartsWith<Stack, [Node26]>]
) & (
	{
		0: {}
		1: { multi: () => Fluent<Prepend<Node44, Stack>> }
	}[StartsWith<Stack, [Node26]>]
) & (
	{
		0: {}
		1: { not: () => Fluent<Prepend<Node45, Stack>> }
	}[StartsWith<Stack, [Node26]>]
) & (
	{
		0: {}
		1: { plus: () => Fluent<Prepend<Node48, Stack>> }
	}[StartsWith<Stack, [Node26]>]
) & (
	{
		0: {}
		1: { plusPlus: () => Fluent<Prepend<Node25, Stack>> }
	}[StartsWith<Stack, [Node26]>]
) & (
	{
		0: {}
		1: { sizeof: () => Fluent<Prepend<Node26, Stack>> }
	}[StartsWith<Stack, [Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node27, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node27, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node27, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node27, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node27, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node27, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node27, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node27, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node27, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node27, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node27, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node27, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node27, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node27, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node27, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node27, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node27, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node27, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node27, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node27, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node27, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node27, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node27, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node27, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node27, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node27, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node27, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node27, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node27, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node27, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node27, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node27, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node27, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node27, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node27, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node27, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node27, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node27, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node27, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node27, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node27, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node27, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node27, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node27, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node27, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node27, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node27, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node27, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node27, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node27, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node27, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node27, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node27, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node27, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node27, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node27, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node27, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node27, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node27, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node27, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node27, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node27, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node27, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node27, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node27, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node27, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node27, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node27, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node27, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node27, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node27, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node27, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node27, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node27, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node27, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node27, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node27, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node27, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node27, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node27, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node27, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node27, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node27, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node27, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node27, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node27, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node27, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node27, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node27, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node27, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node27, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node27, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node27, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node27, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node27, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node27, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node27, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node27, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node27, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node27, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node27, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node27, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node27, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node27, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node27, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node27, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node27, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node27, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node27, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node27, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node27, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node27, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node27, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node27, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node27, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node27, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node27, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node27, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node27, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node27, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node27, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node27, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node27, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node27, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node27, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node27, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node27, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node27, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node27, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node27, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node27, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node27, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node27, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node27, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node27, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node27, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node27, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node27, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node27, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node27, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node27, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node27, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node27, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node27, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node27, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node27, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node27, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node27, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node27, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node27, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node27, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node27, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node27, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node27, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node27, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node27, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node27, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node27, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node27, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node27, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node27, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node27, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node27, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node27, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node27, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node27, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node27, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node27, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node27, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node27, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node27, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node28, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node28, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node28, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node28, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node28, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node28, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node28, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node28, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node28, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node28, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node28, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node28, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node28, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node28, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node28, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node28, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node28, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node28, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node28, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node28, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node28, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node28, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node28, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node28, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node28, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node28, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node28, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node28, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node28, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node28, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node28, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node28, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node28, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node28, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node28, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node28, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node28, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node28, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node28, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node28, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node28, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node28, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node28, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node28, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node28, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node28, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node28, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node28, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node28, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node28, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node28, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node28, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node28, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node28, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node28, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node28, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node28, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node28, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node28, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node28, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node28, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node28, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node28, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node28, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node28, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node28, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node28, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node28, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node28, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node28, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node28, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node28, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node28, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node28, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node28, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node28, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node28, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node28, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node28, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node28, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node28, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node28, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node28, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node28, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node28, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node28, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node28, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node28, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node28, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node28, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node28, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node28, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node28, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node28, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node28, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node28, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node28, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node28, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node28, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node28, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node28, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node28, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node28, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node28, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node28, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node28, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node28, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node28, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node28, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node28, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node28, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node28, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node28, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node28, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node28, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node28, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node28, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node28, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node28, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node28, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node28, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node28, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node28, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node28, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node28, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node28, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node28, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node28, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node28, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node28, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node28, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node28, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node28, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node28, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node28, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node28, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node28, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node28, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node28, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node28, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node28, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node28, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node28, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node28, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node28, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node28, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node28, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node28, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node28, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node28, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node28, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node28, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node28, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node28, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node28, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node28, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node28, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node28, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node28, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node28, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node28, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node28, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node28, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node28, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node28, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node28, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node28, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node28, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node28, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node28, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node28, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node34, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node30, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node30, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node33, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node30, Node31]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node35, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node30, Node32]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node33, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node31]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node35, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node32]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node30, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node30, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node33, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node30, Node31]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node35, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node30, Node32]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node30, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node30, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node33, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node30, Node31]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node35, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node30, Node32]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node30, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node30, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node33, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node30, Node31]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node35, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node30, Node32]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node33, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node31]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node35, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node32]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node30, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node30, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node33, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node30, Node31]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node35, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node30, Node32]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node30, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node30, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node33, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node30, Node31]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node35, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node30, Node32]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node30, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node30, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node33, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node30, Node31]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node35, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node30, Node32]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node30, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node30, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node33, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node30, Node31]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node35, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node30, Node32]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node30, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node30, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node33, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node30, Node31]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node35, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node30, Node32]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node33, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node31]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node35, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node32]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node33, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node31]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node35, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node32]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node33, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node31]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node35, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node32]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node33, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node31]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node35, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node32]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node30, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node30, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node33, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node30, Node31]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node35, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node30, Node32]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node33, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node31]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node35, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node32]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node30, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node30, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node33, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node30, Node31]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node35, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node30, Node32]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node33, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node31]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node35, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node32]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node33, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node31]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node35, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node32]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node33, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node31]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node35, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node32]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node33, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node31]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node35, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node32]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node33, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node31]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node35, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node32]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node33, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node31]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node35, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node32]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node30, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node30, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node33, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node30, Node31]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node35, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node30, Node32]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node33, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node31]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node35, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node32]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node30, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node30, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node33, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node30, Node31]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node35, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node30, Node32]>]
) & (
	{
		0: {}
		1: { identifier: (arg1: string) => Fluent<Prepend<Node30, Stack>> }
	}[StartsWith<Stack, [Node31]>]
) & (
	{
		0: {}
		1: { identifier: (arg1: string) => Fluent<Prepend<Node30, Stack>> }
	}[StartsWith<Stack, [Node32]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node33, Node31, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node35, Node32, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node36, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node36, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node36, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node36, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node36, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node36, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node36, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node36, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node36, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node36, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node36, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node36, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node36, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node36, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node36, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node36, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node36, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node36, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node36, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node36, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node36, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node36, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node36, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node36, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node36, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node36, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node36, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node36, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node36, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node36, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node36, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node36, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node36, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node36, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node36, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node36, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node36, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node36, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node36, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node36, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node36, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node36, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node36, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node36, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node36, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node36, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node36, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node36, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node36, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node36, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node36, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node36, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node36, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node36, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node36, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node36, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node36, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node36, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node36, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node36, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node36, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node36, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node36, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node36, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node36, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node36, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node36, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node36, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node36, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node36, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node36, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node36, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node36, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node36, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node36, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node36, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node36, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node36, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node36, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node36, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node36, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node36, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node36, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node36, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node36, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node36, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node36, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node36, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node36, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node36, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node36, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node36, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node36, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node36, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node36, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node36, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node36, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node36, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node36, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node36, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node36, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node36, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node36, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node36, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node36, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node36, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node36, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node36, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node36, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node36, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node36, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node36, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node36, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node36, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node36, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node36, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node36, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node36, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node36, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node36, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node36, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node36, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node36, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node36, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node36, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node36, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node36, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node36, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node36, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node36, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node37, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node37, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node37, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node37, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node37, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node37, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node37, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node37, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node37, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node37, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node37, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node37, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node37, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node37, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node37, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node37, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node37, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node37, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node37, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node37, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node37, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node37, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node37, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node37, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node37, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node37, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node37, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node37, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node37, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node37, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node37, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node37, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node37, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node37, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node37, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node37, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node37, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node37, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node37, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node37, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node37, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node37, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node37, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node37, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node37, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node37, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node37, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node37, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node37, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node37, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node37, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node37, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node37, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node37, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node37, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node37, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node37, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node37, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node37, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node37, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node37, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node37, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node37, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node37, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node37, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node37, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node37, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node37, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node37, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node37, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node37, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node37, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node37, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node37, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node37, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node37, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node37, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node37, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node37, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node37, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node37, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node37, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node37, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node37, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node37, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node37, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node37, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node37, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node37, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node37, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node37, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node37, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node37, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node37, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node37, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node37, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node37, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node37, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node37, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node37, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node37, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node37, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node37, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node37, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node37, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node37, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node37, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node37, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node37, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node37, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node37, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node37, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node37, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node37, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node37, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node37, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node37, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node38, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node38, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node38, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node38, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node38, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node38, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node38, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node38, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node38, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node38, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node38, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node38, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node38, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node38, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node38, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node38, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node38, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node38, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node38, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node38, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node38, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node38, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node38, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node38, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node38, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node38, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node38, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node38, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node38, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node38, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node38, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node38, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node38, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node38, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node38, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node38, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node38, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node38, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node38, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node38, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node38, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node38, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node38, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node38, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node38, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node38, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node38, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node38, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node38, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node38, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node38, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node38, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node38, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node38, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node38, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node38, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node38, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node38, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node38, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node38, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node38, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node38, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node38, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node38, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node38, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node38, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node38, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node38, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node38, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node38, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node38, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node38, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node38, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node38, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node38, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node38, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node38, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node38, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node38, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node38, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node38, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node38, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node38, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node38, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node38, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node38, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node38, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node38, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node38, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node38, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node38, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node38, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node38, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node38, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node38, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node38, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node38, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node38, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node38, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node38, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node38, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node38, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node38, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node38, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node38, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node38, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node38, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node38, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node38, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node38, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node38, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node38, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node38, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node38, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node38, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node38, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node38, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node38, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node38, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node38, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node38, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node38, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node38, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node38, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node38, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node38, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node38, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node38, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node38, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node38, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node39, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node39, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node39, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node39, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node39, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node39, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node39, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node39, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node39, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node39, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node39, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node39, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node39, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node39, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node39, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node39, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node39, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node39, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node39, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node39, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node39, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node39, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node39, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node39, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node39, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node39, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node39, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node39, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node39, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node39, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node39, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node39, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node39, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node39, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node39, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node39, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node39, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node39, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node39, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node39, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node39, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node39, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node39, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node39, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node39, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node39, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node39, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node39, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node39, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node39, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node39, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node39, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node39, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node39, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node39, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node39, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node39, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node39, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node39, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node39, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node39, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node39, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node39, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node39, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node39, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node39, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node39, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node39, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node39, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node39, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node39, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node39, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node39, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node39, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node39, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node39, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node39, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node39, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node39, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node39, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node39, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node46, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node46, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node46, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node40, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node46, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node46, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node46, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node46, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node46, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node46, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node46, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node46, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node46, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node40, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node41, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node41, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node41, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node41, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node41, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node41, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node41, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node41, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node41, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node41, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node41, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node41, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node41, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node41, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node41, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node41, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node41, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node41, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node41, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node41, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node41, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node41, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node41, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node41, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node41, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node41, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node41, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node41, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node41, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node41, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node41, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node41, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node41, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node41, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node41, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node41, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node41, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node41, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node41, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node41, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node41, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node41, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node41, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node41, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node41, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node41, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node41, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node41, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node41, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node41, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node41, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node41, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node41, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node41, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node41, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node41, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node41, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node41, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node41, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node41, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node41, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node41, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node41, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node41, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node41, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node41, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node41, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node41, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node41, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node41, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node41, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node41, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node41, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node41, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node41, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node41, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node41, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node41, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node41, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node41, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node41, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node41, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node41, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node41, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node41, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node41, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node41, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node41, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node41, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node41, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node21, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node21, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node42, Node21, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node21, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node21, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node21, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node21, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node21, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node21, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node21, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node21, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node42, Node21, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node43, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node43, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node43, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node43, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node43, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node43, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node43, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node43, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node43, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node43, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node43, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node43, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node43, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node43, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node43, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node43, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node43, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node43, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node43, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node43, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node43, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node43, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node43, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node43, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node43, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node43, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node43, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node43, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node43, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node43, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node43, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node43, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node43, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node43, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node43, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node43, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node43, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node43, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node43, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node43, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node43, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node43, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node43, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node43, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node43, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node43, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node43, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node43, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node43, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node43, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node43, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node43, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node43, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node43, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node43, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node43, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node43, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node43, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node43, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node43, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node43, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node43, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node43, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node43, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node43, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node43, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node43, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node43, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node43, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node43, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node43, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node43, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node43, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node43, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node43, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node43, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node43, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node43, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node43, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node43, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node43, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node43, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node43, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node43, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node43, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node43, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node43, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node43, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node43, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node43, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node44, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node44, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node44, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node44, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node44, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node44, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node44, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node44, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node44, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node44, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node44, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node44, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node44, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node44, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node44, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node44, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node44, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node44, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node44, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node44, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node44, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node44, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node44, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node44, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node44, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node44, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node44, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node44, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node44, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node44, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node44, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node44, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node44, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node44, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node44, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node44, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node44, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node44, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node44, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node44, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node44, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node44, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node44, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node44, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node44, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node44, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node44, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node44, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node44, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node44, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node44, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node44, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node44, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node44, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node44, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node44, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node44, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node44, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node44, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node44, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node44, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node44, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node44, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node44, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node44, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node44, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node44, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node44, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node44, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node44, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node44, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node44, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node44, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node44, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node44, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node44, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node44, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node44, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node44, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node44, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node44, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node44, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node44, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node44, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node44, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node44, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node44, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node44, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node44, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node44, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node45, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node45, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node45, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node45, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node45, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node45, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node45, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node45, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node45, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node45, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node45, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node45, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node45, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node45, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node45, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node45, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node45, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node45, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node45, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node45, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node45, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node45, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node45, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node45, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node45, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node45, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node45, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node45, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node45, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node45, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node45, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node45, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node45, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node45, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node45, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node45, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node45, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node45, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node45, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node45, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node45, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node45, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node45, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node45, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node45, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node45, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node45, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node45, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node45, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node45, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node45, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node45, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node45, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node45, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node45, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node45, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node45, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node45, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node45, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node45, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node45, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node45, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node45, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node45, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node45, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node45, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node45, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node45, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node45, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node45, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node45, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node45, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node45, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node45, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node45, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node45, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node45, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node45, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node45, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node45, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node45, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node45, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node45, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node45, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node45, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node45, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node45, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node45, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node45, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node45, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node45, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node45, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node45, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node45, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node45, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node45, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node45, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node45, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node45, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node45, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node45, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node45, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node45, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node45, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node45, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node45, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node45, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node45, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node45, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node45, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node45, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node45, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node45, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node45, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node45, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node45, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node45, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node46, Node23, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node22, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node22, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node47, Node22, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node22, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node22, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node22, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node22, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node22, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node22, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node22, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node22, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node47, Node22, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node48, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node48, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node48, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node48, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node48, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node48, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node48, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node48, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node48, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node48, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node48, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node48, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node48, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node48, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node48, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node48, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node48, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node48, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node48, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node48, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node48, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node48, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node48, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node48, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node48, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node48, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node48, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node48, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node48, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node48, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node48, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node48, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node48, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node48, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node48, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node48, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node48, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node48, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node48, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node48, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node48, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node48, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node48, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node48, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node48, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node48, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node48, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node48, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node48, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { identifier: infer F }
			? { identifier: F }
			: {}
	}[StartsWith<Stack, [Node48, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node48, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node48, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node48, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node48, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node48, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node48, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node48, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node48, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node48, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node48, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node48, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node48, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node48, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node48, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node48, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node48, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node48, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node48, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node48, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node48, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node48, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node48, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node48, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node48, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node48, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node48, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node48, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node48, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node48, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node48, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node48, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node48, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node48, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node48, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node48, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node48, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node48, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node48, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node48, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node23, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node48, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node22]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node23]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node47, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node49, Node26, Node26]>]
)

class FluentImpl {
	stack: Node[] = [new Node1]
	and = (...a: any[]) => {
		if (startsWithNode48Node26(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode48Node25(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode48Node24(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode48Node23(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode48Node22(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode48Node21(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode48Node10(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode48Node9(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode48Node8(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode48Node1(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode45Node26(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode45Node25(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode45Node24(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode45Node23(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode45Node22(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode45Node21(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode45Node10(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode45Node9(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode45Node8(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode45Node1(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode44Node26(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode44Node25(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode44Node24(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode44Node23(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode44Node22(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode44Node21(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode44Node10(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode44Node9(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode44Node8(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode44Node1(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode43Node26(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode43Node25(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode43Node24(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode43Node23(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode43Node22(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode43Node21(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode43Node10(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode43Node9(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode43Node8(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode43Node1(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode41Node26(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode41Node25(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode41Node24(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode41Node23(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode41Node22(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode41Node21(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode41Node10(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode41Node9(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode41Node8(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode41Node1(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode39Node26(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode39Node25(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode39Node24(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode39Node23(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode39Node22(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode39Node21(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode39Node10(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode39Node9(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode39Node8(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode39Node1(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.and()
		}
		if (startsWithNode38Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.and()
		}
		if (startsWithNode38Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.and()
		}
		if (startsWithNode38Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.and()
		}
		if (startsWithNode38Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.and()
		}
		if (startsWithNode38Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.and()
		}
		if (startsWithNode38Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.and()
		}
		if (startsWithNode38Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.and()
		}
		if (startsWithNode38Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.and()
		}
		if (startsWithNode38Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.and()
		}
		if (startsWithNode38Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.and()
		}
		if (startsWithNode37Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.and()
		}
		if (startsWithNode37Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.and()
		}
		if (startsWithNode37Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.and()
		}
		if (startsWithNode37Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.and()
		}
		if (startsWithNode37Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.and()
		}
		if (startsWithNode37Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.and()
		}
		if (startsWithNode37Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.and()
		}
		if (startsWithNode37Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.and()
		}
		if (startsWithNode37Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.and()
		}
		if (startsWithNode37Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.and()
		}
		if (startsWithNode36Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode36Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode36Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode36Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode36Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode36Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode36Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode36Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode36Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode36Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode35Node32Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode35Node32Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode35Node32Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode35Node32Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode35Node32Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode35Node32Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode35Node32Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode35Node32Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode35Node32Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode35Node32Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode34Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode34Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode34Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode34Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode34Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode34Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode34Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode34Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode34Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode34Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode33Node31Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode33Node31Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode33Node31Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode33Node31Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode33Node31Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode33Node31Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode33Node31Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode33Node31Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode33Node31Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode33Node31Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode30Node32(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node35(content), ...tail]
			return this.and()
		}
		if (startsWithNode30Node31(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node33(content), ...tail]
			return this.and()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.and()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.and()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.and()
		}
		if (startsWithNode30Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.and()
		}
		if (startsWithNode30Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.and()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.and()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.and()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.and()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.and()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.and()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node34(content), ...tail]
			return this.and()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.and()
		}
		if (startsWithNode28Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.and()
		}
		if (startsWithNode28Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.and()
		}
		if (startsWithNode28Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.and()
		}
		if (startsWithNode28Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.and()
		}
		if (startsWithNode28Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.and()
		}
		if (startsWithNode28Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.and()
		}
		if (startsWithNode28Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.and()
		}
		if (startsWithNode28Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.and()
		}
		if (startsWithNode28Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.and()
		}
		if (startsWithNode28Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.and()
		}
		if (startsWithNode27Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.and()
		}
		if (startsWithNode27Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.and()
		}
		if (startsWithNode27Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.and()
		}
		if (startsWithNode27Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.and()
		}
		if (startsWithNode27Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.and()
		}
		if (startsWithNode27Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.and()
		}
		if (startsWithNode27Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.and()
		}
		if (startsWithNode27Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.and()
		}
		if (startsWithNode27Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.and()
		}
		if (startsWithNode27Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.and()
		}
		if (startsWithNode26(this.stack)) {
			this.stack = [new Node39(), ...this.stack]
			return this
		}		if (startsWithNode25(this.stack)) {
			this.stack = [new Node39(), ...this.stack]
			return this
		}		if (startsWithNode24(this.stack)) {
			this.stack = [new Node39(), ...this.stack]
			return this
		}		if (startsWithNode23(this.stack)) {
			this.stack = [new Node39(), ...this.stack]
			return this
		}		if (startsWithNode22(this.stack)) {
			this.stack = [new Node39(), ...this.stack]
			return this
		}		if (startsWithNode21(this.stack)) {
			this.stack = [new Node39(), ...this.stack]
			return this
		}		if (startsWithNode20Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.and()
		}
		if (startsWithNode20Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.and()
		}
		if (startsWithNode20Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.and()
		}
		if (startsWithNode20Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.and()
		}
		if (startsWithNode20Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.and()
		}
		if (startsWithNode20Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.and()
		}
		if (startsWithNode20Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.and()
		}
		if (startsWithNode20Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.and()
		}
		if (startsWithNode20Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.and()
		}
		if (startsWithNode20Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.and()
		}
		if (startsWithNode19Node4(this.stack)) {
			const content = new _AssignmentXorEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.and()
		}
		if (startsWithNode18Node4(this.stack)) {
			const content = new _AssignmentRightShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.and()
		}
		if (startsWithNode17Node4(this.stack)) {
			const content = new _AssignmentPlusEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.and()
		}
		if (startsWithNode16Node4(this.stack)) {
			const content = new _AssignmentPercentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.and()
		}
		if (startsWithNode15Node4(this.stack)) {
			const content = new _AssignmentOrEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.and()
		}
		if (startsWithNode14Node4(this.stack)) {
			const content = new _AssignmentMultiEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.and()
		}
		if (startsWithNode13Node4(this.stack)) {
			const content = new _AssignmentMinuxEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.and()
		}
		if (startsWithNode12Node4(this.stack)) {
			const content = new _AssignmentLeftShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.and()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node34(content), ...tail]
			return this.and()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.and()
		}
		if (startsWithNode10(this.stack)) {
			this.stack = [new Node39(), ...this.stack]
			return this
		}		if (startsWithNode9(this.stack)) {
			this.stack = [new Node39(), ...this.stack]
			return this
		}		if (startsWithNode8(this.stack)) {
			this.stack = [new Node39(), ...this.stack]
			return this
		}		if (startsWithNode7Node8Node4Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new _AssignmentExpression(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.and()
		}
		if (startsWithNode7Node8Node4Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new _AssignmentExpression(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.and()
		}
		if (startsWithNode7Node8Node4Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new _AssignmentExpression(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node7(content), ...tail]
			return this.and()
		}
		if (startsWithNode6Node4(this.stack)) {
			const content = new _AssignmentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.and()
		}
		if (startsWithNode5Node4(this.stack)) {
			const content = new _AssignmentDivEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.and()
		}
		if (startsWithNode3Node4(this.stack)) {
			const content = new _AssignmentAndEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.and()
		}
		if (startsWithNode1(this.stack)) {
			this.stack = [new Node39(), ...this.stack]
			return this
		}
	}
	andEqual = (...a: any[]) => {
		if (startsWithNode49Node26Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode49Node26Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode49Node26Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode49Node26Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode49Node26Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode49Node26Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode49Node26Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode49Node26Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode49Node26Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode49Node26Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode47Node25Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode47Node25Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode47Node25Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode47Node25Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode47Node25Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode47Node25Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode47Node22Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode47Node25Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode47Node25Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode47Node25Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode46Node23Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode46Node23Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode46Node23Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode46Node23Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode46Node23Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode46Node23Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode46Node23Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode46Node23Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode46Node23Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode46Node23Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode42Node24Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode42Node24Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode42Node24Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode42Node24Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode42Node24Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode42Node24Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode42Node21Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode42Node24Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode42Node24Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode42Node24Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode40Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryCastExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node46(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode38Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode38Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode38Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode38Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode38Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode38Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode38Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode38Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode38Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode38Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode37Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode37Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode37Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode37Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode37Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode37Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode37Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode37Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode37Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode37Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode36Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode36Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode36Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode36Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode36Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode36Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode36Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode36Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode36Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode36Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode35Node32Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode35Node32Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode35Node32Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode35Node32Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode35Node32Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode35Node32Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode35Node32Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode35Node32Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode35Node32Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode35Node32Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode34Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode34Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode34Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode34Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode34Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode34Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode34Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode34Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode34Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode34Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode33Node31Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode33Node31Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode33Node31Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode33Node31Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode33Node31Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode33Node31Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode33Node31Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode33Node31Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode33Node31Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode33Node31Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode30Node32(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node35(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode30Node31(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node33(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode30Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode30Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node34(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode28Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode28Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode28Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode28Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode28Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode28Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode28Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode28Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode28Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode28Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode27Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode27Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode27Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode27Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode27Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode27Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode27Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode27Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode27Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode27Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode22Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode22Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode22Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode22Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode22Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode22Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode22Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode22Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode22Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode22Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode21Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode21Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode21Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode21Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode21Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode21Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode21Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode21Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode21Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode21Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode20Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode20Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode20Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode20Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode20Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode20Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode20Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode20Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode20Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode20Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node34(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode10Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node49(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode10Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node47(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode10Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode10Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode10Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node47(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode10Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode10Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode10Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode10Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode10Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node2(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode4(this.stack)) {
			this.stack = [new Node3(), ...this.stack]
			return this
		}
	}
	arrow = (...a: any[]) => {
		if (startsWithNode38Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode38Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode38Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode38Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode38Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode38Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode38Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode38Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode38Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode38Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode37Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode37Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode37Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode37Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode37Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode37Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode37Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode37Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode37Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode37Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode36Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode36Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode36Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode36Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode36Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode36Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode36Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode36Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode36Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode36Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode35Node32Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode35Node32Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode35Node32Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode35Node32Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode35Node32Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode35Node32Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode35Node32Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode35Node32Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode35Node32Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode35Node32Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode34Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode34Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode34Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode34Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode34Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode34Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode34Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode34Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode34Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode34Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode33Node31Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode33Node31Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode33Node31Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode33Node31Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode33Node31Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode33Node31Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode33Node31Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode33Node31Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode33Node31Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode33Node31Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode30Node32(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node35(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode30Node31(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node33(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode30Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode30Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node34(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode28Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode28Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode28Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode28Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode28Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode28Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode28Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode28Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode28Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode28Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode27Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode27Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode27Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode27Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode27Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode27Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode27Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode27Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode27Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode27Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode22Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode22Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode22Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode22Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode22Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode22Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode22Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode22Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode22Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode22Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode21Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode21Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode21Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode21Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode21Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode21Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode21Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode21Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode21Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode21Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode20Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode20Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode20Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode20Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode20Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode20Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode20Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode20Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode20Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode20Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node34(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode10(this.stack)) {
			this.stack = [new Node31(), ...this.stack]
			return this
		}
	}
	character = (...a: any[]) => {
		if (startsWithNode48Node26(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode48Node25(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode48Node24(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode48Node23(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode48Node22(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode48Node21(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode48Node10(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode48Node9(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode48Node8(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode48Node1(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode45Node26(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode45Node25(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode45Node24(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode45Node23(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode45Node22(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode45Node21(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode45Node10(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode45Node9(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode45Node8(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode45Node1(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode44Node26(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode44Node25(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode44Node24(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode44Node23(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode44Node22(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode44Node21(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode44Node10(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode44Node9(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode44Node8(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode44Node1(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode43Node26(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode43Node25(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode43Node24(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode43Node23(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode43Node22(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode43Node21(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode43Node10(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode43Node9(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode43Node8(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode43Node1(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode41Node26(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode41Node25(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode41Node24(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode41Node23(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode41Node22(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode41Node21(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode41Node10(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode41Node9(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode41Node8(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode41Node1(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode39Node26(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode39Node25(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode39Node24(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode39Node23(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode39Node22(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode39Node21(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode39Node10(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode39Node9(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode39Node8(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode39Node1(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.character()
		}
		if (startsWithNode38Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.character()
		}
		if (startsWithNode38Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.character()
		}
		if (startsWithNode38Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.character()
		}
		if (startsWithNode38Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.character()
		}
		if (startsWithNode38Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.character()
		}
		if (startsWithNode38Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.character()
		}
		if (startsWithNode38Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.character()
		}
		if (startsWithNode38Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.character()
		}
		if (startsWithNode38Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.character()
		}
		if (startsWithNode38Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.character()
		}
		if (startsWithNode37Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.character()
		}
		if (startsWithNode37Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.character()
		}
		if (startsWithNode37Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.character()
		}
		if (startsWithNode37Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.character()
		}
		if (startsWithNode37Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.character()
		}
		if (startsWithNode37Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.character()
		}
		if (startsWithNode37Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.character()
		}
		if (startsWithNode37Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.character()
		}
		if (startsWithNode37Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.character()
		}
		if (startsWithNode37Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.character()
		}
		if (startsWithNode36Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode36Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode36Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode36Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode36Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode36Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode36Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode36Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode36Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode36Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode35Node32Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode35Node32Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode35Node32Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode35Node32Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode35Node32Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode35Node32Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode35Node32Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode35Node32Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode35Node32Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode35Node32Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode34Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode34Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode34Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode34Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode34Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode34Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode34Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode34Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode34Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode34Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode33Node31Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode33Node31Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode33Node31Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode33Node31Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode33Node31Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode33Node31Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode33Node31Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode33Node31Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode33Node31Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode33Node31Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode30Node32(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node35(content), ...tail]
			return this.character()
		}
		if (startsWithNode30Node31(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node33(content), ...tail]
			return this.character()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.character()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.character()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.character()
		}
		if (startsWithNode30Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.character()
		}
		if (startsWithNode30Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.character()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.character()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.character()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.character()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.character()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.character()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node34(content), ...tail]
			return this.character()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.character()
		}
		if (startsWithNode28Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.character()
		}
		if (startsWithNode28Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.character()
		}
		if (startsWithNode28Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.character()
		}
		if (startsWithNode28Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.character()
		}
		if (startsWithNode28Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.character()
		}
		if (startsWithNode28Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.character()
		}
		if (startsWithNode28Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.character()
		}
		if (startsWithNode28Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.character()
		}
		if (startsWithNode28Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.character()
		}
		if (startsWithNode28Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.character()
		}
		if (startsWithNode27Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.character()
		}
		if (startsWithNode27Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.character()
		}
		if (startsWithNode27Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.character()
		}
		if (startsWithNode27Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.character()
		}
		if (startsWithNode27Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.character()
		}
		if (startsWithNode27Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.character()
		}
		if (startsWithNode27Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.character()
		}
		if (startsWithNode27Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.character()
		}
		if (startsWithNode27Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.character()
		}
		if (startsWithNode27Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.character()
		}
		if (startsWithNode26(this.stack)) {
			this.stack = [new Node28(a[0] as string), ...this.stack]
			return this
		}		if (startsWithNode25(this.stack)) {
			this.stack = [new Node28(a[0] as string), ...this.stack]
			return this
		}		if (startsWithNode24(this.stack)) {
			this.stack = [new Node28(a[0] as string), ...this.stack]
			return this
		}		if (startsWithNode23(this.stack)) {
			this.stack = [new Node28(a[0] as string), ...this.stack]
			return this
		}		if (startsWithNode22(this.stack)) {
			this.stack = [new Node28(a[0] as string), ...this.stack]
			return this
		}		if (startsWithNode21(this.stack)) {
			this.stack = [new Node28(a[0] as string), ...this.stack]
			return this
		}		if (startsWithNode20Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.character()
		}
		if (startsWithNode20Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.character()
		}
		if (startsWithNode20Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.character()
		}
		if (startsWithNode20Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.character()
		}
		if (startsWithNode20Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.character()
		}
		if (startsWithNode20Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.character()
		}
		if (startsWithNode20Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.character()
		}
		if (startsWithNode20Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.character()
		}
		if (startsWithNode20Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.character()
		}
		if (startsWithNode20Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.character()
		}
		if (startsWithNode19Node4(this.stack)) {
			const content = new _AssignmentXorEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.character()
		}
		if (startsWithNode18Node4(this.stack)) {
			const content = new _AssignmentRightShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.character()
		}
		if (startsWithNode17Node4(this.stack)) {
			const content = new _AssignmentPlusEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.character()
		}
		if (startsWithNode16Node4(this.stack)) {
			const content = new _AssignmentPercentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.character()
		}
		if (startsWithNode15Node4(this.stack)) {
			const content = new _AssignmentOrEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.character()
		}
		if (startsWithNode14Node4(this.stack)) {
			const content = new _AssignmentMultiEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.character()
		}
		if (startsWithNode13Node4(this.stack)) {
			const content = new _AssignmentMinuxEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.character()
		}
		if (startsWithNode12Node4(this.stack)) {
			const content = new _AssignmentLeftShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.character()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node34(content), ...tail]
			return this.character()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.character()
		}
		if (startsWithNode10(this.stack)) {
			this.stack = [new Node28(a[0] as string), ...this.stack]
			return this
		}		if (startsWithNode9(this.stack)) {
			this.stack = [new Node28(a[0] as string), ...this.stack]
			return this
		}		if (startsWithNode8(this.stack)) {
			this.stack = [new Node28(a[0] as string), ...this.stack]
			return this
		}		if (startsWithNode7Node8Node4Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new _AssignmentExpression(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.character()
		}
		if (startsWithNode7Node8Node4Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new _AssignmentExpression(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.character()
		}
		if (startsWithNode7Node8Node4Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new _AssignmentExpression(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node7(content), ...tail]
			return this.character()
		}
		if (startsWithNode6Node4(this.stack)) {
			const content = new _AssignmentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.character()
		}
		if (startsWithNode5Node4(this.stack)) {
			const content = new _AssignmentDivEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.character()
		}
		if (startsWithNode3Node4(this.stack)) {
			const content = new _AssignmentAndEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.character()
		}
		if (startsWithNode1(this.stack)) {
			this.stack = [new Node28(a[0] as string), ...this.stack]
			return this
		}
	}
	complement = (...a: any[]) => {
		if (startsWithNode48Node26(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode48Node25(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode48Node24(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode48Node23(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode48Node22(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode48Node21(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode48Node10(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode48Node9(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode48Node8(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode48Node1(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode45Node26(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode45Node25(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode45Node24(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode45Node23(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode45Node22(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode45Node21(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode45Node10(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode45Node9(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode45Node8(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode45Node1(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode44Node26(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode44Node25(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode44Node24(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode44Node23(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode44Node22(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode44Node21(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode44Node10(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode44Node9(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode44Node8(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode44Node1(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode43Node26(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode43Node25(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode43Node24(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode43Node23(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode43Node22(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode43Node21(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode43Node10(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode43Node9(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode43Node8(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode43Node1(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode41Node26(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode41Node25(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode41Node24(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode41Node23(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode41Node22(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode41Node21(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode41Node10(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode41Node9(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode41Node8(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode41Node1(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode39Node26(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode39Node25(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode39Node24(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode39Node23(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode39Node22(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode39Node21(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode39Node10(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode39Node9(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode39Node8(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode39Node1(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.complement()
		}
		if (startsWithNode38Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.complement()
		}
		if (startsWithNode38Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.complement()
		}
		if (startsWithNode38Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.complement()
		}
		if (startsWithNode38Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.complement()
		}
		if (startsWithNode38Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.complement()
		}
		if (startsWithNode38Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.complement()
		}
		if (startsWithNode38Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.complement()
		}
		if (startsWithNode38Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.complement()
		}
		if (startsWithNode38Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.complement()
		}
		if (startsWithNode38Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.complement()
		}
		if (startsWithNode37Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.complement()
		}
		if (startsWithNode37Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.complement()
		}
		if (startsWithNode37Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.complement()
		}
		if (startsWithNode37Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.complement()
		}
		if (startsWithNode37Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.complement()
		}
		if (startsWithNode37Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.complement()
		}
		if (startsWithNode37Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.complement()
		}
		if (startsWithNode37Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.complement()
		}
		if (startsWithNode37Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.complement()
		}
		if (startsWithNode37Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.complement()
		}
		if (startsWithNode36Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode36Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode36Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode36Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode36Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode36Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode36Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode36Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode36Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode36Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode35Node32Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode35Node32Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode35Node32Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode35Node32Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode35Node32Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode35Node32Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode35Node32Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode35Node32Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode35Node32Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode35Node32Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode34Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode34Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode34Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode34Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode34Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode34Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode34Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode34Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode34Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode34Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode33Node31Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode33Node31Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode33Node31Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode33Node31Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode33Node31Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode33Node31Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode33Node31Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode33Node31Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode33Node31Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode33Node31Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode30Node32(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node35(content), ...tail]
			return this.complement()
		}
		if (startsWithNode30Node31(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node33(content), ...tail]
			return this.complement()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.complement()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.complement()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.complement()
		}
		if (startsWithNode30Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.complement()
		}
		if (startsWithNode30Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.complement()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.complement()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.complement()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.complement()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.complement()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.complement()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node34(content), ...tail]
			return this.complement()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.complement()
		}
		if (startsWithNode28Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.complement()
		}
		if (startsWithNode28Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.complement()
		}
		if (startsWithNode28Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.complement()
		}
		if (startsWithNode28Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.complement()
		}
		if (startsWithNode28Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.complement()
		}
		if (startsWithNode28Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.complement()
		}
		if (startsWithNode28Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.complement()
		}
		if (startsWithNode28Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.complement()
		}
		if (startsWithNode28Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.complement()
		}
		if (startsWithNode28Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.complement()
		}
		if (startsWithNode27Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.complement()
		}
		if (startsWithNode27Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.complement()
		}
		if (startsWithNode27Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.complement()
		}
		if (startsWithNode27Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.complement()
		}
		if (startsWithNode27Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.complement()
		}
		if (startsWithNode27Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.complement()
		}
		if (startsWithNode27Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.complement()
		}
		if (startsWithNode27Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.complement()
		}
		if (startsWithNode27Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.complement()
		}
		if (startsWithNode27Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.complement()
		}
		if (startsWithNode26(this.stack)) {
			this.stack = [new Node41(), ...this.stack]
			return this
		}		if (startsWithNode25(this.stack)) {
			this.stack = [new Node41(), ...this.stack]
			return this
		}		if (startsWithNode24(this.stack)) {
			this.stack = [new Node41(), ...this.stack]
			return this
		}		if (startsWithNode23(this.stack)) {
			this.stack = [new Node41(), ...this.stack]
			return this
		}		if (startsWithNode22(this.stack)) {
			this.stack = [new Node41(), ...this.stack]
			return this
		}		if (startsWithNode21(this.stack)) {
			this.stack = [new Node41(), ...this.stack]
			return this
		}		if (startsWithNode20Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.complement()
		}
		if (startsWithNode20Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.complement()
		}
		if (startsWithNode20Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.complement()
		}
		if (startsWithNode20Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.complement()
		}
		if (startsWithNode20Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.complement()
		}
		if (startsWithNode20Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.complement()
		}
		if (startsWithNode20Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.complement()
		}
		if (startsWithNode20Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.complement()
		}
		if (startsWithNode20Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.complement()
		}
		if (startsWithNode20Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.complement()
		}
		if (startsWithNode19Node4(this.stack)) {
			const content = new _AssignmentXorEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.complement()
		}
		if (startsWithNode18Node4(this.stack)) {
			const content = new _AssignmentRightShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.complement()
		}
		if (startsWithNode17Node4(this.stack)) {
			const content = new _AssignmentPlusEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.complement()
		}
		if (startsWithNode16Node4(this.stack)) {
			const content = new _AssignmentPercentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.complement()
		}
		if (startsWithNode15Node4(this.stack)) {
			const content = new _AssignmentOrEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.complement()
		}
		if (startsWithNode14Node4(this.stack)) {
			const content = new _AssignmentMultiEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.complement()
		}
		if (startsWithNode13Node4(this.stack)) {
			const content = new _AssignmentMinuxEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.complement()
		}
		if (startsWithNode12Node4(this.stack)) {
			const content = new _AssignmentLeftShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.complement()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node34(content), ...tail]
			return this.complement()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.complement()
		}
		if (startsWithNode10(this.stack)) {
			this.stack = [new Node41(), ...this.stack]
			return this
		}		if (startsWithNode9(this.stack)) {
			this.stack = [new Node41(), ...this.stack]
			return this
		}		if (startsWithNode8(this.stack)) {
			this.stack = [new Node41(), ...this.stack]
			return this
		}		if (startsWithNode7Node8Node4Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new _AssignmentExpression(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.complement()
		}
		if (startsWithNode7Node8Node4Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new _AssignmentExpression(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.complement()
		}
		if (startsWithNode7Node8Node4Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new _AssignmentExpression(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node7(content), ...tail]
			return this.complement()
		}
		if (startsWithNode6Node4(this.stack)) {
			const content = new _AssignmentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.complement()
		}
		if (startsWithNode5Node4(this.stack)) {
			const content = new _AssignmentDivEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.complement()
		}
		if (startsWithNode3Node4(this.stack)) {
			const content = new _AssignmentAndEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.complement()
		}
		if (startsWithNode1(this.stack)) {
			this.stack = [new Node41(), ...this.stack]
			return this
		}
	}
	divEqual = (...a: any[]) => {
		if (startsWithNode49Node26Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode49Node26Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode49Node26Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode49Node26Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode49Node26Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode49Node26Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode49Node26Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode49Node26Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode49Node26Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode49Node26Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode47Node25Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode47Node25Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode47Node25Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode47Node25Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode47Node25Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode47Node25Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode47Node22Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode47Node25Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode47Node25Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode47Node25Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode46Node23Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode46Node23Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode46Node23Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode46Node23Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode46Node23Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode46Node23Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode46Node23Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode46Node23Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode46Node23Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode46Node23Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode42Node24Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode42Node24Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode42Node24Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode42Node24Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode42Node24Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode42Node24Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode42Node21Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode42Node24Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode42Node24Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode42Node24Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode40Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryCastExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node46(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode38Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode38Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode38Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode38Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode38Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode38Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode38Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode38Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode38Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode38Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode37Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode37Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode37Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode37Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode37Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode37Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode37Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode37Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode37Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode37Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode36Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode36Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode36Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode36Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode36Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode36Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode36Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode36Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode36Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode36Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode35Node32Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode35Node32Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode35Node32Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode35Node32Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode35Node32Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode35Node32Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode35Node32Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode35Node32Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode35Node32Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode35Node32Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode34Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode34Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode34Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode34Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode34Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode34Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode34Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode34Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode34Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode34Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode33Node31Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode33Node31Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode33Node31Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode33Node31Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode33Node31Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode33Node31Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode33Node31Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode33Node31Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode33Node31Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode33Node31Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode30Node32(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node35(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode30Node31(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node33(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode30Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode30Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node34(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode28Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode28Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode28Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode28Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode28Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode28Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode28Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode28Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode28Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode28Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode27Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode27Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode27Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode27Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode27Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode27Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode27Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode27Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode27Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode27Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode22Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode22Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode22Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode22Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode22Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode22Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode22Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode22Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode22Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode22Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode21Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode21Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode21Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode21Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode21Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode21Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode21Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode21Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode21Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode21Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode20Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode20Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode20Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode20Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode20Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode20Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode20Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode20Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode20Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode20Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node34(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode10Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node49(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode10Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node47(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode10Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode10Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode10Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node47(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode10Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode10Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode10Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode10Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode10Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node2(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode4(this.stack)) {
			this.stack = [new Node5(), ...this.stack]
			return this
		}
	}
	dot = (...a: any[]) => {
		if (startsWithNode38Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.dot()
		}
		if (startsWithNode38Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.dot()
		}
		if (startsWithNode38Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.dot()
		}
		if (startsWithNode38Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.dot()
		}
		if (startsWithNode38Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.dot()
		}
		if (startsWithNode38Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.dot()
		}
		if (startsWithNode38Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.dot()
		}
		if (startsWithNode38Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.dot()
		}
		if (startsWithNode38Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.dot()
		}
		if (startsWithNode38Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.dot()
		}
		if (startsWithNode37Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.dot()
		}
		if (startsWithNode37Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.dot()
		}
		if (startsWithNode37Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.dot()
		}
		if (startsWithNode37Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.dot()
		}
		if (startsWithNode37Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.dot()
		}
		if (startsWithNode37Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.dot()
		}
		if (startsWithNode37Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.dot()
		}
		if (startsWithNode37Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.dot()
		}
		if (startsWithNode37Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.dot()
		}
		if (startsWithNode37Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.dot()
		}
		if (startsWithNode36Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode36Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode36Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode36Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode36Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode36Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode36Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode36Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode36Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode36Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode35Node32Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode35Node32Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode35Node32Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode35Node32Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode35Node32Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode35Node32Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode35Node32Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode35Node32Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode35Node32Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode35Node32Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode34Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode34Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode34Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode34Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode34Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode34Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode34Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode34Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode34Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode34Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode33Node31Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode33Node31Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode33Node31Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode33Node31Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode33Node31Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode33Node31Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode33Node31Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode33Node31Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode33Node31Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode33Node31Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode30Node32(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node35(content), ...tail]
			return this.dot()
		}
		if (startsWithNode30Node31(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node33(content), ...tail]
			return this.dot()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.dot()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.dot()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.dot()
		}
		if (startsWithNode30Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.dot()
		}
		if (startsWithNode30Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.dot()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.dot()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.dot()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.dot()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.dot()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.dot()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node34(content), ...tail]
			return this.dot()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.dot()
		}
		if (startsWithNode28Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.dot()
		}
		if (startsWithNode28Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.dot()
		}
		if (startsWithNode28Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.dot()
		}
		if (startsWithNode28Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.dot()
		}
		if (startsWithNode28Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.dot()
		}
		if (startsWithNode28Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.dot()
		}
		if (startsWithNode28Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.dot()
		}
		if (startsWithNode28Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.dot()
		}
		if (startsWithNode28Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.dot()
		}
		if (startsWithNode28Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.dot()
		}
		if (startsWithNode27Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.dot()
		}
		if (startsWithNode27Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.dot()
		}
		if (startsWithNode27Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.dot()
		}
		if (startsWithNode27Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.dot()
		}
		if (startsWithNode27Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.dot()
		}
		if (startsWithNode27Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.dot()
		}
		if (startsWithNode27Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.dot()
		}
		if (startsWithNode27Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.dot()
		}
		if (startsWithNode27Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.dot()
		}
		if (startsWithNode27Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.dot()
		}
		if (startsWithNode22Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode22Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode22Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode22Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode22Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode22Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode22Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode22Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode22Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode22Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode21Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode21Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode21Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode21Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode21Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode21Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode21Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode21Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode21Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode21Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode20Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.dot()
		}
		if (startsWithNode20Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.dot()
		}
		if (startsWithNode20Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.dot()
		}
		if (startsWithNode20Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.dot()
		}
		if (startsWithNode20Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.dot()
		}
		if (startsWithNode20Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.dot()
		}
		if (startsWithNode20Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.dot()
		}
		if (startsWithNode20Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.dot()
		}
		if (startsWithNode20Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.dot()
		}
		if (startsWithNode20Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.dot()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node34(content), ...tail]
			return this.dot()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.dot()
		}
		if (startsWithNode10(this.stack)) {
			this.stack = [new Node32(), ...this.stack]
			return this
		}
	}
	end = (...a: any[]) => {
		if (startsWithNode49Node26Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.end()
		}
		if (startsWithNode49Node26Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.end()
		}
		if (startsWithNode49Node26Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.end()
		}
		if (startsWithNode49Node26Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.end()
		}
		if (startsWithNode49Node26Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.end()
		}
		if (startsWithNode49Node26Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.end()
		}
		if (startsWithNode49Node26Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.end()
		}
		if (startsWithNode49Node26Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.end()
		}
		if (startsWithNode49Node26Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.end()
		}
		if (startsWithNode49Node26Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.end()
		}
		if (startsWithNode47Node25Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.end()
		}
		if (startsWithNode47Node25Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.end()
		}
		if (startsWithNode47Node25Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.end()
		}
		if (startsWithNode47Node25Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.end()
		}
		if (startsWithNode47Node25Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.end()
		}
		if (startsWithNode47Node25Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.end()
		}
		if (startsWithNode47Node22Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.end()
		}
		if (startsWithNode47Node25Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.end()
		}
		if (startsWithNode47Node25Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.end()
		}
		if (startsWithNode47Node25Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.end()
		}
		if (startsWithNode46Node23Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.end()
		}
		if (startsWithNode46Node23Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.end()
		}
		if (startsWithNode46Node23Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.end()
		}
		if (startsWithNode46Node23Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.end()
		}
		if (startsWithNode46Node23Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.end()
		}
		if (startsWithNode46Node23Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.end()
		}
		if (startsWithNode46Node23Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.end()
		}
		if (startsWithNode46Node23Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.end()
		}
		if (startsWithNode46Node23Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.end()
		}
		if (startsWithNode46Node23Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.end()
		}
		if (startsWithNode42Node24Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.end()
		}
		if (startsWithNode42Node24Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.end()
		}
		if (startsWithNode42Node24Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.end()
		}
		if (startsWithNode42Node24Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.end()
		}
		if (startsWithNode42Node24Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.end()
		}
		if (startsWithNode42Node24Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.end()
		}
		if (startsWithNode42Node21Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.end()
		}
		if (startsWithNode42Node24Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.end()
		}
		if (startsWithNode42Node24Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.end()
		}
		if (startsWithNode42Node24Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.end()
		}
		if (startsWithNode40Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryCastExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node46(content), ...tail]
			return this.end()
		}
		if (startsWithNode38Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.end()
		}
		if (startsWithNode38Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.end()
		}
		if (startsWithNode38Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.end()
		}
		if (startsWithNode38Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.end()
		}
		if (startsWithNode38Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.end()
		}
		if (startsWithNode38Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.end()
		}
		if (startsWithNode38Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.end()
		}
		if (startsWithNode38Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.end()
		}
		if (startsWithNode38Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.end()
		}
		if (startsWithNode38Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.end()
		}
		if (startsWithNode37Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.end()
		}
		if (startsWithNode37Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.end()
		}
		if (startsWithNode37Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.end()
		}
		if (startsWithNode37Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.end()
		}
		if (startsWithNode37Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.end()
		}
		if (startsWithNode37Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.end()
		}
		if (startsWithNode37Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.end()
		}
		if (startsWithNode37Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.end()
		}
		if (startsWithNode37Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.end()
		}
		if (startsWithNode37Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.end()
		}
		if (startsWithNode36Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode36Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode36Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode36Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode36Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode36Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode36Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode36Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode36Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode36Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode35Node32Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode35Node32Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode35Node32Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode35Node32Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode35Node32Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode35Node32Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode35Node32Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode35Node32Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode35Node32Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode35Node32Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode34Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode34Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode34Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode34Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode34Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode34Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode34Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode34Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode34Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode34Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode33Node31Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode33Node31Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode33Node31Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode33Node31Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode33Node31Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode33Node31Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode33Node31Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode33Node31Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode33Node31Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode33Node31Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode30Node32(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node35(content), ...tail]
			return this.end()
		}
		if (startsWithNode30Node31(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node33(content), ...tail]
			return this.end()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.end()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.end()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.end()
		}
		if (startsWithNode30Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.end()
		}
		if (startsWithNode30Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.end()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.end()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.end()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.end()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.end()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.end()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node34(content), ...tail]
			return this.end()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.end()
		}
		if (startsWithNode28Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.end()
		}
		if (startsWithNode28Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.end()
		}
		if (startsWithNode28Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.end()
		}
		if (startsWithNode28Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.end()
		}
		if (startsWithNode28Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.end()
		}
		if (startsWithNode28Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.end()
		}
		if (startsWithNode28Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.end()
		}
		if (startsWithNode28Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.end()
		}
		if (startsWithNode28Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.end()
		}
		if (startsWithNode28Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.end()
		}
		if (startsWithNode27Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.end()
		}
		if (startsWithNode27Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.end()
		}
		if (startsWithNode27Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.end()
		}
		if (startsWithNode27Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.end()
		}
		if (startsWithNode27Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.end()
		}
		if (startsWithNode27Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.end()
		}
		if (startsWithNode27Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.end()
		}
		if (startsWithNode27Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.end()
		}
		if (startsWithNode27Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.end()
		}
		if (startsWithNode27Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.end()
		}
		if (startsWithNode22Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode22Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode22Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode22Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode22Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode22Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode22Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode22Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode22Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode22Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode21Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode21Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode21Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode21Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode21Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode21Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode21Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode21Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode21Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode21Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode20Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.end()
		}
		if (startsWithNode20Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.end()
		}
		if (startsWithNode20Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.end()
		}
		if (startsWithNode20Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.end()
		}
		if (startsWithNode20Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.end()
		}
		if (startsWithNode20Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.end()
		}
		if (startsWithNode20Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.end()
		}
		if (startsWithNode20Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.end()
		}
		if (startsWithNode20Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.end()
		}
		if (startsWithNode20Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.end()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node34(content), ...tail]
			return this.end()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.end()
		}
		if (startsWithNode10Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node49(content), ...tail]
			return this.end()
		}
		if (startsWithNode10Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node47(content), ...tail]
			return this.end()
		}
		if (startsWithNode10Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.end()
		}
		if (startsWithNode10Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.end()
		}
		if (startsWithNode10Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node47(content), ...tail]
			return this.end()
		}
		if (startsWithNode10Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.end()
		}
		if (startsWithNode10Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.end()
		}
		if (startsWithNode10Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.end()
		}
		if (startsWithNode10Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.end()
		}
		if (startsWithNode10Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node2(content), ...tail]
			return this.end()
		}
		if (startsWithNode2(this.stack)) {
			return this.stack[0].arg1
		}
	}
	euaql = (...a: any[]) => {
		if (startsWithNode49Node26Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode49Node26Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode49Node26Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode49Node26Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode49Node26Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode49Node26Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode49Node26Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode49Node26Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode49Node26Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode49Node26Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode47Node25Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode47Node25Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode47Node25Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode47Node25Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode47Node25Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode47Node25Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode47Node22Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode47Node25Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode47Node25Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode47Node25Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode46Node23Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode46Node23Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode46Node23Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode46Node23Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode46Node23Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode46Node23Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode46Node23Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode46Node23Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode46Node23Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode46Node23Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode42Node24Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode42Node24Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode42Node24Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode42Node24Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode42Node24Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode42Node24Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode42Node21Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode42Node24Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode42Node24Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode42Node24Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode40Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryCastExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node46(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode38Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode38Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode38Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode38Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode38Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode38Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode38Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode38Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode38Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode38Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode37Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode37Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode37Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode37Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode37Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode37Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode37Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode37Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode37Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode37Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode36Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode36Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode36Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode36Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode36Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode36Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode36Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode36Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode36Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode36Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode35Node32Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode35Node32Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode35Node32Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode35Node32Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode35Node32Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode35Node32Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode35Node32Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode35Node32Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode35Node32Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode35Node32Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode34Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode34Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode34Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode34Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode34Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode34Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode34Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode34Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode34Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode34Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode33Node31Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode33Node31Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode33Node31Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode33Node31Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode33Node31Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode33Node31Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode33Node31Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode33Node31Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode33Node31Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode33Node31Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode30Node32(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node35(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode30Node31(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node33(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode30Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode30Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node34(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode28Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode28Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode28Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode28Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode28Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode28Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode28Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode28Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode28Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode28Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode27Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode27Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode27Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode27Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode27Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode27Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode27Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode27Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode27Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode27Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode22Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode22Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode22Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode22Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode22Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode22Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode22Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode22Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode22Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode22Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode21Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode21Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode21Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode21Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode21Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode21Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode21Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode21Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode21Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode21Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode20Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode20Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode20Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode20Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode20Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode20Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode20Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode20Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode20Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode20Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node34(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode10Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node49(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode10Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node47(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode10Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode10Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode10Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node47(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode10Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode10Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode10Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode10Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode10Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node2(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode4(this.stack)) {
			this.stack = [new Node6(), ...this.stack]
			return this
		}
	}
	floating = (...a: any[]) => {
		if (startsWithNode48Node26(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode48Node25(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode48Node24(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode48Node23(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode48Node22(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode48Node21(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode48Node10(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode48Node9(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode48Node8(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode48Node1(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode45Node26(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode45Node25(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode45Node24(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode45Node23(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode45Node22(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode45Node21(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode45Node10(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode45Node9(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode45Node8(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode45Node1(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode44Node26(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode44Node25(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode44Node24(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode44Node23(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode44Node22(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode44Node21(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode44Node10(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode44Node9(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode44Node8(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode44Node1(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode43Node26(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode43Node25(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode43Node24(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode43Node23(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode43Node22(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode43Node21(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode43Node10(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode43Node9(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode43Node8(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode43Node1(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode41Node26(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode41Node25(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode41Node24(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode41Node23(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode41Node22(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode41Node21(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode41Node10(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode41Node9(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode41Node8(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode41Node1(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode39Node26(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode39Node25(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode39Node24(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode39Node23(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode39Node22(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode39Node21(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode39Node10(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode39Node9(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode39Node8(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode39Node1(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.floating()
		}
		if (startsWithNode38Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.floating()
		}
		if (startsWithNode38Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.floating()
		}
		if (startsWithNode38Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.floating()
		}
		if (startsWithNode38Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.floating()
		}
		if (startsWithNode38Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.floating()
		}
		if (startsWithNode38Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.floating()
		}
		if (startsWithNode38Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.floating()
		}
		if (startsWithNode38Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.floating()
		}
		if (startsWithNode38Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.floating()
		}
		if (startsWithNode38Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.floating()
		}
		if (startsWithNode37Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.floating()
		}
		if (startsWithNode37Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.floating()
		}
		if (startsWithNode37Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.floating()
		}
		if (startsWithNode37Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.floating()
		}
		if (startsWithNode37Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.floating()
		}
		if (startsWithNode37Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.floating()
		}
		if (startsWithNode37Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.floating()
		}
		if (startsWithNode37Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.floating()
		}
		if (startsWithNode37Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.floating()
		}
		if (startsWithNode37Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.floating()
		}
		if (startsWithNode36Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode36Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode36Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode36Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode36Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode36Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode36Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode36Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode36Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode36Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode35Node32Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode35Node32Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode35Node32Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode35Node32Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode35Node32Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode35Node32Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode35Node32Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode35Node32Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode35Node32Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode35Node32Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode34Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode34Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode34Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode34Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode34Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode34Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode34Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode34Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode34Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode34Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode33Node31Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode33Node31Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode33Node31Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode33Node31Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode33Node31Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode33Node31Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode33Node31Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode33Node31Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode33Node31Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode33Node31Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode30Node32(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node35(content), ...tail]
			return this.floating()
		}
		if (startsWithNode30Node31(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node33(content), ...tail]
			return this.floating()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.floating()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.floating()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.floating()
		}
		if (startsWithNode30Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.floating()
		}
		if (startsWithNode30Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.floating()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.floating()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.floating()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.floating()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.floating()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.floating()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node34(content), ...tail]
			return this.floating()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.floating()
		}
		if (startsWithNode28Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.floating()
		}
		if (startsWithNode28Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.floating()
		}
		if (startsWithNode28Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.floating()
		}
		if (startsWithNode28Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.floating()
		}
		if (startsWithNode28Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.floating()
		}
		if (startsWithNode28Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.floating()
		}
		if (startsWithNode28Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.floating()
		}
		if (startsWithNode28Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.floating()
		}
		if (startsWithNode28Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.floating()
		}
		if (startsWithNode28Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.floating()
		}
		if (startsWithNode27Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.floating()
		}
		if (startsWithNode27Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.floating()
		}
		if (startsWithNode27Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.floating()
		}
		if (startsWithNode27Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.floating()
		}
		if (startsWithNode27Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.floating()
		}
		if (startsWithNode27Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.floating()
		}
		if (startsWithNode27Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.floating()
		}
		if (startsWithNode27Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.floating()
		}
		if (startsWithNode27Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.floating()
		}
		if (startsWithNode27Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.floating()
		}
		if (startsWithNode26(this.stack)) {
			this.stack = [new Node20(a[0] as number), ...this.stack]
			return this
		}		if (startsWithNode25(this.stack)) {
			this.stack = [new Node20(a[0] as number), ...this.stack]
			return this
		}		if (startsWithNode24(this.stack)) {
			this.stack = [new Node20(a[0] as number), ...this.stack]
			return this
		}		if (startsWithNode23(this.stack)) {
			this.stack = [new Node20(a[0] as number), ...this.stack]
			return this
		}		if (startsWithNode22(this.stack)) {
			this.stack = [new Node20(a[0] as number), ...this.stack]
			return this
		}		if (startsWithNode21(this.stack)) {
			this.stack = [new Node20(a[0] as number), ...this.stack]
			return this
		}		if (startsWithNode20Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.floating()
		}
		if (startsWithNode20Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.floating()
		}
		if (startsWithNode20Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.floating()
		}
		if (startsWithNode20Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.floating()
		}
		if (startsWithNode20Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.floating()
		}
		if (startsWithNode20Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.floating()
		}
		if (startsWithNode20Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.floating()
		}
		if (startsWithNode20Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.floating()
		}
		if (startsWithNode20Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.floating()
		}
		if (startsWithNode20Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.floating()
		}
		if (startsWithNode19Node4(this.stack)) {
			const content = new _AssignmentXorEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.floating()
		}
		if (startsWithNode18Node4(this.stack)) {
			const content = new _AssignmentRightShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.floating()
		}
		if (startsWithNode17Node4(this.stack)) {
			const content = new _AssignmentPlusEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.floating()
		}
		if (startsWithNode16Node4(this.stack)) {
			const content = new _AssignmentPercentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.floating()
		}
		if (startsWithNode15Node4(this.stack)) {
			const content = new _AssignmentOrEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.floating()
		}
		if (startsWithNode14Node4(this.stack)) {
			const content = new _AssignmentMultiEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.floating()
		}
		if (startsWithNode13Node4(this.stack)) {
			const content = new _AssignmentMinuxEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.floating()
		}
		if (startsWithNode12Node4(this.stack)) {
			const content = new _AssignmentLeftShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.floating()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node34(content), ...tail]
			return this.floating()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.floating()
		}
		if (startsWithNode10(this.stack)) {
			this.stack = [new Node20(a[0] as number), ...this.stack]
			return this
		}		if (startsWithNode9(this.stack)) {
			this.stack = [new Node20(a[0] as number), ...this.stack]
			return this
		}		if (startsWithNode8(this.stack)) {
			this.stack = [new Node20(a[0] as number), ...this.stack]
			return this
		}		if (startsWithNode7Node8Node4Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new _AssignmentExpression(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.floating()
		}
		if (startsWithNode7Node8Node4Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new _AssignmentExpression(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.floating()
		}
		if (startsWithNode7Node8Node4Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new _AssignmentExpression(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node7(content), ...tail]
			return this.floating()
		}
		if (startsWithNode6Node4(this.stack)) {
			const content = new _AssignmentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.floating()
		}
		if (startsWithNode5Node4(this.stack)) {
			const content = new _AssignmentDivEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.floating()
		}
		if (startsWithNode3Node4(this.stack)) {
			const content = new _AssignmentAndEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.floating()
		}
		if (startsWithNode1(this.stack)) {
			this.stack = [new Node20(a[0] as number), ...this.stack]
			return this
		}
	}
	identifier = (...a: any[]) => {
		if (startsWithNode48Node26(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode48Node25(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode48Node24(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode48Node23(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode48Node22(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode48Node21(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode48Node10(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode48Node9(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode48Node8(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode48Node1(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode45Node26(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode45Node25(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode45Node24(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode45Node23(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode45Node22(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode45Node21(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode45Node10(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode45Node9(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode45Node8(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode45Node1(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode44Node26(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode44Node25(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode44Node24(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode44Node23(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode44Node22(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode44Node21(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode44Node10(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode44Node9(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode44Node8(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode44Node1(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode43Node26(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode43Node25(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode43Node24(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode43Node23(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode43Node22(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode43Node21(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode43Node10(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode43Node9(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode43Node8(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode43Node1(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode41Node26(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode41Node25(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode41Node24(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode41Node23(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode41Node22(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode41Node21(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode41Node10(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode41Node9(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode41Node8(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode41Node1(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode39Node26(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode39Node25(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode39Node24(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode39Node23(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode39Node22(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode39Node21(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode39Node10(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode39Node9(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode39Node8(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode39Node1(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode38Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode38Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode38Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode38Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode38Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode38Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode38Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode38Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode38Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode38Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode37Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode37Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode37Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode37Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode37Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode37Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode37Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode37Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode37Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode37Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode36Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode36Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode36Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode36Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode36Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode36Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode36Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode36Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode36Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode36Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode35Node32Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode35Node32Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode35Node32Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode35Node32Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode35Node32Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode35Node32Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode35Node32Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode35Node32Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode35Node32Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode35Node32Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode34Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode34Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode34Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode34Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode34Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode34Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode34Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode34Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode34Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode34Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode33Node31Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode33Node31Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode33Node31Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode33Node31Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode33Node31Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode33Node31Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode33Node31Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode33Node31Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode33Node31Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode33Node31Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode32(this.stack)) {
			this.stack = [new Node30(a[0] as string), ...this.stack]
			return this
		}		if (startsWithNode31(this.stack)) {
			this.stack = [new Node30(a[0] as string), ...this.stack]
			return this
		}		if (startsWithNode30Node32(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node35(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode30Node31(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node33(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode30Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode30Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node34(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode28Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode28Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode28Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode28Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode28Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode28Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode28Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode28Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode28Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode28Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode27Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode27Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode27Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode27Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode27Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode27Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode27Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode27Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode27Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode27Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode26(this.stack)) {
			this.stack = [new Node30(a[0] as string), ...this.stack]
			return this
		}		if (startsWithNode25(this.stack)) {
			this.stack = [new Node30(a[0] as string), ...this.stack]
			return this
		}		if (startsWithNode24(this.stack)) {
			this.stack = [new Node30(a[0] as string), ...this.stack]
			return this
		}		if (startsWithNode23(this.stack)) {
			this.stack = [new Node30(a[0] as string), ...this.stack]
			return this
		}		if (startsWithNode22(this.stack)) {
			this.stack = [new Node30(a[0] as string), ...this.stack]
			return this
		}		if (startsWithNode21(this.stack)) {
			this.stack = [new Node30(a[0] as string), ...this.stack]
			return this
		}		if (startsWithNode20Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode20Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode20Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode20Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode20Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode20Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode20Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode20Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode20Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode20Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode19Node4(this.stack)) {
			const content = new _AssignmentXorEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode18Node4(this.stack)) {
			const content = new _AssignmentRightShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode17Node4(this.stack)) {
			const content = new _AssignmentPlusEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode16Node4(this.stack)) {
			const content = new _AssignmentPercentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode15Node4(this.stack)) {
			const content = new _AssignmentOrEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode14Node4(this.stack)) {
			const content = new _AssignmentMultiEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode13Node4(this.stack)) {
			const content = new _AssignmentMinuxEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode12Node4(this.stack)) {
			const content = new _AssignmentLeftShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node34(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode10(this.stack)) {
			this.stack = [new Node30(a[0] as string), ...this.stack]
			return this
		}		if (startsWithNode9(this.stack)) {
			this.stack = [new Node30(a[0] as string), ...this.stack]
			return this
		}		if (startsWithNode8(this.stack)) {
			this.stack = [new Node30(a[0] as string), ...this.stack]
			return this
		}		if (startsWithNode7Node8Node4Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new _AssignmentExpression(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode7Node8Node4Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new _AssignmentExpression(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode7Node8Node4Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new _AssignmentExpression(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node7(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode6Node4(this.stack)) {
			const content = new _AssignmentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode5Node4(this.stack)) {
			const content = new _AssignmentDivEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode3Node4(this.stack)) {
			const content = new _AssignmentAndEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.identifier()
		}
		if (startsWithNode1(this.stack)) {
			this.stack = [new Node30(a[0] as string), ...this.stack]
			return this
		}
	}
	integer = (...a: any[]) => {
		if (startsWithNode48Node26(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode48Node25(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode48Node24(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode48Node23(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode48Node22(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode48Node21(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode48Node10(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode48Node9(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode48Node8(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode48Node1(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode45Node26(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode45Node25(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode45Node24(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode45Node23(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode45Node22(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode45Node21(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode45Node10(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode45Node9(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode45Node8(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode45Node1(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode44Node26(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode44Node25(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode44Node24(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode44Node23(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode44Node22(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode44Node21(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode44Node10(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode44Node9(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode44Node8(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode44Node1(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode43Node26(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode43Node25(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode43Node24(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode43Node23(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode43Node22(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode43Node21(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode43Node10(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode43Node9(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode43Node8(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode43Node1(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode41Node26(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode41Node25(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode41Node24(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode41Node23(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode41Node22(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode41Node21(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode41Node10(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode41Node9(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode41Node8(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode41Node1(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode39Node26(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode39Node25(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode39Node24(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode39Node23(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode39Node22(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode39Node21(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode39Node10(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode39Node9(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode39Node8(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode39Node1(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.integer()
		}
		if (startsWithNode38Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.integer()
		}
		if (startsWithNode38Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.integer()
		}
		if (startsWithNode38Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.integer()
		}
		if (startsWithNode38Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.integer()
		}
		if (startsWithNode38Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.integer()
		}
		if (startsWithNode38Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.integer()
		}
		if (startsWithNode38Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.integer()
		}
		if (startsWithNode38Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.integer()
		}
		if (startsWithNode38Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.integer()
		}
		if (startsWithNode38Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.integer()
		}
		if (startsWithNode37Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.integer()
		}
		if (startsWithNode37Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.integer()
		}
		if (startsWithNode37Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.integer()
		}
		if (startsWithNode37Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.integer()
		}
		if (startsWithNode37Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.integer()
		}
		if (startsWithNode37Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.integer()
		}
		if (startsWithNode37Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.integer()
		}
		if (startsWithNode37Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.integer()
		}
		if (startsWithNode37Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.integer()
		}
		if (startsWithNode37Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.integer()
		}
		if (startsWithNode36Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode36Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode36Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode36Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode36Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode36Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode36Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode36Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode36Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode36Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode35Node32Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode35Node32Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode35Node32Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode35Node32Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode35Node32Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode35Node32Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode35Node32Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode35Node32Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode35Node32Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode35Node32Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode34Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode34Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode34Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode34Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode34Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode34Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode34Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode34Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode34Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode34Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode33Node31Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode33Node31Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode33Node31Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode33Node31Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode33Node31Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode33Node31Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode33Node31Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode33Node31Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode33Node31Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode33Node31Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode30Node32(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node35(content), ...tail]
			return this.integer()
		}
		if (startsWithNode30Node31(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node33(content), ...tail]
			return this.integer()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.integer()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.integer()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.integer()
		}
		if (startsWithNode30Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.integer()
		}
		if (startsWithNode30Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.integer()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.integer()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.integer()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.integer()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.integer()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.integer()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node34(content), ...tail]
			return this.integer()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.integer()
		}
		if (startsWithNode28Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.integer()
		}
		if (startsWithNode28Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.integer()
		}
		if (startsWithNode28Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.integer()
		}
		if (startsWithNode28Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.integer()
		}
		if (startsWithNode28Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.integer()
		}
		if (startsWithNode28Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.integer()
		}
		if (startsWithNode28Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.integer()
		}
		if (startsWithNode28Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.integer()
		}
		if (startsWithNode28Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.integer()
		}
		if (startsWithNode28Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.integer()
		}
		if (startsWithNode27Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.integer()
		}
		if (startsWithNode27Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.integer()
		}
		if (startsWithNode27Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.integer()
		}
		if (startsWithNode27Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.integer()
		}
		if (startsWithNode27Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.integer()
		}
		if (startsWithNode27Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.integer()
		}
		if (startsWithNode27Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.integer()
		}
		if (startsWithNode27Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.integer()
		}
		if (startsWithNode27Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.integer()
		}
		if (startsWithNode27Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.integer()
		}
		if (startsWithNode26(this.stack)) {
			this.stack = [new Node27(a[0] as number), ...this.stack]
			return this
		}		if (startsWithNode25(this.stack)) {
			this.stack = [new Node27(a[0] as number), ...this.stack]
			return this
		}		if (startsWithNode24(this.stack)) {
			this.stack = [new Node27(a[0] as number), ...this.stack]
			return this
		}		if (startsWithNode23(this.stack)) {
			this.stack = [new Node27(a[0] as number), ...this.stack]
			return this
		}		if (startsWithNode22(this.stack)) {
			this.stack = [new Node27(a[0] as number), ...this.stack]
			return this
		}		if (startsWithNode21(this.stack)) {
			this.stack = [new Node27(a[0] as number), ...this.stack]
			return this
		}		if (startsWithNode20Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.integer()
		}
		if (startsWithNode20Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.integer()
		}
		if (startsWithNode20Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.integer()
		}
		if (startsWithNode20Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.integer()
		}
		if (startsWithNode20Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.integer()
		}
		if (startsWithNode20Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.integer()
		}
		if (startsWithNode20Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.integer()
		}
		if (startsWithNode20Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.integer()
		}
		if (startsWithNode20Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.integer()
		}
		if (startsWithNode20Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.integer()
		}
		if (startsWithNode19Node4(this.stack)) {
			const content = new _AssignmentXorEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.integer()
		}
		if (startsWithNode18Node4(this.stack)) {
			const content = new _AssignmentRightShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.integer()
		}
		if (startsWithNode17Node4(this.stack)) {
			const content = new _AssignmentPlusEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.integer()
		}
		if (startsWithNode16Node4(this.stack)) {
			const content = new _AssignmentPercentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.integer()
		}
		if (startsWithNode15Node4(this.stack)) {
			const content = new _AssignmentOrEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.integer()
		}
		if (startsWithNode14Node4(this.stack)) {
			const content = new _AssignmentMultiEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.integer()
		}
		if (startsWithNode13Node4(this.stack)) {
			const content = new _AssignmentMinuxEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.integer()
		}
		if (startsWithNode12Node4(this.stack)) {
			const content = new _AssignmentLeftShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.integer()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node34(content), ...tail]
			return this.integer()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.integer()
		}
		if (startsWithNode10(this.stack)) {
			this.stack = [new Node27(a[0] as number), ...this.stack]
			return this
		}		if (startsWithNode9(this.stack)) {
			this.stack = [new Node27(a[0] as number), ...this.stack]
			return this
		}		if (startsWithNode8(this.stack)) {
			this.stack = [new Node27(a[0] as number), ...this.stack]
			return this
		}		if (startsWithNode7Node8Node4Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new _AssignmentExpression(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.integer()
		}
		if (startsWithNode7Node8Node4Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new _AssignmentExpression(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.integer()
		}
		if (startsWithNode7Node8Node4Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new _AssignmentExpression(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node7(content), ...tail]
			return this.integer()
		}
		if (startsWithNode6Node4(this.stack)) {
			const content = new _AssignmentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.integer()
		}
		if (startsWithNode5Node4(this.stack)) {
			const content = new _AssignmentDivEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.integer()
		}
		if (startsWithNode3Node4(this.stack)) {
			const content = new _AssignmentAndEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.integer()
		}
		if (startsWithNode1(this.stack)) {
			this.stack = [new Node27(a[0] as number), ...this.stack]
			return this
		}
	}
	leftShiftEqual = (...a: any[]) => {
		if (startsWithNode49Node26Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode49Node26Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode49Node26Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode49Node26Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode49Node26Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode49Node26Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode49Node26Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode49Node26Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode49Node26Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode49Node26Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode47Node25Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode47Node25Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode47Node25Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode47Node25Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode47Node25Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode47Node25Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode47Node22Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode47Node25Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode47Node25Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode47Node25Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode46Node23Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode46Node23Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode46Node23Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode46Node23Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode46Node23Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode46Node23Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode46Node23Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode46Node23Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode46Node23Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode46Node23Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode42Node24Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode42Node24Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode42Node24Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode42Node24Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode42Node24Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode42Node24Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode42Node21Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode42Node24Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode42Node24Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode42Node24Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode40Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryCastExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node46(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode38Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode38Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode38Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode38Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode38Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode38Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode38Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode38Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode38Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode38Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode37Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode37Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode37Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode37Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode37Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode37Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode37Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode37Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode37Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode37Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode36Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode36Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode36Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode36Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode36Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode36Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode36Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode36Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode36Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode36Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode35Node32Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode35Node32Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode35Node32Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode35Node32Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode35Node32Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode35Node32Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode35Node32Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode35Node32Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode35Node32Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode35Node32Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode34Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode34Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode34Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode34Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode34Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode34Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode34Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode34Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode34Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode34Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode33Node31Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode33Node31Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode33Node31Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode33Node31Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode33Node31Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode33Node31Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode33Node31Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode33Node31Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode33Node31Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode33Node31Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode30Node32(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node35(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode30Node31(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node33(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode30Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode30Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node34(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode28Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode28Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode28Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode28Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode28Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode28Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode28Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode28Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode28Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode28Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode27Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode27Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode27Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode27Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode27Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode27Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode27Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode27Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode27Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode27Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode22Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode22Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode22Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode22Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode22Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode22Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode22Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode22Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode22Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode22Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode21Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode21Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode21Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode21Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode21Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode21Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode21Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode21Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode21Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode21Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode20Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode20Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode20Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode20Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode20Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode20Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode20Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode20Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode20Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode20Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node34(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode10Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node49(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode10Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node47(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode10Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode10Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode10Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node47(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode10Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode10Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode10Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode10Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode10Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node2(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode4(this.stack)) {
			this.stack = [new Node12(), ...this.stack]
			return this
		}
	}
	minus = (...a: any[]) => {
		if (startsWithNode48Node26(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode48Node25(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode48Node24(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode48Node23(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode48Node22(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode48Node21(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode48Node10(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode48Node9(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode48Node8(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode48Node1(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode45Node26(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode45Node25(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode45Node24(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode45Node23(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode45Node22(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode45Node21(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode45Node10(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode45Node9(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode45Node8(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode45Node1(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode44Node26(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode44Node25(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode44Node24(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode44Node23(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode44Node22(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode44Node21(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode44Node10(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode44Node9(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode44Node8(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode44Node1(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode43Node26(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode43Node25(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode43Node24(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode43Node23(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode43Node22(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode43Node21(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode43Node10(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode43Node9(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode43Node8(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode43Node1(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode41Node26(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode41Node25(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode41Node24(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode41Node23(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode41Node22(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode41Node21(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode41Node10(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode41Node9(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode41Node8(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode41Node1(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode39Node26(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode39Node25(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode39Node24(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode39Node23(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode39Node22(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode39Node21(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode39Node10(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode39Node9(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode39Node8(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode39Node1(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minus()
		}
		if (startsWithNode38Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minus()
		}
		if (startsWithNode38Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minus()
		}
		if (startsWithNode38Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minus()
		}
		if (startsWithNode38Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minus()
		}
		if (startsWithNode38Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minus()
		}
		if (startsWithNode38Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minus()
		}
		if (startsWithNode38Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minus()
		}
		if (startsWithNode38Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minus()
		}
		if (startsWithNode38Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minus()
		}
		if (startsWithNode38Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minus()
		}
		if (startsWithNode37Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minus()
		}
		if (startsWithNode37Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minus()
		}
		if (startsWithNode37Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minus()
		}
		if (startsWithNode37Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minus()
		}
		if (startsWithNode37Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minus()
		}
		if (startsWithNode37Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minus()
		}
		if (startsWithNode37Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minus()
		}
		if (startsWithNode37Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minus()
		}
		if (startsWithNode37Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minus()
		}
		if (startsWithNode37Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minus()
		}
		if (startsWithNode36Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode36Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode36Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode36Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode36Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode36Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode36Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode36Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode36Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode36Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode35Node32Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode35Node32Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode35Node32Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode35Node32Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode35Node32Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode35Node32Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode35Node32Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode35Node32Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode35Node32Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode35Node32Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode34Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode34Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode34Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode34Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode34Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode34Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode34Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode34Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode34Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode34Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode33Node31Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode33Node31Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode33Node31Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode33Node31Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode33Node31Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode33Node31Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode33Node31Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode33Node31Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode33Node31Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode33Node31Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode30Node32(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node35(content), ...tail]
			return this.minus()
		}
		if (startsWithNode30Node31(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node33(content), ...tail]
			return this.minus()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.minus()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.minus()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.minus()
		}
		if (startsWithNode30Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.minus()
		}
		if (startsWithNode30Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.minus()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.minus()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.minus()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.minus()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.minus()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.minus()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node34(content), ...tail]
			return this.minus()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.minus()
		}
		if (startsWithNode28Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minus()
		}
		if (startsWithNode28Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minus()
		}
		if (startsWithNode28Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minus()
		}
		if (startsWithNode28Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minus()
		}
		if (startsWithNode28Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minus()
		}
		if (startsWithNode28Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minus()
		}
		if (startsWithNode28Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minus()
		}
		if (startsWithNode28Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minus()
		}
		if (startsWithNode28Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minus()
		}
		if (startsWithNode28Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minus()
		}
		if (startsWithNode27Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minus()
		}
		if (startsWithNode27Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minus()
		}
		if (startsWithNode27Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minus()
		}
		if (startsWithNode27Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minus()
		}
		if (startsWithNode27Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minus()
		}
		if (startsWithNode27Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minus()
		}
		if (startsWithNode27Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minus()
		}
		if (startsWithNode27Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minus()
		}
		if (startsWithNode27Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minus()
		}
		if (startsWithNode27Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minus()
		}
		if (startsWithNode26(this.stack)) {
			this.stack = [new Node43(), ...this.stack]
			return this
		}		if (startsWithNode25(this.stack)) {
			this.stack = [new Node43(), ...this.stack]
			return this
		}		if (startsWithNode24(this.stack)) {
			this.stack = [new Node43(), ...this.stack]
			return this
		}		if (startsWithNode23(this.stack)) {
			this.stack = [new Node43(), ...this.stack]
			return this
		}		if (startsWithNode22(this.stack)) {
			this.stack = [new Node43(), ...this.stack]
			return this
		}		if (startsWithNode21(this.stack)) {
			this.stack = [new Node43(), ...this.stack]
			return this
		}		if (startsWithNode20Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minus()
		}
		if (startsWithNode20Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minus()
		}
		if (startsWithNode20Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minus()
		}
		if (startsWithNode20Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minus()
		}
		if (startsWithNode20Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minus()
		}
		if (startsWithNode20Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minus()
		}
		if (startsWithNode20Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minus()
		}
		if (startsWithNode20Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minus()
		}
		if (startsWithNode20Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minus()
		}
		if (startsWithNode20Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minus()
		}
		if (startsWithNode19Node4(this.stack)) {
			const content = new _AssignmentXorEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minus()
		}
		if (startsWithNode18Node4(this.stack)) {
			const content = new _AssignmentRightShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minus()
		}
		if (startsWithNode17Node4(this.stack)) {
			const content = new _AssignmentPlusEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minus()
		}
		if (startsWithNode16Node4(this.stack)) {
			const content = new _AssignmentPercentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minus()
		}
		if (startsWithNode15Node4(this.stack)) {
			const content = new _AssignmentOrEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minus()
		}
		if (startsWithNode14Node4(this.stack)) {
			const content = new _AssignmentMultiEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minus()
		}
		if (startsWithNode13Node4(this.stack)) {
			const content = new _AssignmentMinuxEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minus()
		}
		if (startsWithNode12Node4(this.stack)) {
			const content = new _AssignmentLeftShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minus()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node34(content), ...tail]
			return this.minus()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.minus()
		}
		if (startsWithNode10(this.stack)) {
			this.stack = [new Node43(), ...this.stack]
			return this
		}		if (startsWithNode9(this.stack)) {
			this.stack = [new Node43(), ...this.stack]
			return this
		}		if (startsWithNode8(this.stack)) {
			this.stack = [new Node43(), ...this.stack]
			return this
		}		if (startsWithNode7Node8Node4Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new _AssignmentExpression(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.minus()
		}
		if (startsWithNode7Node8Node4Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new _AssignmentExpression(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.minus()
		}
		if (startsWithNode7Node8Node4Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new _AssignmentExpression(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node7(content), ...tail]
			return this.minus()
		}
		if (startsWithNode6Node4(this.stack)) {
			const content = new _AssignmentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minus()
		}
		if (startsWithNode5Node4(this.stack)) {
			const content = new _AssignmentDivEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minus()
		}
		if (startsWithNode3Node4(this.stack)) {
			const content = new _AssignmentAndEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minus()
		}
		if (startsWithNode1(this.stack)) {
			this.stack = [new Node43(), ...this.stack]
			return this
		}
	}
	minusEqual = (...a: any[]) => {
		if (startsWithNode49Node26Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode49Node26Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode49Node26Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode49Node26Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode49Node26Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode49Node26Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode49Node26Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode49Node26Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode49Node26Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode49Node26Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode47Node25Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode47Node25Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode47Node25Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode47Node25Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode47Node25Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode47Node25Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode47Node22Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode47Node25Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode47Node25Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode47Node25Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode46Node23Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode46Node23Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode46Node23Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode46Node23Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode46Node23Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode46Node23Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode46Node23Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode46Node23Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode46Node23Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode46Node23Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode42Node24Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode42Node24Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode42Node24Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode42Node24Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode42Node24Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode42Node24Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode42Node21Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode42Node24Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode42Node24Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode42Node24Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode40Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryCastExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node46(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode38Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode38Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode38Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode38Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode38Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode38Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode38Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode38Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode38Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode38Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode37Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode37Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode37Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode37Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode37Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode37Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode37Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode37Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode37Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode37Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode36Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode36Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode36Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode36Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode36Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode36Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode36Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode36Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode36Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode36Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode35Node32Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode35Node32Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode35Node32Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode35Node32Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode35Node32Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode35Node32Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode35Node32Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode35Node32Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode35Node32Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode35Node32Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode34Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode34Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode34Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode34Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode34Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode34Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode34Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode34Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode34Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode34Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode33Node31Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode33Node31Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode33Node31Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode33Node31Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode33Node31Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode33Node31Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode33Node31Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode33Node31Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode33Node31Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode33Node31Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode30Node32(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node35(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode30Node31(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node33(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode30Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode30Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node34(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode28Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode28Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode28Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode28Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode28Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode28Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode28Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode28Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode28Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode28Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode27Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode27Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode27Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode27Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode27Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode27Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode27Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode27Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode27Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode27Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode22Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode22Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode22Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode22Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode22Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode22Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode22Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode22Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode22Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode22Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode21Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode21Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode21Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode21Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode21Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode21Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode21Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode21Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode21Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode21Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode20Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode20Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode20Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode20Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode20Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode20Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode20Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode20Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode20Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode20Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node34(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode10Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node49(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode10Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node47(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode10Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode10Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode10Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node47(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode10Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode10Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode10Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode10Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode10Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node2(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode4(this.stack)) {
			this.stack = [new Node13(), ...this.stack]
			return this
		}
	}
	minusMinus = (...a: any[]) => {
		if (startsWithNode48Node26(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode48Node25(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode48Node24(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode48Node23(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode48Node22(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode48Node21(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode48Node10(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode48Node9(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode48Node8(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode48Node1(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode45Node26(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode45Node25(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode45Node24(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode45Node23(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode45Node22(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode45Node21(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode45Node10(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode45Node9(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode45Node8(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode45Node1(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode44Node26(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode44Node25(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode44Node24(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode44Node23(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode44Node22(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode44Node21(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode44Node10(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode44Node9(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode44Node8(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode44Node1(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode43Node26(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode43Node25(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode43Node24(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode43Node23(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode43Node22(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode43Node21(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode43Node10(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode43Node9(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode43Node8(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode43Node1(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode41Node26(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode41Node25(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode41Node24(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode41Node23(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode41Node22(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode41Node21(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode41Node10(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode41Node9(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode41Node8(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode41Node1(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode39Node26(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode39Node25(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode39Node24(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode39Node23(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode39Node22(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode39Node21(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode39Node10(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode39Node9(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode39Node8(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode39Node1(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode38Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode38Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode38Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode38Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode38Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode38Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode38Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode38Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode38Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode38Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode37Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode37Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode37Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode37Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode37Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode37Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode37Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode37Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode37Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode37Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode36Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode36Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode36Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode36Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode36Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode36Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode36Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode36Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode36Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode36Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode35Node32Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode35Node32Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode35Node32Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode35Node32Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode35Node32Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode35Node32Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode35Node32Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode35Node32Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode35Node32Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode35Node32Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode34Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode34Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode34Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode34Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode34Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode34Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode34Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode34Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode34Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode34Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode33Node31Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode33Node31Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode33Node31Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode33Node31Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode33Node31Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode33Node31Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode33Node31Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode33Node31Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode33Node31Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode33Node31Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode30Node32(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node35(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode30Node31(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node33(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode30Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode30Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node34(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode28Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode28Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode28Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode28Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode28Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode28Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode28Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode28Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode28Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode28Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode27Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode27Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode27Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode27Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode27Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode27Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode27Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode27Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode27Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode27Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode26(this.stack)) {
			this.stack = [new Node24(), ...this.stack]
			return this
		}		if (startsWithNode25(this.stack)) {
			this.stack = [new Node24(), ...this.stack]
			return this
		}		if (startsWithNode24(this.stack)) {
			this.stack = [new Node24(), ...this.stack]
			return this
		}		if (startsWithNode23(this.stack)) {
			this.stack = [new Node24(), ...this.stack]
			return this
		}		if (startsWithNode22(this.stack)) {
			this.stack = [new Node24(), ...this.stack]
			return this
		}		if (startsWithNode21(this.stack)) {
			this.stack = [new Node24(), ...this.stack]
			return this
		}		if (startsWithNode20Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode20Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode20Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode20Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode20Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode20Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode20Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode20Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode20Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode20Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode19Node4(this.stack)) {
			const content = new _AssignmentXorEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode18Node4(this.stack)) {
			const content = new _AssignmentRightShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode17Node4(this.stack)) {
			const content = new _AssignmentPlusEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode16Node4(this.stack)) {
			const content = new _AssignmentPercentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode15Node4(this.stack)) {
			const content = new _AssignmentOrEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode14Node4(this.stack)) {
			const content = new _AssignmentMultiEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode13Node4(this.stack)) {
			const content = new _AssignmentMinuxEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode12Node4(this.stack)) {
			const content = new _AssignmentLeftShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node34(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode10(this.stack)) {
			this.stack = [new Node21(), ...this.stack]
			return this
		}		if (startsWithNode9(this.stack)) {
			this.stack = [new Node24(), ...this.stack]
			return this
		}		if (startsWithNode8(this.stack)) {
			this.stack = [new Node24(), ...this.stack]
			return this
		}		if (startsWithNode7Node8Node4Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new _AssignmentExpression(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode7Node8Node4Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new _AssignmentExpression(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode7Node8Node4Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new _AssignmentExpression(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node7(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode6Node4(this.stack)) {
			const content = new _AssignmentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode5Node4(this.stack)) {
			const content = new _AssignmentDivEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode3Node4(this.stack)) {
			const content = new _AssignmentAndEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode1(this.stack)) {
			this.stack = [new Node24(), ...this.stack]
			return this
		}
	}
	multi = (...a: any[]) => {
		if (startsWithNode48Node26(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode48Node25(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode48Node24(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode48Node23(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode48Node22(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode48Node21(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode48Node10(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode48Node9(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode48Node8(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode48Node1(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode45Node26(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode45Node25(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode45Node24(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode45Node23(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode45Node22(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode45Node21(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode45Node10(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode45Node9(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode45Node8(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode45Node1(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode44Node26(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode44Node25(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode44Node24(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode44Node23(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode44Node22(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode44Node21(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode44Node10(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode44Node9(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode44Node8(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode44Node1(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode43Node26(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode43Node25(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode43Node24(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode43Node23(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode43Node22(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode43Node21(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode43Node10(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode43Node9(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode43Node8(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode43Node1(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode41Node26(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode41Node25(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode41Node24(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode41Node23(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode41Node22(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode41Node21(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode41Node10(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode41Node9(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode41Node8(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode41Node1(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode39Node26(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode39Node25(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode39Node24(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode39Node23(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode39Node22(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode39Node21(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode39Node10(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode39Node9(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode39Node8(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode39Node1(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.multi()
		}
		if (startsWithNode38Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multi()
		}
		if (startsWithNode38Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multi()
		}
		if (startsWithNode38Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multi()
		}
		if (startsWithNode38Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multi()
		}
		if (startsWithNode38Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multi()
		}
		if (startsWithNode38Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multi()
		}
		if (startsWithNode38Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multi()
		}
		if (startsWithNode38Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multi()
		}
		if (startsWithNode38Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multi()
		}
		if (startsWithNode38Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multi()
		}
		if (startsWithNode37Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multi()
		}
		if (startsWithNode37Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multi()
		}
		if (startsWithNode37Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multi()
		}
		if (startsWithNode37Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multi()
		}
		if (startsWithNode37Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multi()
		}
		if (startsWithNode37Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multi()
		}
		if (startsWithNode37Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multi()
		}
		if (startsWithNode37Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multi()
		}
		if (startsWithNode37Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multi()
		}
		if (startsWithNode37Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multi()
		}
		if (startsWithNode36Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode36Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode36Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode36Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode36Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode36Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode36Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode36Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode36Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode36Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode35Node32Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode35Node32Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode35Node32Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode35Node32Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode35Node32Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode35Node32Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode35Node32Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode35Node32Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode35Node32Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode35Node32Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode34Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode34Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode34Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode34Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode34Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode34Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode34Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode34Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode34Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode34Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode33Node31Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode33Node31Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode33Node31Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode33Node31Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode33Node31Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode33Node31Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode33Node31Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode33Node31Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode33Node31Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode33Node31Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode30Node32(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node35(content), ...tail]
			return this.multi()
		}
		if (startsWithNode30Node31(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node33(content), ...tail]
			return this.multi()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.multi()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.multi()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.multi()
		}
		if (startsWithNode30Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.multi()
		}
		if (startsWithNode30Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.multi()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.multi()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.multi()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.multi()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.multi()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.multi()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node34(content), ...tail]
			return this.multi()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.multi()
		}
		if (startsWithNode28Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multi()
		}
		if (startsWithNode28Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multi()
		}
		if (startsWithNode28Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multi()
		}
		if (startsWithNode28Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multi()
		}
		if (startsWithNode28Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multi()
		}
		if (startsWithNode28Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multi()
		}
		if (startsWithNode28Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multi()
		}
		if (startsWithNode28Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multi()
		}
		if (startsWithNode28Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multi()
		}
		if (startsWithNode28Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multi()
		}
		if (startsWithNode27Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multi()
		}
		if (startsWithNode27Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multi()
		}
		if (startsWithNode27Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multi()
		}
		if (startsWithNode27Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multi()
		}
		if (startsWithNode27Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multi()
		}
		if (startsWithNode27Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multi()
		}
		if (startsWithNode27Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multi()
		}
		if (startsWithNode27Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multi()
		}
		if (startsWithNode27Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multi()
		}
		if (startsWithNode27Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multi()
		}
		if (startsWithNode26(this.stack)) {
			this.stack = [new Node44(), ...this.stack]
			return this
		}		if (startsWithNode25(this.stack)) {
			this.stack = [new Node44(), ...this.stack]
			return this
		}		if (startsWithNode24(this.stack)) {
			this.stack = [new Node44(), ...this.stack]
			return this
		}		if (startsWithNode23(this.stack)) {
			this.stack = [new Node44(), ...this.stack]
			return this
		}		if (startsWithNode22(this.stack)) {
			this.stack = [new Node44(), ...this.stack]
			return this
		}		if (startsWithNode21(this.stack)) {
			this.stack = [new Node44(), ...this.stack]
			return this
		}		if (startsWithNode20Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multi()
		}
		if (startsWithNode20Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multi()
		}
		if (startsWithNode20Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multi()
		}
		if (startsWithNode20Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multi()
		}
		if (startsWithNode20Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multi()
		}
		if (startsWithNode20Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multi()
		}
		if (startsWithNode20Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multi()
		}
		if (startsWithNode20Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multi()
		}
		if (startsWithNode20Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multi()
		}
		if (startsWithNode20Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multi()
		}
		if (startsWithNode19Node4(this.stack)) {
			const content = new _AssignmentXorEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.multi()
		}
		if (startsWithNode18Node4(this.stack)) {
			const content = new _AssignmentRightShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.multi()
		}
		if (startsWithNode17Node4(this.stack)) {
			const content = new _AssignmentPlusEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.multi()
		}
		if (startsWithNode16Node4(this.stack)) {
			const content = new _AssignmentPercentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.multi()
		}
		if (startsWithNode15Node4(this.stack)) {
			const content = new _AssignmentOrEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.multi()
		}
		if (startsWithNode14Node4(this.stack)) {
			const content = new _AssignmentMultiEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.multi()
		}
		if (startsWithNode13Node4(this.stack)) {
			const content = new _AssignmentMinuxEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.multi()
		}
		if (startsWithNode12Node4(this.stack)) {
			const content = new _AssignmentLeftShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.multi()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node34(content), ...tail]
			return this.multi()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.multi()
		}
		if (startsWithNode10(this.stack)) {
			this.stack = [new Node44(), ...this.stack]
			return this
		}		if (startsWithNode9(this.stack)) {
			this.stack = [new Node44(), ...this.stack]
			return this
		}		if (startsWithNode8(this.stack)) {
			this.stack = [new Node44(), ...this.stack]
			return this
		}		if (startsWithNode7Node8Node4Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new _AssignmentExpression(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.multi()
		}
		if (startsWithNode7Node8Node4Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new _AssignmentExpression(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.multi()
		}
		if (startsWithNode7Node8Node4Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new _AssignmentExpression(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node7(content), ...tail]
			return this.multi()
		}
		if (startsWithNode6Node4(this.stack)) {
			const content = new _AssignmentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.multi()
		}
		if (startsWithNode5Node4(this.stack)) {
			const content = new _AssignmentDivEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.multi()
		}
		if (startsWithNode3Node4(this.stack)) {
			const content = new _AssignmentAndEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.multi()
		}
		if (startsWithNode1(this.stack)) {
			this.stack = [new Node44(), ...this.stack]
			return this
		}
	}
	multiEqual = (...a: any[]) => {
		if (startsWithNode49Node26Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode49Node26Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode49Node26Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode49Node26Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode49Node26Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode49Node26Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode49Node26Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode49Node26Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode49Node26Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode49Node26Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode47Node25Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode47Node25Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode47Node25Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode47Node25Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode47Node25Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode47Node25Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode47Node22Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode47Node25Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode47Node25Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode47Node25Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode46Node23Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode46Node23Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode46Node23Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode46Node23Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode46Node23Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode46Node23Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode46Node23Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode46Node23Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode46Node23Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode46Node23Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode42Node24Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode42Node24Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode42Node24Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode42Node24Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode42Node24Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode42Node24Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode42Node21Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode42Node24Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode42Node24Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode42Node24Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode40Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryCastExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node46(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode38Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode38Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode38Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode38Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode38Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode38Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode38Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode38Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode38Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode38Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode37Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode37Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode37Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode37Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode37Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode37Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode37Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode37Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode37Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode37Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode36Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode36Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode36Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode36Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode36Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode36Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode36Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode36Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode36Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode36Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode35Node32Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode35Node32Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode35Node32Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode35Node32Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode35Node32Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode35Node32Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode35Node32Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode35Node32Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode35Node32Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode35Node32Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode34Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode34Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode34Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode34Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode34Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode34Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode34Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode34Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode34Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode34Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode33Node31Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode33Node31Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode33Node31Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode33Node31Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode33Node31Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode33Node31Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode33Node31Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode33Node31Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode33Node31Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode33Node31Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode30Node32(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node35(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode30Node31(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node33(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode30Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode30Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node34(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode28Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode28Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode28Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode28Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode28Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode28Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode28Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode28Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode28Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode28Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode27Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode27Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode27Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode27Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode27Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode27Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode27Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode27Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode27Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode27Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode22Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode22Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode22Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode22Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode22Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode22Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode22Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode22Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode22Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode22Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode21Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode21Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode21Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode21Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode21Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode21Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode21Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode21Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode21Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode21Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode20Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode20Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode20Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode20Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode20Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode20Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode20Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode20Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode20Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode20Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node34(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode10Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node49(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode10Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node47(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode10Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode10Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode10Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node47(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode10Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode10Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode10Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode10Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode10Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node2(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode4(this.stack)) {
			this.stack = [new Node14(), ...this.stack]
			return this
		}
	}
	not = (...a: any[]) => {
		if (startsWithNode48Node26(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode48Node25(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode48Node24(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode48Node23(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode48Node22(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode48Node21(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode48Node10(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode48Node9(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode48Node8(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode48Node1(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode45Node26(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode45Node25(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode45Node24(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode45Node23(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode45Node22(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode45Node21(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode45Node10(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode45Node9(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode45Node8(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode45Node1(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode44Node26(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode44Node25(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode44Node24(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode44Node23(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode44Node22(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode44Node21(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode44Node10(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode44Node9(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode44Node8(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode44Node1(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode43Node26(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode43Node25(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode43Node24(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode43Node23(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode43Node22(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode43Node21(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode43Node10(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode43Node9(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode43Node8(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode43Node1(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode41Node26(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode41Node25(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode41Node24(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode41Node23(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode41Node22(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode41Node21(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode41Node10(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode41Node9(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode41Node8(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode41Node1(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode39Node26(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode39Node25(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode39Node24(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode39Node23(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode39Node22(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode39Node21(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode39Node10(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode39Node9(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode39Node8(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode39Node1(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.not()
		}
		if (startsWithNode38Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.not()
		}
		if (startsWithNode38Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.not()
		}
		if (startsWithNode38Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.not()
		}
		if (startsWithNode38Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.not()
		}
		if (startsWithNode38Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.not()
		}
		if (startsWithNode38Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.not()
		}
		if (startsWithNode38Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.not()
		}
		if (startsWithNode38Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.not()
		}
		if (startsWithNode38Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.not()
		}
		if (startsWithNode38Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.not()
		}
		if (startsWithNode37Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.not()
		}
		if (startsWithNode37Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.not()
		}
		if (startsWithNode37Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.not()
		}
		if (startsWithNode37Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.not()
		}
		if (startsWithNode37Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.not()
		}
		if (startsWithNode37Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.not()
		}
		if (startsWithNode37Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.not()
		}
		if (startsWithNode37Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.not()
		}
		if (startsWithNode37Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.not()
		}
		if (startsWithNode37Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.not()
		}
		if (startsWithNode36Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode36Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode36Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode36Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode36Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode36Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode36Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode36Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode36Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode36Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode35Node32Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode35Node32Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode35Node32Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode35Node32Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode35Node32Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode35Node32Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode35Node32Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode35Node32Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode35Node32Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode35Node32Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode34Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode34Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode34Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode34Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode34Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode34Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode34Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode34Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode34Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode34Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode33Node31Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode33Node31Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode33Node31Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode33Node31Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode33Node31Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode33Node31Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode33Node31Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode33Node31Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode33Node31Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode33Node31Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode30Node32(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node35(content), ...tail]
			return this.not()
		}
		if (startsWithNode30Node31(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node33(content), ...tail]
			return this.not()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.not()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.not()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.not()
		}
		if (startsWithNode30Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.not()
		}
		if (startsWithNode30Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.not()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.not()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.not()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.not()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.not()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.not()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node34(content), ...tail]
			return this.not()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.not()
		}
		if (startsWithNode28Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.not()
		}
		if (startsWithNode28Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.not()
		}
		if (startsWithNode28Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.not()
		}
		if (startsWithNode28Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.not()
		}
		if (startsWithNode28Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.not()
		}
		if (startsWithNode28Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.not()
		}
		if (startsWithNode28Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.not()
		}
		if (startsWithNode28Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.not()
		}
		if (startsWithNode28Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.not()
		}
		if (startsWithNode28Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.not()
		}
		if (startsWithNode27Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.not()
		}
		if (startsWithNode27Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.not()
		}
		if (startsWithNode27Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.not()
		}
		if (startsWithNode27Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.not()
		}
		if (startsWithNode27Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.not()
		}
		if (startsWithNode27Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.not()
		}
		if (startsWithNode27Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.not()
		}
		if (startsWithNode27Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.not()
		}
		if (startsWithNode27Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.not()
		}
		if (startsWithNode27Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.not()
		}
		if (startsWithNode26(this.stack)) {
			this.stack = [new Node45(), ...this.stack]
			return this
		}		if (startsWithNode25(this.stack)) {
			this.stack = [new Node45(), ...this.stack]
			return this
		}		if (startsWithNode24(this.stack)) {
			this.stack = [new Node45(), ...this.stack]
			return this
		}		if (startsWithNode23(this.stack)) {
			this.stack = [new Node45(), ...this.stack]
			return this
		}		if (startsWithNode22(this.stack)) {
			this.stack = [new Node45(), ...this.stack]
			return this
		}		if (startsWithNode21(this.stack)) {
			this.stack = [new Node45(), ...this.stack]
			return this
		}		if (startsWithNode20Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.not()
		}
		if (startsWithNode20Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.not()
		}
		if (startsWithNode20Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.not()
		}
		if (startsWithNode20Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.not()
		}
		if (startsWithNode20Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.not()
		}
		if (startsWithNode20Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.not()
		}
		if (startsWithNode20Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.not()
		}
		if (startsWithNode20Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.not()
		}
		if (startsWithNode20Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.not()
		}
		if (startsWithNode20Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.not()
		}
		if (startsWithNode19Node4(this.stack)) {
			const content = new _AssignmentXorEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.not()
		}
		if (startsWithNode18Node4(this.stack)) {
			const content = new _AssignmentRightShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.not()
		}
		if (startsWithNode17Node4(this.stack)) {
			const content = new _AssignmentPlusEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.not()
		}
		if (startsWithNode16Node4(this.stack)) {
			const content = new _AssignmentPercentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.not()
		}
		if (startsWithNode15Node4(this.stack)) {
			const content = new _AssignmentOrEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.not()
		}
		if (startsWithNode14Node4(this.stack)) {
			const content = new _AssignmentMultiEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.not()
		}
		if (startsWithNode13Node4(this.stack)) {
			const content = new _AssignmentMinuxEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.not()
		}
		if (startsWithNode12Node4(this.stack)) {
			const content = new _AssignmentLeftShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.not()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node34(content), ...tail]
			return this.not()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.not()
		}
		if (startsWithNode10(this.stack)) {
			this.stack = [new Node45(), ...this.stack]
			return this
		}		if (startsWithNode9(this.stack)) {
			this.stack = [new Node45(), ...this.stack]
			return this
		}		if (startsWithNode8(this.stack)) {
			this.stack = [new Node45(), ...this.stack]
			return this
		}		if (startsWithNode7Node8Node4Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new _AssignmentExpression(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.not()
		}
		if (startsWithNode7Node8Node4Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new _AssignmentExpression(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.not()
		}
		if (startsWithNode7Node8Node4Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new _AssignmentExpression(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node7(content), ...tail]
			return this.not()
		}
		if (startsWithNode6Node4(this.stack)) {
			const content = new _AssignmentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.not()
		}
		if (startsWithNode5Node4(this.stack)) {
			const content = new _AssignmentDivEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.not()
		}
		if (startsWithNode3Node4(this.stack)) {
			const content = new _AssignmentAndEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.not()
		}
		if (startsWithNode1(this.stack)) {
			this.stack = [new Node45(), ...this.stack]
			return this
		}
	}
	orEqual = (...a: any[]) => {
		if (startsWithNode49Node26Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode49Node26Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode49Node26Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode49Node26Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode49Node26Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode49Node26Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode49Node26Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode49Node26Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode49Node26Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode49Node26Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode47Node25Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode47Node25Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode47Node25Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode47Node25Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode47Node25Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode47Node25Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode47Node22Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode47Node25Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode47Node25Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode47Node25Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode46Node23Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode46Node23Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode46Node23Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode46Node23Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode46Node23Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode46Node23Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode46Node23Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode46Node23Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode46Node23Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode46Node23Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode42Node24Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode42Node24Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode42Node24Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode42Node24Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode42Node24Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode42Node24Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode42Node21Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode42Node24Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode42Node24Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode42Node24Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode40Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryCastExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node46(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode38Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode38Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode38Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode38Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode38Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode38Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode38Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode38Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode38Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode38Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode37Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode37Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode37Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode37Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode37Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode37Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode37Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode37Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode37Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode37Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode36Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode36Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode36Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode36Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode36Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode36Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode36Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode36Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode36Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode36Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode35Node32Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode35Node32Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode35Node32Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode35Node32Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode35Node32Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode35Node32Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode35Node32Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode35Node32Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode35Node32Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode35Node32Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode34Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode34Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode34Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode34Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode34Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode34Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode34Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode34Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode34Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode34Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode33Node31Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode33Node31Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode33Node31Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode33Node31Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode33Node31Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode33Node31Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode33Node31Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode33Node31Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode33Node31Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode33Node31Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode30Node32(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node35(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode30Node31(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node33(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode30Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode30Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node34(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode28Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode28Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode28Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode28Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode28Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode28Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode28Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode28Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode28Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode28Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode27Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode27Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode27Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode27Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode27Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode27Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode27Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode27Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode27Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode27Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode22Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode22Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode22Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode22Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode22Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode22Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode22Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode22Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode22Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode22Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode21Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode21Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode21Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode21Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode21Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode21Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode21Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode21Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode21Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode21Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode20Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode20Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode20Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode20Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode20Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode20Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode20Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode20Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode20Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode20Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node34(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode10Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node49(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode10Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node47(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode10Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode10Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode10Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node47(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode10Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode10Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode10Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode10Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode10Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node2(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode4(this.stack)) {
			this.stack = [new Node15(), ...this.stack]
			return this
		}
	}
	percentEqual = (...a: any[]) => {
		if (startsWithNode49Node26Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode49Node26Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode49Node26Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode49Node26Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode49Node26Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode49Node26Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode49Node26Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode49Node26Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode49Node26Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode49Node26Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode47Node25Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode47Node25Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode47Node25Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode47Node25Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode47Node25Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode47Node25Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode47Node22Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode47Node25Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode47Node25Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode47Node25Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode46Node23Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode46Node23Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode46Node23Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode46Node23Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode46Node23Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode46Node23Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode46Node23Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode46Node23Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode46Node23Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode46Node23Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode42Node24Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode42Node24Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode42Node24Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode42Node24Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode42Node24Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode42Node24Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode42Node21Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode42Node24Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode42Node24Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode42Node24Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode40Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryCastExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node46(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode38Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode38Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode38Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode38Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode38Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode38Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode38Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode38Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode38Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode38Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode37Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode37Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode37Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode37Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode37Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode37Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode37Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode37Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode37Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode37Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode36Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode36Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode36Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode36Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode36Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode36Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode36Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode36Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode36Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode36Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode35Node32Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode35Node32Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode35Node32Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode35Node32Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode35Node32Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode35Node32Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode35Node32Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode35Node32Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode35Node32Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode35Node32Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode34Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode34Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode34Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode34Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode34Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode34Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode34Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode34Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode34Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode34Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode33Node31Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode33Node31Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode33Node31Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode33Node31Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode33Node31Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode33Node31Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode33Node31Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode33Node31Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode33Node31Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode33Node31Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode30Node32(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node35(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode30Node31(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node33(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode30Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode30Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node34(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode28Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode28Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode28Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode28Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode28Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode28Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode28Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode28Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode28Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode28Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode27Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode27Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode27Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode27Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode27Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode27Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode27Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode27Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode27Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode27Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode22Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode22Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode22Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode22Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode22Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode22Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode22Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode22Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode22Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode22Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode21Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode21Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode21Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode21Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode21Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode21Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode21Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode21Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode21Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode21Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode20Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode20Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode20Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode20Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode20Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode20Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode20Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode20Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode20Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode20Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node34(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode10Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node49(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode10Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node47(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode10Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode10Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode10Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node47(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode10Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode10Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode10Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode10Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode10Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node2(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode4(this.stack)) {
			this.stack = [new Node16(), ...this.stack]
			return this
		}
	}
	plus = (...a: any[]) => {
		if (startsWithNode48Node26(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode48Node25(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode48Node24(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode48Node23(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode48Node22(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode48Node21(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode48Node10(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode48Node9(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode48Node8(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode48Node1(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode45Node26(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode45Node25(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode45Node24(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode45Node23(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode45Node22(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode45Node21(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode45Node10(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode45Node9(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode45Node8(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode45Node1(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode44Node26(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode44Node25(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode44Node24(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode44Node23(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode44Node22(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode44Node21(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode44Node10(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode44Node9(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode44Node8(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode44Node1(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode43Node26(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode43Node25(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode43Node24(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode43Node23(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode43Node22(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode43Node21(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode43Node10(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode43Node9(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode43Node8(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode43Node1(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode41Node26(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode41Node25(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode41Node24(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode41Node23(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode41Node22(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode41Node21(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode41Node10(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode41Node9(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode41Node8(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode41Node1(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode39Node26(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode39Node25(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode39Node24(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode39Node23(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode39Node22(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode39Node21(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode39Node10(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode39Node9(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode39Node8(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode39Node1(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plus()
		}
		if (startsWithNode38Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plus()
		}
		if (startsWithNode38Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plus()
		}
		if (startsWithNode38Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plus()
		}
		if (startsWithNode38Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plus()
		}
		if (startsWithNode38Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plus()
		}
		if (startsWithNode38Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plus()
		}
		if (startsWithNode38Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plus()
		}
		if (startsWithNode38Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plus()
		}
		if (startsWithNode38Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plus()
		}
		if (startsWithNode38Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plus()
		}
		if (startsWithNode37Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plus()
		}
		if (startsWithNode37Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plus()
		}
		if (startsWithNode37Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plus()
		}
		if (startsWithNode37Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plus()
		}
		if (startsWithNode37Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plus()
		}
		if (startsWithNode37Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plus()
		}
		if (startsWithNode37Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plus()
		}
		if (startsWithNode37Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plus()
		}
		if (startsWithNode37Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plus()
		}
		if (startsWithNode37Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plus()
		}
		if (startsWithNode36Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode36Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode36Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode36Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode36Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode36Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode36Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode36Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode36Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode36Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode35Node32Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode35Node32Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode35Node32Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode35Node32Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode35Node32Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode35Node32Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode35Node32Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode35Node32Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode35Node32Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode35Node32Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode34Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode34Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode34Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode34Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode34Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode34Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode34Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode34Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode34Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode34Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode33Node31Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode33Node31Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode33Node31Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode33Node31Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode33Node31Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode33Node31Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode33Node31Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode33Node31Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode33Node31Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode33Node31Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode30Node32(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node35(content), ...tail]
			return this.plus()
		}
		if (startsWithNode30Node31(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node33(content), ...tail]
			return this.plus()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.plus()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.plus()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.plus()
		}
		if (startsWithNode30Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.plus()
		}
		if (startsWithNode30Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.plus()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.plus()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.plus()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.plus()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.plus()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.plus()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node34(content), ...tail]
			return this.plus()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.plus()
		}
		if (startsWithNode28Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plus()
		}
		if (startsWithNode28Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plus()
		}
		if (startsWithNode28Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plus()
		}
		if (startsWithNode28Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plus()
		}
		if (startsWithNode28Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plus()
		}
		if (startsWithNode28Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plus()
		}
		if (startsWithNode28Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plus()
		}
		if (startsWithNode28Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plus()
		}
		if (startsWithNode28Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plus()
		}
		if (startsWithNode28Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plus()
		}
		if (startsWithNode27Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plus()
		}
		if (startsWithNode27Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plus()
		}
		if (startsWithNode27Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plus()
		}
		if (startsWithNode27Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plus()
		}
		if (startsWithNode27Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plus()
		}
		if (startsWithNode27Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plus()
		}
		if (startsWithNode27Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plus()
		}
		if (startsWithNode27Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plus()
		}
		if (startsWithNode27Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plus()
		}
		if (startsWithNode27Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plus()
		}
		if (startsWithNode26(this.stack)) {
			this.stack = [new Node48(), ...this.stack]
			return this
		}		if (startsWithNode25(this.stack)) {
			this.stack = [new Node48(), ...this.stack]
			return this
		}		if (startsWithNode24(this.stack)) {
			this.stack = [new Node48(), ...this.stack]
			return this
		}		if (startsWithNode23(this.stack)) {
			this.stack = [new Node48(), ...this.stack]
			return this
		}		if (startsWithNode22(this.stack)) {
			this.stack = [new Node48(), ...this.stack]
			return this
		}		if (startsWithNode21(this.stack)) {
			this.stack = [new Node48(), ...this.stack]
			return this
		}		if (startsWithNode20Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plus()
		}
		if (startsWithNode20Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plus()
		}
		if (startsWithNode20Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plus()
		}
		if (startsWithNode20Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plus()
		}
		if (startsWithNode20Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plus()
		}
		if (startsWithNode20Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plus()
		}
		if (startsWithNode20Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plus()
		}
		if (startsWithNode20Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plus()
		}
		if (startsWithNode20Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plus()
		}
		if (startsWithNode20Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plus()
		}
		if (startsWithNode19Node4(this.stack)) {
			const content = new _AssignmentXorEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plus()
		}
		if (startsWithNode18Node4(this.stack)) {
			const content = new _AssignmentRightShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plus()
		}
		if (startsWithNode17Node4(this.stack)) {
			const content = new _AssignmentPlusEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plus()
		}
		if (startsWithNode16Node4(this.stack)) {
			const content = new _AssignmentPercentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plus()
		}
		if (startsWithNode15Node4(this.stack)) {
			const content = new _AssignmentOrEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plus()
		}
		if (startsWithNode14Node4(this.stack)) {
			const content = new _AssignmentMultiEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plus()
		}
		if (startsWithNode13Node4(this.stack)) {
			const content = new _AssignmentMinuxEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plus()
		}
		if (startsWithNode12Node4(this.stack)) {
			const content = new _AssignmentLeftShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plus()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node34(content), ...tail]
			return this.plus()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.plus()
		}
		if (startsWithNode10(this.stack)) {
			this.stack = [new Node48(), ...this.stack]
			return this
		}		if (startsWithNode9(this.stack)) {
			this.stack = [new Node48(), ...this.stack]
			return this
		}		if (startsWithNode8(this.stack)) {
			this.stack = [new Node48(), ...this.stack]
			return this
		}		if (startsWithNode7Node8Node4Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new _AssignmentExpression(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.plus()
		}
		if (startsWithNode7Node8Node4Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new _AssignmentExpression(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.plus()
		}
		if (startsWithNode7Node8Node4Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new _AssignmentExpression(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node7(content), ...tail]
			return this.plus()
		}
		if (startsWithNode6Node4(this.stack)) {
			const content = new _AssignmentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plus()
		}
		if (startsWithNode5Node4(this.stack)) {
			const content = new _AssignmentDivEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plus()
		}
		if (startsWithNode3Node4(this.stack)) {
			const content = new _AssignmentAndEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plus()
		}
		if (startsWithNode1(this.stack)) {
			this.stack = [new Node48(), ...this.stack]
			return this
		}
	}
	plusEqual = (...a: any[]) => {
		if (startsWithNode49Node26Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode49Node26Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode49Node26Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode49Node26Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode49Node26Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode49Node26Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode49Node26Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode49Node26Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode49Node26Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode49Node26Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode47Node25Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode47Node25Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode47Node25Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode47Node25Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode47Node25Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode47Node25Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode47Node22Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode47Node25Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode47Node25Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode47Node25Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode46Node23Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode46Node23Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode46Node23Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode46Node23Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode46Node23Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode46Node23Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode46Node23Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode46Node23Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode46Node23Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode46Node23Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode42Node24Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode42Node24Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode42Node24Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode42Node24Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode42Node24Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode42Node24Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode42Node21Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode42Node24Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode42Node24Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode42Node24Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode40Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryCastExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node46(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode38Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode38Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode38Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode38Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode38Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode38Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode38Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode38Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode38Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode38Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode37Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode37Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode37Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode37Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode37Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode37Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode37Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode37Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode37Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode37Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode36Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode36Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode36Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode36Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode36Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode36Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode36Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode36Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode36Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode36Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode35Node32Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode35Node32Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode35Node32Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode35Node32Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode35Node32Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode35Node32Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode35Node32Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode35Node32Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode35Node32Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode35Node32Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode34Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode34Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode34Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode34Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode34Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode34Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode34Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode34Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode34Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode34Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode33Node31Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode33Node31Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode33Node31Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode33Node31Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode33Node31Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode33Node31Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode33Node31Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode33Node31Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode33Node31Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode33Node31Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode30Node32(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node35(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode30Node31(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node33(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode30Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode30Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node34(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode28Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode28Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode28Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode28Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode28Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode28Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode28Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode28Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode28Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode28Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode27Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode27Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode27Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode27Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode27Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode27Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode27Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode27Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode27Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode27Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode22Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode22Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode22Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode22Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode22Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode22Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode22Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode22Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode22Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode22Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode21Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode21Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode21Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode21Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode21Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode21Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode21Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode21Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode21Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode21Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode20Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode20Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode20Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode20Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode20Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode20Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode20Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode20Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode20Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode20Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node34(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode10Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node49(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode10Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node47(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode10Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode10Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode10Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node47(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode10Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode10Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode10Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode10Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode10Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node2(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode4(this.stack)) {
			this.stack = [new Node17(), ...this.stack]
			return this
		}
	}
	plusPlus = (...a: any[]) => {
		if (startsWithNode48Node26(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode48Node25(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode48Node24(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode48Node23(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode48Node22(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode48Node21(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode48Node10(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode48Node9(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode48Node8(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode48Node1(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode45Node26(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode45Node25(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode45Node24(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode45Node23(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode45Node22(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode45Node21(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode45Node10(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode45Node9(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode45Node8(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode45Node1(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode44Node26(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode44Node25(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode44Node24(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode44Node23(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode44Node22(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode44Node21(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode44Node10(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode44Node9(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode44Node8(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode44Node1(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode43Node26(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode43Node25(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode43Node24(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode43Node23(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode43Node22(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode43Node21(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode43Node10(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode43Node9(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode43Node8(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode43Node1(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode41Node26(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode41Node25(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode41Node24(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode41Node23(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode41Node22(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode41Node21(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode41Node10(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode41Node9(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode41Node8(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode41Node1(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode39Node26(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode39Node25(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode39Node24(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode39Node23(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode39Node22(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode39Node21(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode39Node10(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode39Node9(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode39Node8(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode39Node1(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode38Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode38Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode38Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode38Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode38Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode38Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode38Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode38Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode38Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode38Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode37Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode37Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode37Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode37Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode37Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode37Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode37Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode37Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode37Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode37Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode36Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode36Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode36Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode36Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode36Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode36Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode36Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode36Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode36Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode36Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode35Node32Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode35Node32Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode35Node32Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode35Node32Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode35Node32Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode35Node32Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode35Node32Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode35Node32Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode35Node32Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode35Node32Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode34Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode34Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode34Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode34Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode34Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode34Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode34Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode34Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode34Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode34Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode33Node31Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode33Node31Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode33Node31Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode33Node31Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode33Node31Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode33Node31Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode33Node31Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode33Node31Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode33Node31Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode33Node31Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode30Node32(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node35(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode30Node31(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node33(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode30Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode30Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node34(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode28Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode28Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode28Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode28Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode28Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode28Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode28Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode28Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode28Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode28Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode27Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode27Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode27Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode27Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode27Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode27Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode27Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode27Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode27Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode27Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode26(this.stack)) {
			this.stack = [new Node25(), ...this.stack]
			return this
		}		if (startsWithNode25(this.stack)) {
			this.stack = [new Node25(), ...this.stack]
			return this
		}		if (startsWithNode24(this.stack)) {
			this.stack = [new Node25(), ...this.stack]
			return this
		}		if (startsWithNode23(this.stack)) {
			this.stack = [new Node25(), ...this.stack]
			return this
		}		if (startsWithNode22(this.stack)) {
			this.stack = [new Node25(), ...this.stack]
			return this
		}		if (startsWithNode21(this.stack)) {
			this.stack = [new Node25(), ...this.stack]
			return this
		}		if (startsWithNode20Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode20Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode20Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode20Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode20Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode20Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode20Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode20Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode20Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode20Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode19Node4(this.stack)) {
			const content = new _AssignmentXorEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode18Node4(this.stack)) {
			const content = new _AssignmentRightShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode17Node4(this.stack)) {
			const content = new _AssignmentPlusEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode16Node4(this.stack)) {
			const content = new _AssignmentPercentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode15Node4(this.stack)) {
			const content = new _AssignmentOrEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode14Node4(this.stack)) {
			const content = new _AssignmentMultiEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode13Node4(this.stack)) {
			const content = new _AssignmentMinuxEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode12Node4(this.stack)) {
			const content = new _AssignmentLeftShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node34(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode10(this.stack)) {
			this.stack = [new Node22(), ...this.stack]
			return this
		}		if (startsWithNode9(this.stack)) {
			this.stack = [new Node25(), ...this.stack]
			return this
		}		if (startsWithNode8(this.stack)) {
			this.stack = [new Node25(), ...this.stack]
			return this
		}		if (startsWithNode7Node8Node4Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new _AssignmentExpression(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode7Node8Node4Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new _AssignmentExpression(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode7Node8Node4Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new _AssignmentExpression(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node7(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode6Node4(this.stack)) {
			const content = new _AssignmentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode5Node4(this.stack)) {
			const content = new _AssignmentDivEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode3Node4(this.stack)) {
			const content = new _AssignmentAndEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode1(this.stack)) {
			this.stack = [new Node25(), ...this.stack]
			return this
		}
	}
	rifhtShiftEqual = (...a: any[]) => {
		if (startsWithNode49Node26Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode49Node26Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode49Node26Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode49Node26Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode49Node26Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode49Node26Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode49Node26Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode49Node26Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode49Node26Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode49Node26Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode47Node25Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode47Node25Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode47Node25Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode47Node25Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode47Node25Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode47Node25Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode47Node22Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode47Node25Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode47Node25Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode47Node25Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode46Node23Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode46Node23Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode46Node23Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode46Node23Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode46Node23Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode46Node23Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode46Node23Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode46Node23Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode46Node23Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode46Node23Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode42Node24Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode42Node24Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode42Node24Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode42Node24Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode42Node24Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode42Node24Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode42Node21Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode42Node24Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode42Node24Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode42Node24Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode40Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryCastExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node46(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode38Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode38Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode38Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode38Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode38Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode38Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode38Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode38Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode38Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode38Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode37Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode37Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode37Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode37Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode37Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode37Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode37Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode37Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode37Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode37Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode36Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode36Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode36Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode36Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode36Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode36Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode36Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode36Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode36Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode36Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode35Node32Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode35Node32Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode35Node32Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode35Node32Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode35Node32Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode35Node32Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode35Node32Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode35Node32Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode35Node32Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode35Node32Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode34Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode34Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode34Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode34Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode34Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode34Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode34Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode34Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode34Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode34Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode33Node31Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode33Node31Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode33Node31Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode33Node31Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode33Node31Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode33Node31Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode33Node31Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode33Node31Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode33Node31Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode33Node31Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode30Node32(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node35(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode30Node31(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node33(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode30Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode30Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node34(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode28Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode28Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode28Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode28Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode28Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode28Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode28Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode28Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode28Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode28Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode27Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode27Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode27Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode27Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode27Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode27Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode27Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode27Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode27Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode27Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode22Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode22Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode22Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode22Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode22Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode22Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode22Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode22Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode22Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode22Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode21Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode21Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode21Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode21Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode21Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode21Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode21Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode21Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode21Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode21Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode20Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode20Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode20Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode20Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode20Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode20Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode20Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode20Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode20Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode20Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node34(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode10Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node49(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode10Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node47(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode10Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode10Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode10Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node47(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode10Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode10Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode10Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode10Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode10Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node2(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode4(this.stack)) {
			this.stack = [new Node18(), ...this.stack]
			return this
		}
	}
	sizeof = (...a: any[]) => {
		if (startsWithNode48Node26(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode48Node25(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode48Node24(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode48Node23(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode48Node22(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode48Node21(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode48Node10(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode48Node9(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode48Node8(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode48Node1(this.stack)) {
			const content = new _UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode45Node26(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode45Node25(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode45Node24(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode45Node23(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode45Node22(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode45Node21(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode45Node10(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode45Node9(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode45Node8(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode45Node1(this.stack)) {
			const content = new _UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode44Node26(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode44Node25(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode44Node24(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode44Node23(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode44Node22(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode44Node21(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode44Node10(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode44Node9(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode44Node8(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode44Node1(this.stack)) {
			const content = new _UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode43Node26(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode43Node25(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode43Node24(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode43Node23(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode43Node22(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode43Node21(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode43Node10(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode43Node9(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode43Node8(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode43Node1(this.stack)) {
			const content = new _UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode41Node26(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode41Node25(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode41Node24(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode41Node23(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode41Node22(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode41Node21(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode41Node10(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode41Node9(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode41Node8(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode41Node1(this.stack)) {
			const content = new _UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode39Node26(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode39Node25(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode39Node24(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode39Node23(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode39Node22(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode39Node21(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode39Node10(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode39Node9(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode39Node8(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode39Node1(this.stack)) {
			const content = new _UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node23(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode38Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode38Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode38Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode38Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode38Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode38Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode38Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode38Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode38Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode38Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode37Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode37Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode37Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode37Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode37Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode37Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode37Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode37Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode37Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode37Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode36Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode36Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode36Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode36Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode36Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode36Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode36Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode36Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode36Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode36Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode35Node32Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode35Node32Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode35Node32Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode35Node32Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode35Node32Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode35Node32Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode35Node32Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode35Node32Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode35Node32Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode35Node32Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode34Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode34Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode34Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode34Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode34Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode34Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode34Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode34Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode34Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode34Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode33Node31Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode33Node31Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode33Node31Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode33Node31Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode33Node31Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode33Node31Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode33Node31Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode33Node31Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode33Node31Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode33Node31Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode30Node32(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node35(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode30Node31(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node33(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode30Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode30Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node34(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode28Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode28Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode28Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode28Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode28Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode28Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode28Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode28Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode28Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode28Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode27Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode27Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode27Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode27Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode27Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode27Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode27Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode27Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode27Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode27Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode26(this.stack)) {
			this.stack = [new Node26(), ...this.stack]
			return this
		}		if (startsWithNode25(this.stack)) {
			this.stack = [new Node26(), ...this.stack]
			return this
		}		if (startsWithNode24(this.stack)) {
			this.stack = [new Node26(), ...this.stack]
			return this
		}		if (startsWithNode23(this.stack)) {
			this.stack = [new Node26(), ...this.stack]
			return this
		}		if (startsWithNode22(this.stack)) {
			this.stack = [new Node26(), ...this.stack]
			return this
		}		if (startsWithNode21(this.stack)) {
			this.stack = [new Node26(), ...this.stack]
			return this
		}		if (startsWithNode20Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode20Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode20Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode20Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode20Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode20Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode20Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode20Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode20Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode20Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode19Node4(this.stack)) {
			const content = new _AssignmentXorEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode18Node4(this.stack)) {
			const content = new _AssignmentRightShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode17Node4(this.stack)) {
			const content = new _AssignmentPlusEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode16Node4(this.stack)) {
			const content = new _AssignmentPercentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode15Node4(this.stack)) {
			const content = new _AssignmentOrEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode14Node4(this.stack)) {
			const content = new _AssignmentMultiEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode13Node4(this.stack)) {
			const content = new _AssignmentMinuxEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode12Node4(this.stack)) {
			const content = new _AssignmentLeftShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node34(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode10(this.stack)) {
			this.stack = [new Node26(), ...this.stack]
			return this
		}		if (startsWithNode9(this.stack)) {
			this.stack = [new Node26(), ...this.stack]
			return this
		}		if (startsWithNode8(this.stack)) {
			this.stack = [new Node26(), ...this.stack]
			return this
		}		if (startsWithNode7Node8Node4Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new _AssignmentExpression(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode7Node8Node4Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new _AssignmentExpression(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode7Node8Node4Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new _AssignmentExpression(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node7(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode6Node4(this.stack)) {
			const content = new _AssignmentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode5Node4(this.stack)) {
			const content = new _AssignmentDivEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode3Node4(this.stack)) {
			const content = new _AssignmentAndEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode1(this.stack)) {
			this.stack = [new Node26(), ...this.stack]
			return this
		}
	}
	xorEqual = (...a: any[]) => {
		if (startsWithNode49Node26Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode49Node26Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode49Node26Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode49Node26Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode49Node26Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode49Node26Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode49Node26Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode49Node26Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode49Node26Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode49Node26Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode47Node25Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode47Node25Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode47Node25Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode47Node25Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode47Node25Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode47Node25Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode47Node22Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode47Node25Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode47Node25Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode47Node25Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode46Node23Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode46Node23Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode46Node23Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode46Node23Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode46Node23Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode46Node23Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode46Node23Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode46Node23Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode46Node23Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode46Node23Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode42Node24Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node49(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode42Node24Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode42Node24Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode42Node24Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node40(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode42Node24Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node47(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode42Node24Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node42(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode42Node21Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode42Node24Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode42Node24Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode42Node24Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode40Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryCastExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node46(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode38Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode38Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode38Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode38Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode38Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode38Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode38Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode38Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode38Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode38Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode37Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode37Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode37Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode37Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode37Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode37Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode37Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode37Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode37Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode37Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode36Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode36Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode36Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode36Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode36Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode36Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode36Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode36Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode36Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode36Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode35Node32Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode35Node32Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode35Node32Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode35Node32Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode35Node32Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode35Node32Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode35Node32Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode35Node32Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode35Node32Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode35Node32Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode34Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode34Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode34Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode34Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode34Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode34Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode34Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode34Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode34Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode34Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode33Node31Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode33Node31Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode33Node31Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode33Node31Node10Node23(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode33Node31Node10Node22(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode33Node31Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode33Node31Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode33Node31Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode33Node31Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode33Node31Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new _PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode30Node32(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node35(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode30Node31(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node33(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode30Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode30Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node34(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode28Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode28Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode28Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode28Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode28Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode28Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode28Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode28Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode28Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode28Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode27Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode27Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode27Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode27Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode27Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode27Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode27Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode27Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode27Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode27Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode22Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode22Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode22Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode22Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode22Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode22Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode22Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode22Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode22Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode22Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode21Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode21Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode21Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode21Node10Node23(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode21Node10Node22(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode21Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode21Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode21Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode21Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode21Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new _PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode20Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode20Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode20Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode20Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode20Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode20Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode20Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode20Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode20Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode20Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node34(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new _AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode10Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node49(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode10Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node47(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode10Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode10Node23(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode10Node22(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node47(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode10Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode10Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode10Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode10Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode10Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new _UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node2(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode4(this.stack)) {
			this.stack = [new Node19(), ...this.stack]
			return this
		}
	}
}

///////////////////////////////////////////////////////////////////////////////

export function begin(): Fluent<[Node1]> {
	return new FluentImpl() as any
}

///////////////////////////////////////////////////////////////////////////////
