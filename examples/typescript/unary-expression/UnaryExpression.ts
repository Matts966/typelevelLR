
///////////////////////////////////////////////////////////////////////////////

// grammar definition

// UnaryPostfixExpression : unaryExpression -> postfixExpression
// UnaryPlusExpression : unaryExpression -> "plusPlus()" unaryExpression
// UnaryMinusExpression : unaryExpression -> "minusMinus()" unaryExpression
// UnaryOperatorCastExpression : unaryExpression -> unaryOperator castExpression
// UnarySizeofExpression : unaryExpression -> "sizeof()" unaryExpression
// AbstractPointerDeclarator : abstractDeclarator -> pointer
// AbstractPointerDirectDeclarator : abstractDeclarator -> pointer directAbstractDeclarator
// AbstractDirectDeclarator : abstractDeclarator -> directAbstractDeclarator
// ConditionalAssignmentExpression : assignmentExpression -> conditionalExpression
// AssignmentExpressions : assignmentExpression -> unaryExpression assignmentOperator assignmentExpression
// AssignmentExpressions : assignmentExpressions -> assignmentExpression assignmentExpressions
// EpsilonAssignmentExpressions : assignmentExpressions -> eps
// AssignmentEqualOperator : assignmentOperator -> "euaql()"
// AssignmentMultiEqualOperator : assignmentOperator -> "multiEqual()"
// AssignmentDivEqualOperator : assignmentOperator -> "divEqual()"
// AssignmentPercentEqualOperator : assignmentOperator -> "percentEqual()"
// AssignmentPlusEqualOperator : assignmentOperator -> "plusEqual()"
// AssignmentMinuxEqualOperator : assignmentOperator -> "minusEqual()"
// AssignmentLeftShiftOperator : assignmentOperator -> "leftShiftEqual()"
// AssignmentRightShiftOperator : assignmentOperator -> "rifhtShiftEqual()"
// AssignmentAndEqualOperator : assignmentOperator -> "andEqual()"
// AssignmentXorEqualOperator : assignmentOperator -> "xorEqual()"
// AssignmentOrEqualOperator : assignmentOperator -> "orEqual()"
// CastExpression : castExpression -> unaryExpression
// ConstantInteger : constant -> "integer(number)"
// ConstantString : constant -> "character(string)"
// ConstantFloat : constant -> "floating(number)"
// ConstantEnum : constant -> enumerationConstant
// EnumIdentifierListSpecifier : enumSpecifier -> "enum()" identifier enumeratorList
// EnumListSpecifier : enumSpecifier -> "enum()" enumeratorList
// EnumIdentifierSpecifier : enumSpecifier -> "enum()" identifier
// EnumeratorIdentifier : enumerator -> identifier
// EnumeratorList : enumeratorList -> enumerator
// EnumeratorLists : enumeratorList -> enumeratorList enumerator
// Identifier : identifier -> constantExpression
// DeclaratorParameterDeclaration : parameterDeclaration -> declarationSpecifier declarationSpecifiers declarator
// AbstractParameterDeclaration : parameterDeclaration -> declarationSpecifier declarationSpecifiers abstractDeclarator
// ParameterDeclaration : parameterDeclaration -> declarationSpecifier declarationSpecifiers
// ParameterList : parameterList -> parameterDeclaration
// ParameterLists : parameterList -> parameterList parameterDeclaration
// PostfixPrimaryExpression : postfixExpression -> primaryExpression
// PostfixExpressions : postfixExpression -> postfixExpression expression
// PostfixAssignmentExpressions : postfixExpression -> postfixExpression assignmentExpressions
// PostfixDotExpressions : postfixExpression -> postfixExpression "dot()" identifier
// PostfixArrowExpressions : postfixExpression -> postfixExpression "arrow()" identifier
// PostfixPlusExpressions : postfixExpression -> postfixExpression "plusPlus()"
// PostfixMinusExpressions : postfixExpression -> postfixExpression "minusMinus()"
// PrimaryIdentifierExpression : primaryExpression -> identifier
// PrimaryConstantExpression : primaryExpression -> constant
// UnaryAndOperator : unaryOperator -> "and()"
// UnaryMultiOperator : unaryOperator -> "multi()"
// UnaryPlusOperator : unaryOperator -> "plus()"
// UnaryMinusOperator : unaryOperator -> "minus()"
// UnaryComplementOperator : unaryOperator -> "complement()"
// UnaryNotOperator : unaryOperator -> "not()"

///////////////////////////////////////////////////////////////////////////////

// util scripts

type Length<T extends unknown[]> = T['length']
type Prepend<Elm, T extends unknown[]> = ((
	arg: Elm,
	...rest: T
) => void) extends ((...args: infer T2) => void)
	? T2
	: never

type Rest<T extends unknown[]> = ((
	...rest: T
) => void) extends ((head: unknown, ...args: infer T2) => void)
	? T2
	: never
type Tail<T extends any[]> = ((...args: T) => any) extends ((
	_: infer First,
	...rest: infer R
) => any)
	? T extends any[] ? R : ReadonlyArray<R[number]>
	: []
declare const None: unique symbol
type None = typeof None
type Head<T extends unknown[]> = Length<T> extends 0 ? None : T[0]
type AddUnknownNodeRest<Tuple extends Node[], Result extends Node[] = [...Node[]]> = {
	empty: Result,
	nonEmpty: ((..._: Tuple) => Node) extends ((_: infer First, ..._1: infer Next) => Node)
		? Prepend<First, AddUnknownNodeRest<Rest<Tuple>, Result>>
		: never
}[
	Tuple extends [unknown, ...unknown[]]
		? 'nonEmpty'
		: 'empty'
]

type CompareLength<Left extends any[], Right extends any[]> = {
	fitBoth: 'equal'
	fitLeft: 'shorterLeft'
	fitRight: 'shorterRight'
	unfit: ((..._: Left) => any) extends ((_: any, ..._1: infer LeftRest) => any) ?
		 ((..._: Right) => any) extends ((_: any, ..._1: infer RightRest) => any) ?
					CompareLength<LeftRest, RightRest>
			: never
			: never
}[
	Left['length'] extends Right['length'] ? 'fitBoth' :
	Left extends [] ? 'fitLeft' :
	Right extends [] ? 'fitRight' :
	'unfit'
]

type StartsWith<Tuple extends unknown[], Tuple2 extends unknown[]> = {
	false: 0,
	empty: 1,
	nonEmpty: Head<Tuple> extends Head<Tuple2>
		? StartsWith<Rest<Tuple>, Rest<Tuple2>>
		: 0
}[
	CompareLength<Tuple, Tuple2> extends 'shorterLeft'
		? 'false'
		: IsFinite<Tuple2, 'finite', 'infinite'> extends 'infinite'
			? 'false'
			: Tuple2 extends [unknown, ...unknown[]]
				? 'nonEmpty'
				: 'empty'
]
type IsFinite<Tuple extends unknown[], Finite, Infinite> = {
	empty: Finite
	nonEmpty: ((..._: Tuple) => unknown) extends ((_: infer First, ..._1: infer Rest) => unknown)
		? IsFinite<Rest, Finite, Infinite>
		: never
	infinite: Infinite
}[
	Tuple extends [] ? 'empty' :
	Tuple extends (infer Element)[] ?
	Element[] extends Tuple ?
		'infinite'
	: 'nonEmpty'
	: never
]

///////////////////////////////////////////////////////////////////////////////

// AST nodes

interface UnaryExpression {
	accept(v? : Visitor): void
}

interface AbstractDeclarator {
	accept(v? : Visitor): void
}

interface AssignmentExpression {
	accept(v? : Visitor): void
}

interface AssignmentExpressions {
	accept(v? : Visitor): void
}

interface AssignmentOperator {
	accept(v? : Visitor): void
}

interface CastExpression {
	accept(v? : Visitor): void
}

interface Constant {
	accept(v? : Visitor): void
}

interface EnumSpecifier {
	accept(v? : Visitor): void
}

interface Enumerator {
	accept(v? : Visitor): void
}

interface EnumeratorList {
	accept(v? : Visitor): void
}

interface Identifier {
	accept(v? : Visitor): void
}

interface ParameterDeclaration {
	accept(v? : Visitor): void
}

interface ParameterList {
	accept(v? : Visitor): void
}

interface PostfixExpression {
	accept(v? : Visitor): void
}

interface PrimaryExpression {
	accept(v? : Visitor): void
}

interface UnaryOperator {
	accept(v? : Visitor): void
}

interface Pointer {
	accept(v? : Visitor): void
}

interface DirectAbstractDeclarator {
	accept(v? : Visitor): void
}

interface ConditionalExpression {
	accept(v? : Visitor): void
}

interface Eps {
	accept(v? : Visitor): void
}

interface EnumerationConstant {
	accept(v? : Visitor): void
}

interface ConstantExpression {
	accept(v? : Visitor): void
}

interface DeclarationSpecifier {
	accept(v? : Visitor): void
}

interface DeclarationSpecifiers {
	accept(v? : Visitor): void
}

interface Declarator {
	accept(v? : Visitor): void
}

interface Expression {
	accept(v? : Visitor): void
}

export class UnaryPostfixExpression implements UnaryExpression {
	arg1 : PostfixExpression
	constructor(arg1 : PostfixExpression) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visitUnaryPostfixExpression(this)
		} else {
			new DefaultVisitor().visitUnaryPostfixExpression(this)
		}
	}
}

export class UnaryPlusExpression implements UnaryExpression {
	arg1 : UnaryExpression
	constructor(arg1 : UnaryExpression) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visitUnaryPlusExpression(this)
		} else {
			new DefaultVisitor().visitUnaryPlusExpression(this)
		}
	}
}

export class UnaryMinusExpression implements UnaryExpression {
	arg1 : UnaryExpression
	constructor(arg1 : UnaryExpression) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visitUnaryMinusExpression(this)
		} else {
			new DefaultVisitor().visitUnaryMinusExpression(this)
		}
	}
}

export class UnaryOperatorCastExpression implements UnaryExpression {
	arg1 : UnaryOperator
	arg2 : CastExpression
	constructor(arg1 : UnaryOperator, arg2 : CastExpression) {
		this.arg1 = arg1
		this.arg2 = arg2
	}
	accept(v? : Visitor) {
		if (v) {
			v.visitUnaryOperatorCastExpression(this)
		} else {
			new DefaultVisitor().visitUnaryOperatorCastExpression(this)
		}
	}
}

export class UnarySizeofExpression implements UnaryExpression {
	arg1 : UnaryExpression
	constructor(arg1 : UnaryExpression) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visitUnarySizeofExpression(this)
		} else {
			new DefaultVisitor().visitUnarySizeofExpression(this)
		}
	}
}

export class AbstractPointerDeclarator implements AbstractDeclarator {
	arg1 : Pointer
	constructor(arg1 : Pointer) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visitAbstractPointerDeclarator(this)
		} else {
			new DefaultVisitor().visitAbstractPointerDeclarator(this)
		}
	}
}

export class AbstractPointerDirectDeclarator implements AbstractDeclarator {
	arg1 : Pointer
	arg2 : DirectAbstractDeclarator
	constructor(arg1 : Pointer, arg2 : DirectAbstractDeclarator) {
		this.arg1 = arg1
		this.arg2 = arg2
	}
	accept(v? : Visitor) {
		if (v) {
			v.visitAbstractPointerDirectDeclarator(this)
		} else {
			new DefaultVisitor().visitAbstractPointerDirectDeclarator(this)
		}
	}
}

export class AbstractDirectDeclarator implements AbstractDeclarator {
	arg1 : DirectAbstractDeclarator
	constructor(arg1 : DirectAbstractDeclarator) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visitAbstractDirectDeclarator(this)
		} else {
			new DefaultVisitor().visitAbstractDirectDeclarator(this)
		}
	}
}

export class ConditionalAssignmentExpression implements AssignmentExpression {
	arg1 : ConditionalExpression
	constructor(arg1 : ConditionalExpression) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visitConditionalAssignmentExpression(this)
		} else {
			new DefaultVisitor().visitConditionalAssignmentExpression(this)
		}
	}
}

export class AssignmentExpressions implements AssignmentExpression {
	arg1 : UnaryExpression
	arg2 : AssignmentOperator
	arg3 : AssignmentExpression
	constructor(arg1 : UnaryExpression, arg2 : AssignmentOperator, arg3 : AssignmentExpression) {
		this.arg1 = arg1
		this.arg2 = arg2
		this.arg3 = arg3
	}
	accept(v? : Visitor) {
		if (v) {
			v.visitAssignmentExpressions(this)
		} else {
			new DefaultVisitor().visitAssignmentExpressions(this)
		}
	}
}

export class AssignmentExpressions implements AssignmentExpressions {
	arg1 : AssignmentExpression
	arg2 : AssignmentExpressions
	constructor(arg1 : AssignmentExpression, arg2 : AssignmentExpressions) {
		this.arg1 = arg1
		this.arg2 = arg2
	}
	accept(v? : Visitor) {
		if (v) {
			v.visitAssignmentExpressions(this)
		} else {
			new DefaultVisitor().visitAssignmentExpressions(this)
		}
	}
}

export class EpsilonAssignmentExpressions implements AssignmentExpressions {
	arg1 : Eps
	constructor(arg1 : Eps) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visitEpsilonAssignmentExpressions(this)
		} else {
			new DefaultVisitor().visitEpsilonAssignmentExpressions(this)
		}
	}
}

export class AssignmentEqualOperator implements AssignmentOperator {
	accept(v? : Visitor) {
		if (v) {
			v.visitAssignmentEqualOperator(this)
		} else {
			new DefaultVisitor().visitAssignmentEqualOperator(this)
		}
	}
}

export class AssignmentMultiEqualOperator implements AssignmentOperator {
	accept(v? : Visitor) {
		if (v) {
			v.visitAssignmentMultiEqualOperator(this)
		} else {
			new DefaultVisitor().visitAssignmentMultiEqualOperator(this)
		}
	}
}

export class AssignmentDivEqualOperator implements AssignmentOperator {
	accept(v? : Visitor) {
		if (v) {
			v.visitAssignmentDivEqualOperator(this)
		} else {
			new DefaultVisitor().visitAssignmentDivEqualOperator(this)
		}
	}
}

export class AssignmentPercentEqualOperator implements AssignmentOperator {
	accept(v? : Visitor) {
		if (v) {
			v.visitAssignmentPercentEqualOperator(this)
		} else {
			new DefaultVisitor().visitAssignmentPercentEqualOperator(this)
		}
	}
}

export class AssignmentPlusEqualOperator implements AssignmentOperator {
	accept(v? : Visitor) {
		if (v) {
			v.visitAssignmentPlusEqualOperator(this)
		} else {
			new DefaultVisitor().visitAssignmentPlusEqualOperator(this)
		}
	}
}

export class AssignmentMinuxEqualOperator implements AssignmentOperator {
	accept(v? : Visitor) {
		if (v) {
			v.visitAssignmentMinuxEqualOperator(this)
		} else {
			new DefaultVisitor().visitAssignmentMinuxEqualOperator(this)
		}
	}
}

export class AssignmentLeftShiftOperator implements AssignmentOperator {
	accept(v? : Visitor) {
		if (v) {
			v.visitAssignmentLeftShiftOperator(this)
		} else {
			new DefaultVisitor().visitAssignmentLeftShiftOperator(this)
		}
	}
}

export class AssignmentRightShiftOperator implements AssignmentOperator {
	accept(v? : Visitor) {
		if (v) {
			v.visitAssignmentRightShiftOperator(this)
		} else {
			new DefaultVisitor().visitAssignmentRightShiftOperator(this)
		}
	}
}

export class AssignmentAndEqualOperator implements AssignmentOperator {
	accept(v? : Visitor) {
		if (v) {
			v.visitAssignmentAndEqualOperator(this)
		} else {
			new DefaultVisitor().visitAssignmentAndEqualOperator(this)
		}
	}
}

export class AssignmentXorEqualOperator implements AssignmentOperator {
	accept(v? : Visitor) {
		if (v) {
			v.visitAssignmentXorEqualOperator(this)
		} else {
			new DefaultVisitor().visitAssignmentXorEqualOperator(this)
		}
	}
}

export class AssignmentOrEqualOperator implements AssignmentOperator {
	accept(v? : Visitor) {
		if (v) {
			v.visitAssignmentOrEqualOperator(this)
		} else {
			new DefaultVisitor().visitAssignmentOrEqualOperator(this)
		}
	}
}

export class CastExpression implements CastExpression {
	arg1 : UnaryExpression
	constructor(arg1 : UnaryExpression) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visitCastExpression(this)
		} else {
			new DefaultVisitor().visitCastExpression(this)
		}
	}
}

export class ConstantInteger implements Constant {
	arg1 : number
	constructor(arg1 : number) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visitConstantInteger(this)
		} else {
			new DefaultVisitor().visitConstantInteger(this)
		}
	}
}

export class ConstantString implements Constant {
	arg1 : string
	constructor(arg1 : string) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visitConstantString(this)
		} else {
			new DefaultVisitor().visitConstantString(this)
		}
	}
}

export class ConstantFloat implements Constant {
	arg1 : number
	constructor(arg1 : number) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visitConstantFloat(this)
		} else {
			new DefaultVisitor().visitConstantFloat(this)
		}
	}
}

export class ConstantEnum implements Constant {
	arg1 : EnumerationConstant
	constructor(arg1 : EnumerationConstant) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visitConstantEnum(this)
		} else {
			new DefaultVisitor().visitConstantEnum(this)
		}
	}
}

export class EnumIdentifierListSpecifier implements EnumSpecifier {
	arg1 : Identifier
	arg2 : EnumeratorList
	constructor(arg1 : Identifier, arg2 : EnumeratorList) {
		this.arg1 = arg1
		this.arg2 = arg2
	}
	accept(v? : Visitor) {
		if (v) {
			v.visitEnumIdentifierListSpecifier(this)
		} else {
			new DefaultVisitor().visitEnumIdentifierListSpecifier(this)
		}
	}
}

export class EnumListSpecifier implements EnumSpecifier {
	arg1 : EnumeratorList
	constructor(arg1 : EnumeratorList) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visitEnumListSpecifier(this)
		} else {
			new DefaultVisitor().visitEnumListSpecifier(this)
		}
	}
}

export class EnumIdentifierSpecifier implements EnumSpecifier {
	arg1 : Identifier
	constructor(arg1 : Identifier) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visitEnumIdentifierSpecifier(this)
		} else {
			new DefaultVisitor().visitEnumIdentifierSpecifier(this)
		}
	}
}

export class EnumeratorIdentifier implements Enumerator {
	arg1 : Identifier
	constructor(arg1 : Identifier) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visitEnumeratorIdentifier(this)
		} else {
			new DefaultVisitor().visitEnumeratorIdentifier(this)
		}
	}
}

export class EnumeratorList implements EnumeratorList {
	arg1 : Enumerator
	constructor(arg1 : Enumerator) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visitEnumeratorList(this)
		} else {
			new DefaultVisitor().visitEnumeratorList(this)
		}
	}
}

export class EnumeratorLists implements EnumeratorList {
	arg1 : EnumeratorList
	arg2 : Enumerator
	constructor(arg1 : EnumeratorList, arg2 : Enumerator) {
		this.arg1 = arg1
		this.arg2 = arg2
	}
	accept(v? : Visitor) {
		if (v) {
			v.visitEnumeratorLists(this)
		} else {
			new DefaultVisitor().visitEnumeratorLists(this)
		}
	}
}

export class Identifier implements Identifier {
	arg1 : ConstantExpression
	constructor(arg1 : ConstantExpression) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visitIdentifier(this)
		} else {
			new DefaultVisitor().visitIdentifier(this)
		}
	}
}

export class DeclaratorParameterDeclaration implements ParameterDeclaration {
	arg1 : DeclarationSpecifier
	arg2 : DeclarationSpecifiers
	arg3 : Declarator
	constructor(arg1 : DeclarationSpecifier, arg2 : DeclarationSpecifiers, arg3 : Declarator) {
		this.arg1 = arg1
		this.arg2 = arg2
		this.arg3 = arg3
	}
	accept(v? : Visitor) {
		if (v) {
			v.visitDeclaratorParameterDeclaration(this)
		} else {
			new DefaultVisitor().visitDeclaratorParameterDeclaration(this)
		}
	}
}

export class AbstractParameterDeclaration implements ParameterDeclaration {
	arg1 : DeclarationSpecifier
	arg2 : DeclarationSpecifiers
	arg3 : AbstractDeclarator
	constructor(arg1 : DeclarationSpecifier, arg2 : DeclarationSpecifiers, arg3 : AbstractDeclarator) {
		this.arg1 = arg1
		this.arg2 = arg2
		this.arg3 = arg3
	}
	accept(v? : Visitor) {
		if (v) {
			v.visitAbstractParameterDeclaration(this)
		} else {
			new DefaultVisitor().visitAbstractParameterDeclaration(this)
		}
	}
}

export class ParameterDeclaration implements ParameterDeclaration {
	arg1 : DeclarationSpecifier
	arg2 : DeclarationSpecifiers
	constructor(arg1 : DeclarationSpecifier, arg2 : DeclarationSpecifiers) {
		this.arg1 = arg1
		this.arg2 = arg2
	}
	accept(v? : Visitor) {
		if (v) {
			v.visitParameterDeclaration(this)
		} else {
			new DefaultVisitor().visitParameterDeclaration(this)
		}
	}
}

export class ParameterList implements ParameterList {
	arg1 : ParameterDeclaration
	constructor(arg1 : ParameterDeclaration) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visitParameterList(this)
		} else {
			new DefaultVisitor().visitParameterList(this)
		}
	}
}

export class ParameterLists implements ParameterList {
	arg1 : ParameterList
	arg2 : ParameterDeclaration
	constructor(arg1 : ParameterList, arg2 : ParameterDeclaration) {
		this.arg1 = arg1
		this.arg2 = arg2
	}
	accept(v? : Visitor) {
		if (v) {
			v.visitParameterLists(this)
		} else {
			new DefaultVisitor().visitParameterLists(this)
		}
	}
}

export class PostfixPrimaryExpression implements PostfixExpression {
	arg1 : PrimaryExpression
	constructor(arg1 : PrimaryExpression) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visitPostfixPrimaryExpression(this)
		} else {
			new DefaultVisitor().visitPostfixPrimaryExpression(this)
		}
	}
}

export class PostfixExpressions implements PostfixExpression {
	arg1 : PostfixExpression
	arg2 : Expression
	constructor(arg1 : PostfixExpression, arg2 : Expression) {
		this.arg1 = arg1
		this.arg2 = arg2
	}
	accept(v? : Visitor) {
		if (v) {
			v.visitPostfixExpressions(this)
		} else {
			new DefaultVisitor().visitPostfixExpressions(this)
		}
	}
}

export class PostfixAssignmentExpressions implements PostfixExpression {
	arg1 : PostfixExpression
	arg2 : AssignmentExpressions
	constructor(arg1 : PostfixExpression, arg2 : AssignmentExpressions) {
		this.arg1 = arg1
		this.arg2 = arg2
	}
	accept(v? : Visitor) {
		if (v) {
			v.visitPostfixAssignmentExpressions(this)
		} else {
			new DefaultVisitor().visitPostfixAssignmentExpressions(this)
		}
	}
}

export class PostfixDotExpressions implements PostfixExpression {
	arg1 : PostfixExpression
	arg2 : Identifier
	constructor(arg1 : PostfixExpression, arg2 : Identifier) {
		this.arg1 = arg1
		this.arg2 = arg2
	}
	accept(v? : Visitor) {
		if (v) {
			v.visitPostfixDotExpressions(this)
		} else {
			new DefaultVisitor().visitPostfixDotExpressions(this)
		}
	}
}

export class PostfixArrowExpressions implements PostfixExpression {
	arg1 : PostfixExpression
	arg2 : Identifier
	constructor(arg1 : PostfixExpression, arg2 : Identifier) {
		this.arg1 = arg1
		this.arg2 = arg2
	}
	accept(v? : Visitor) {
		if (v) {
			v.visitPostfixArrowExpressions(this)
		} else {
			new DefaultVisitor().visitPostfixArrowExpressions(this)
		}
	}
}

export class PostfixPlusExpressions implements PostfixExpression {
	arg1 : PostfixExpression
	constructor(arg1 : PostfixExpression) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visitPostfixPlusExpressions(this)
		} else {
			new DefaultVisitor().visitPostfixPlusExpressions(this)
		}
	}
}

export class PostfixMinusExpressions implements PostfixExpression {
	arg1 : PostfixExpression
	constructor(arg1 : PostfixExpression) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visitPostfixMinusExpressions(this)
		} else {
			new DefaultVisitor().visitPostfixMinusExpressions(this)
		}
	}
}

export class PrimaryIdentifierExpression implements PrimaryExpression {
	arg1 : Identifier
	constructor(arg1 : Identifier) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visitPrimaryIdentifierExpression(this)
		} else {
			new DefaultVisitor().visitPrimaryIdentifierExpression(this)
		}
	}
}

export class PrimaryConstantExpression implements PrimaryExpression {
	arg1 : Constant
	constructor(arg1 : Constant) {
		this.arg1 = arg1
	}
	accept(v? : Visitor) {
		if (v) {
			v.visitPrimaryConstantExpression(this)
		} else {
			new DefaultVisitor().visitPrimaryConstantExpression(this)
		}
	}
}

export class UnaryAndOperator implements UnaryOperator {
	accept(v? : Visitor) {
		if (v) {
			v.visitUnaryAndOperator(this)
		} else {
			new DefaultVisitor().visitUnaryAndOperator(this)
		}
	}
}

export class UnaryMultiOperator implements UnaryOperator {
	accept(v? : Visitor) {
		if (v) {
			v.visitUnaryMultiOperator(this)
		} else {
			new DefaultVisitor().visitUnaryMultiOperator(this)
		}
	}
}

export class UnaryPlusOperator implements UnaryOperator {
	accept(v? : Visitor) {
		if (v) {
			v.visitUnaryPlusOperator(this)
		} else {
			new DefaultVisitor().visitUnaryPlusOperator(this)
		}
	}
}

export class UnaryMinusOperator implements UnaryOperator {
	accept(v? : Visitor) {
		if (v) {
			v.visitUnaryMinusOperator(this)
		} else {
			new DefaultVisitor().visitUnaryMinusOperator(this)
		}
	}
}

export class UnaryComplementOperator implements UnaryOperator {
	accept(v? : Visitor) {
		if (v) {
			v.visitUnaryComplementOperator(this)
		} else {
			new DefaultVisitor().visitUnaryComplementOperator(this)
		}
	}
}

export class UnaryNotOperator implements UnaryOperator {
	accept(v? : Visitor) {
		if (v) {
			v.visitUnaryNotOperator(this)
		} else {
			new DefaultVisitor().visitUnaryNotOperator(this)
		}
	}
}











interface Visitor {
	visitUnaryPostfixExpression(host : UnaryPostfixExpression): void
	visitUnaryPlusExpression(host : UnaryPlusExpression): void
	visitUnaryMinusExpression(host : UnaryMinusExpression): void
	visitUnaryOperatorCastExpression(host : UnaryOperatorCastExpression): void
	visitUnarySizeofExpression(host : UnarySizeofExpression): void
	visitAbstractPointerDeclarator(host : AbstractPointerDeclarator): void
	visitAbstractPointerDirectDeclarator(host : AbstractPointerDirectDeclarator): void
	visitAbstractDirectDeclarator(host : AbstractDirectDeclarator): void
	visitConditionalAssignmentExpression(host : ConditionalAssignmentExpression): void
	visitAssignmentExpressions(host : AssignmentExpressions): void
	visitAssignmentExpressions(host : AssignmentExpressions): void
	visitEpsilonAssignmentExpressions(host : EpsilonAssignmentExpressions): void
	visitAssignmentEqualOperator(host : AssignmentEqualOperator): void
	visitAssignmentMultiEqualOperator(host : AssignmentMultiEqualOperator): void
	visitAssignmentDivEqualOperator(host : AssignmentDivEqualOperator): void
	visitAssignmentPercentEqualOperator(host : AssignmentPercentEqualOperator): void
	visitAssignmentPlusEqualOperator(host : AssignmentPlusEqualOperator): void
	visitAssignmentMinuxEqualOperator(host : AssignmentMinuxEqualOperator): void
	visitAssignmentLeftShiftOperator(host : AssignmentLeftShiftOperator): void
	visitAssignmentRightShiftOperator(host : AssignmentRightShiftOperator): void
	visitAssignmentAndEqualOperator(host : AssignmentAndEqualOperator): void
	visitAssignmentXorEqualOperator(host : AssignmentXorEqualOperator): void
	visitAssignmentOrEqualOperator(host : AssignmentOrEqualOperator): void
	visitCastExpression(host : CastExpression): void
	visitConstantInteger(host : ConstantInteger): void
	visitConstantString(host : ConstantString): void
	visitConstantFloat(host : ConstantFloat): void
	visitConstantEnum(host : ConstantEnum): void
	visitEnumIdentifierListSpecifier(host : EnumIdentifierListSpecifier): void
	visitEnumListSpecifier(host : EnumListSpecifier): void
	visitEnumIdentifierSpecifier(host : EnumIdentifierSpecifier): void
	visitEnumeratorIdentifier(host : EnumeratorIdentifier): void
	visitEnumeratorList(host : EnumeratorList): void
	visitEnumeratorLists(host : EnumeratorLists): void
	visitIdentifier(host : Identifier): void
	visitDeclaratorParameterDeclaration(host : DeclaratorParameterDeclaration): void
	visitAbstractParameterDeclaration(host : AbstractParameterDeclaration): void
	visitParameterDeclaration(host : ParameterDeclaration): void
	visitParameterList(host : ParameterList): void
	visitParameterLists(host : ParameterLists): void
	visitPostfixPrimaryExpression(host : PostfixPrimaryExpression): void
	visitPostfixExpressions(host : PostfixExpressions): void
	visitPostfixAssignmentExpressions(host : PostfixAssignmentExpressions): void
	visitPostfixDotExpressions(host : PostfixDotExpressions): void
	visitPostfixArrowExpressions(host : PostfixArrowExpressions): void
	visitPostfixPlusExpressions(host : PostfixPlusExpressions): void
	visitPostfixMinusExpressions(host : PostfixMinusExpressions): void
	visitPrimaryIdentifierExpression(host : PrimaryIdentifierExpression): void
	visitPrimaryConstantExpression(host : PrimaryConstantExpression): void
	visitUnaryAndOperator(host : UnaryAndOperator): void
	visitUnaryMultiOperator(host : UnaryMultiOperator): void
	visitUnaryPlusOperator(host : UnaryPlusOperator): void
	visitUnaryMinusOperator(host : UnaryMinusOperator): void
	visitUnaryComplementOperator(host : UnaryComplementOperator): void
	visitUnaryNotOperator(host : UnaryNotOperator): void
}

export class DefaultVisitor implements Visitor {
	visitUnaryPostfixExpression(host : UnaryPostfixExpression) {
		host.arg1.accept(this)
	}
	visitUnaryPlusExpression(host : UnaryPlusExpression) {
		process.stdout.write("plusPlus")
		process.stdout.write(" ")
		host.arg1.accept(this)
	}
	visitUnaryMinusExpression(host : UnaryMinusExpression) {
		process.stdout.write("minusMinus")
		process.stdout.write(" ")
		host.arg1.accept(this)
	}
	visitUnaryOperatorCastExpression(host : UnaryOperatorCastExpression) {
		host.arg1.accept(this)
		process.stdout.write(" ")
		host.arg2.accept(this)
	}
	visitUnarySizeofExpression(host : UnarySizeofExpression) {
		process.stdout.write("sizeof")
		process.stdout.write(" ")
		host.arg1.accept(this)
	}
	visitAbstractPointerDeclarator(host : AbstractPointerDeclarator) {
		host.arg1.accept(this)
	}
	visitAbstractPointerDirectDeclarator(host : AbstractPointerDirectDeclarator) {
		host.arg1.accept(this)
		process.stdout.write(" ")
		host.arg2.accept(this)
	}
	visitAbstractDirectDeclarator(host : AbstractDirectDeclarator) {
		host.arg1.accept(this)
	}
	visitConditionalAssignmentExpression(host : ConditionalAssignmentExpression) {
		host.arg1.accept(this)
	}
	visitAssignmentExpressions(host : AssignmentExpressions) {
		host.arg1.accept(this)
		process.stdout.write(" ")
		host.arg2.accept(this)
		process.stdout.write(" ")
		host.arg3.accept(this)
	}
	visitAssignmentExpressions(host : AssignmentExpressions) {
		host.arg1.accept(this)
		process.stdout.write(" ")
		host.arg2.accept(this)
	}
	visitEpsilonAssignmentExpressions(host : EpsilonAssignmentExpressions) {
		host.arg1.accept(this)
	}
	visitAssignmentEqualOperator(host : AssignmentEqualOperator) {
		process.stdout.write("euaql")
	}
	visitAssignmentMultiEqualOperator(host : AssignmentMultiEqualOperator) {
		process.stdout.write("multiEqual")
	}
	visitAssignmentDivEqualOperator(host : AssignmentDivEqualOperator) {
		process.stdout.write("divEqual")
	}
	visitAssignmentPercentEqualOperator(host : AssignmentPercentEqualOperator) {
		process.stdout.write("percentEqual")
	}
	visitAssignmentPlusEqualOperator(host : AssignmentPlusEqualOperator) {
		process.stdout.write("plusEqual")
	}
	visitAssignmentMinuxEqualOperator(host : AssignmentMinuxEqualOperator) {
		process.stdout.write("minusEqual")
	}
	visitAssignmentLeftShiftOperator(host : AssignmentLeftShiftOperator) {
		process.stdout.write("leftShiftEqual")
	}
	visitAssignmentRightShiftOperator(host : AssignmentRightShiftOperator) {
		process.stdout.write("rifhtShiftEqual")
	}
	visitAssignmentAndEqualOperator(host : AssignmentAndEqualOperator) {
		process.stdout.write("andEqual")
	}
	visitAssignmentXorEqualOperator(host : AssignmentXorEqualOperator) {
		process.stdout.write("xorEqual")
	}
	visitAssignmentOrEqualOperator(host : AssignmentOrEqualOperator) {
		process.stdout.write("orEqual")
	}
	visitCastExpression(host : CastExpression) {
		host.arg1.accept(this)
	}
	visitConstantInteger(host : ConstantInteger) {
		process.stdout.write(""+host.arg1)
	}
	visitConstantString(host : ConstantString) {
		process.stdout.write(""+host.arg1)
	}
	visitConstantFloat(host : ConstantFloat) {
		process.stdout.write(""+host.arg1)
	}
	visitConstantEnum(host : ConstantEnum) {
		host.arg1.accept(this)
	}
	visitEnumIdentifierListSpecifier(host : EnumIdentifierListSpecifier) {
		process.stdout.write("enum")
		process.stdout.write(" ")
		host.arg1.accept(this)
		process.stdout.write(" ")
		host.arg2.accept(this)
	}
	visitEnumListSpecifier(host : EnumListSpecifier) {
		process.stdout.write("enum")
		process.stdout.write(" ")
		host.arg1.accept(this)
	}
	visitEnumIdentifierSpecifier(host : EnumIdentifierSpecifier) {
		process.stdout.write("enum")
		process.stdout.write(" ")
		host.arg1.accept(this)
	}
	visitEnumeratorIdentifier(host : EnumeratorIdentifier) {
		host.arg1.accept(this)
	}
	visitEnumeratorList(host : EnumeratorList) {
		host.arg1.accept(this)
	}
	visitEnumeratorLists(host : EnumeratorLists) {
		host.arg1.accept(this)
		process.stdout.write(" ")
		host.arg2.accept(this)
	}
	visitIdentifier(host : Identifier) {
		host.arg1.accept(this)
	}
	visitDeclaratorParameterDeclaration(host : DeclaratorParameterDeclaration) {
		host.arg1.accept(this)
		process.stdout.write(" ")
		host.arg2.accept(this)
		process.stdout.write(" ")
		host.arg3.accept(this)
	}
	visitAbstractParameterDeclaration(host : AbstractParameterDeclaration) {
		host.arg1.accept(this)
		process.stdout.write(" ")
		host.arg2.accept(this)
		process.stdout.write(" ")
		host.arg3.accept(this)
	}
	visitParameterDeclaration(host : ParameterDeclaration) {
		host.arg1.accept(this)
		process.stdout.write(" ")
		host.arg2.accept(this)
	}
	visitParameterList(host : ParameterList) {
		host.arg1.accept(this)
	}
	visitParameterLists(host : ParameterLists) {
		host.arg1.accept(this)
		process.stdout.write(" ")
		host.arg2.accept(this)
	}
	visitPostfixPrimaryExpression(host : PostfixPrimaryExpression) {
		host.arg1.accept(this)
	}
	visitPostfixExpressions(host : PostfixExpressions) {
		host.arg1.accept(this)
		process.stdout.write(" ")
		host.arg2.accept(this)
	}
	visitPostfixAssignmentExpressions(host : PostfixAssignmentExpressions) {
		host.arg1.accept(this)
		process.stdout.write(" ")
		host.arg2.accept(this)
	}
	visitPostfixDotExpressions(host : PostfixDotExpressions) {
		host.arg1.accept(this)
		process.stdout.write(" ")
		process.stdout.write("dot")
		process.stdout.write(" ")
		host.arg2.accept(this)
	}
	visitPostfixArrowExpressions(host : PostfixArrowExpressions) {
		host.arg1.accept(this)
		process.stdout.write(" ")
		process.stdout.write("arrow")
		process.stdout.write(" ")
		host.arg2.accept(this)
	}
	visitPostfixPlusExpressions(host : PostfixPlusExpressions) {
		host.arg1.accept(this)
		process.stdout.write(" ")
		process.stdout.write("plusPlus")
	}
	visitPostfixMinusExpressions(host : PostfixMinusExpressions) {
		host.arg1.accept(this)
		process.stdout.write(" ")
		process.stdout.write("minusMinus")
	}
	visitPrimaryIdentifierExpression(host : PrimaryIdentifierExpression) {
		host.arg1.accept(this)
	}
	visitPrimaryConstantExpression(host : PrimaryConstantExpression) {
		host.arg1.accept(this)
	}
	visitUnaryAndOperator(host : UnaryAndOperator) {
		process.stdout.write("and")
	}
	visitUnaryMultiOperator(host : UnaryMultiOperator) {
		process.stdout.write("multi")
	}
	visitUnaryPlusOperator(host : UnaryPlusOperator) {
		process.stdout.write("plus")
	}
	visitUnaryMinusOperator(host : UnaryMinusOperator) {
		process.stdout.write("minus")
	}
	visitUnaryComplementOperator(host : UnaryComplementOperator) {
		process.stdout.write("complement")
	}
	visitUnaryNotOperator(host : UnaryNotOperator) {
		process.stdout.write("not")
	}
}

///////////////////////////////////////////////////////////////////////////////

// automaton states

type Node = Node1 | Node2 | Node3 | Node4 | Node5 | Node6 | Node7 | Node8 | Node9 | Node10 | Node11 | Node12 | Node13 | Node14 | Node15 | Node16 | Node17 | Node18 | Node19 | Node20 | Node21 | Node22 | Node23 | Node24 | Node25 | Node26 | Node27 | Node28 | Node29 | Node30 | Node31 | Node32 | Node33 | Node34 | Node35 | Node36 | Node37 | Node38 | Node39 | Node40 | Node41 | Node42 | Node43 | Node44 | Node45 | Node46 | Node47 | Node48 | Node49 | Node50 | Node51 | Node52

class Node1 {
	private _Node1Brand: boolean = true
}

class Node2 {
	private _Node2Brand: boolean = true
	arg1 : UnaryExpression
	constructor(arg1 : UnaryExpression) {
		this.arg1 = arg1
	}
}

class Node3 {
	private _Node3Brand: boolean = true
}

class Node4 {
	private _Node4Brand: boolean = true
	arg1 : UnaryExpression
	constructor(arg1 : UnaryExpression) {
		this.arg1 = arg1
	}
}

class Node5 {
	private _Node5Brand: boolean = true
}

class Node6 {
	private _Node6Brand: boolean = true
}

class Node7 {
	private _Node7Brand: boolean = true
	arg1 : AssignmentExpression
	constructor(arg1 : AssignmentExpression) {
		this.arg1 = arg1
	}
}

class Node8 {
	private _Node8Brand: boolean = true
	arg1 : AssignmentOperator
	constructor(arg1 : AssignmentOperator) {
		this.arg1 = arg1
	}
}

class Node9 {
	private _Node9Brand: boolean = true
	arg1 : AssignmentExpression
	constructor(arg1 : AssignmentExpression) {
		this.arg1 = arg1
	}
}

class Node10 {
	private _Node10Brand: boolean = true
	arg1 : PostfixExpression
	constructor(arg1 : PostfixExpression) {
		this.arg1 = arg1
	}
}

class Node11 {
	private _Node11Brand: boolean = true
	arg1 : AssignmentExpressions
	constructor(arg1 : AssignmentExpressions) {
		this.arg1 = arg1
	}
}

class Node12 {
	private _Node12Brand: boolean = true
}

class Node13 {
	private _Node13Brand: boolean = true
}

class Node14 {
	private _Node14Brand: boolean = true
}

class Node15 {
	private _Node15Brand: boolean = true
}

class Node16 {
	private _Node16Brand: boolean = true
}

class Node17 {
	private _Node17Brand: boolean = true
}

class Node18 {
	private _Node18Brand: boolean = true
}

class Node19 {
	private _Node19Brand: boolean = true
}

class Node20 {
	private _Node20Brand: boolean = true
	arg1 : UnaryExpression
	constructor(arg1 : UnaryExpression) {
		this.arg1 = arg1
	}
}

class Node21 {
	private _Node21Brand: boolean = true
	arg1 : UnaryOperator
	constructor(arg1 : UnaryOperator) {
		this.arg1 = arg1
	}
}

class Node22 {
	private _Node22Brand: boolean = true
	arg1 : ConditionalExpression
	constructor(arg1 : ConditionalExpression) {
		this.arg1 = arg1
	}
}

class Node23 {
	private _Node23Brand: boolean = true
	arg1 : EnumerationConstant
	constructor(arg1 : EnumerationConstant) {
		this.arg1 = arg1
	}
}

class Node24 {
	private _Node24Brand: boolean = true
}

class Node25 {
	private _Node25Brand: boolean = true
}

class Node26 {
	private _Node26Brand: boolean = true
}

class Node27 {
	private _Node27Brand: boolean = true
}

class Node28 {
	private _Node28Brand: boolean = true
}

class Node29 {
	private _Node29Brand: boolean = true
	arg1 : number
	constructor(arg1 : number) {
		this.arg1 = arg1
	}
}

class Node30 {
	private _Node30Brand: boolean = true
	arg1 : number
	constructor(arg1 : number) {
		this.arg1 = arg1
	}
}

class Node31 {
	private _Node31Brand: boolean = true
	arg1 : string
	constructor(arg1 : string) {
		this.arg1 = arg1
	}
}

class Node32 {
	private _Node32Brand: boolean = true
	arg1 : Eps
	constructor(arg1 : Eps) {
		this.arg1 = arg1
	}
}

class Node33 {
	private _Node33Brand: boolean = true
	arg1 : ConstantExpression
	constructor(arg1 : ConstantExpression) {
		this.arg1 = arg1
	}
}

class Node34 {
	private _Node34Brand: boolean = true
}

class Node35 {
	private _Node35Brand: boolean = true
}

class Node36 {
	private _Node36Brand: boolean = true
	arg1 : Identifier
	constructor(arg1 : Identifier) {
		this.arg1 = arg1
	}
}

class Node37 {
	private _Node37Brand: boolean = true
	arg1 : AssignmentExpressions
	constructor(arg1 : AssignmentExpressions) {
		this.arg1 = arg1
	}
}

class Node38 {
	private _Node38Brand: boolean = true
	arg1 : Identifier
	constructor(arg1 : Identifier) {
		this.arg1 = arg1
	}
}

class Node39 {
	private _Node39Brand: boolean = true
	arg1 : Expression
	constructor(arg1 : Expression) {
		this.arg1 = arg1
	}
}

class Node40 {
	private _Node40Brand: boolean = true
	arg1 : PrimaryExpression
	constructor(arg1 : PrimaryExpression) {
		this.arg1 = arg1
	}
}

class Node41 {
	private _Node41Brand: boolean = true
	arg1 : Constant
	constructor(arg1 : Constant) {
		this.arg1 = arg1
	}
}

class Node42 {
	private _Node42Brand: boolean = true
	arg1 : Identifier
	constructor(arg1 : Identifier) {
		this.arg1 = arg1
	}
}

class Node43 {
	private _Node43Brand: boolean = true
}

class Node44 {
	private _Node44Brand: boolean = true
}

class Node45 {
	private _Node45Brand: boolean = true
	arg1 : UnaryExpression
	constructor(arg1 : UnaryExpression) {
		this.arg1 = arg1
	}
}

class Node46 {
	private _Node46Brand: boolean = true
}

class Node47 {
	private _Node47Brand: boolean = true
}

class Node48 {
	private _Node48Brand: boolean = true
}

class Node49 {
	private _Node49Brand: boolean = true
	arg1 : CastExpression
	constructor(arg1 : CastExpression) {
		this.arg1 = arg1
	}
}

class Node50 {
	private _Node50Brand: boolean = true
	arg1 : UnaryExpression
	constructor(arg1 : UnaryExpression) {
		this.arg1 = arg1
	}
}

class Node51 {
	private _Node51Brand: boolean = true
}

class Node52 {
	private _Node52Brand: boolean = true
	arg1 : UnaryExpression
	constructor(arg1 : UnaryExpression) {
		this.arg1 = arg1
	}
}

///////////////////////////////////////////////////////////////////////////////

// transitions

function startsWithNode1(arg: any): arg is AddUnknownNodeRest<[Node1]> {
	return arg[0] && arg[0]._Node1Brand
}

function startsWithNode10(arg: any): arg is AddUnknownNodeRest<[Node10]> {
	return arg[0] && arg[0]._Node10Brand
}

function startsWithNode10Node1(arg: any): arg is AddUnknownNodeRest<[Node10, Node1]> {
	return arg[0] && arg[0]._Node10Brand
		&& arg[1] && arg[1]._Node1Brand
}

function startsWithNode10Node10(arg: any): arg is AddUnknownNodeRest<[Node10, Node10]> {
	return arg[0] && arg[0]._Node10Brand
		&& arg[1] && arg[1]._Node10Brand
}

function startsWithNode10Node21(arg: any): arg is AddUnknownNodeRest<[Node10, Node21]> {
	return arg[0] && arg[0]._Node10Brand
		&& arg[1] && arg[1]._Node21Brand
}

function startsWithNode10Node24(arg: any): arg is AddUnknownNodeRest<[Node10, Node24]> {
	return arg[0] && arg[0]._Node10Brand
		&& arg[1] && arg[1]._Node24Brand
}

function startsWithNode10Node25(arg: any): arg is AddUnknownNodeRest<[Node10, Node25]> {
	return arg[0] && arg[0]._Node10Brand
		&& arg[1] && arg[1]._Node25Brand
}

function startsWithNode10Node26(arg: any): arg is AddUnknownNodeRest<[Node10, Node26]> {
	return arg[0] && arg[0]._Node10Brand
		&& arg[1] && arg[1]._Node26Brand
}

function startsWithNode10Node27(arg: any): arg is AddUnknownNodeRest<[Node10, Node27]> {
	return arg[0] && arg[0]._Node10Brand
		&& arg[1] && arg[1]._Node27Brand
}

function startsWithNode10Node28(arg: any): arg is AddUnknownNodeRest<[Node10, Node28]> {
	return arg[0] && arg[0]._Node10Brand
		&& arg[1] && arg[1]._Node28Brand
}

function startsWithNode10Node8(arg: any): arg is AddUnknownNodeRest<[Node10, Node8]> {
	return arg[0] && arg[0]._Node10Brand
		&& arg[1] && arg[1]._Node8Brand
}

function startsWithNode10Node9(arg: any): arg is AddUnknownNodeRest<[Node10, Node9]> {
	return arg[0] && arg[0]._Node10Brand
		&& arg[1] && arg[1]._Node9Brand
}

function startsWithNode11Node9Node10(arg: any): arg is AddUnknownNodeRest<[Node11, Node9, Node10]> {
	return arg[0] && arg[0]._Node11Brand
		&& arg[1] && arg[1]._Node9Brand
		&& arg[2] && arg[2]._Node10Brand
}

function startsWithNode11Node9Node9(arg: any): arg is AddUnknownNodeRest<[Node11, Node9, Node9]> {
	return arg[0] && arg[0]._Node11Brand
		&& arg[1] && arg[1]._Node9Brand
		&& arg[2] && arg[2]._Node9Brand
}

function startsWithNode12Node4(arg: any): arg is AddUnknownNodeRest<[Node12, Node4]> {
	return arg[0] && arg[0]._Node12Brand
		&& arg[1] && arg[1]._Node4Brand
}

function startsWithNode13Node4(arg: any): arg is AddUnknownNodeRest<[Node13, Node4]> {
	return arg[0] && arg[0]._Node13Brand
		&& arg[1] && arg[1]._Node4Brand
}

function startsWithNode14Node4(arg: any): arg is AddUnknownNodeRest<[Node14, Node4]> {
	return arg[0] && arg[0]._Node14Brand
		&& arg[1] && arg[1]._Node4Brand
}

function startsWithNode15Node4(arg: any): arg is AddUnknownNodeRest<[Node15, Node4]> {
	return arg[0] && arg[0]._Node15Brand
		&& arg[1] && arg[1]._Node4Brand
}

function startsWithNode16Node4(arg: any): arg is AddUnknownNodeRest<[Node16, Node4]> {
	return arg[0] && arg[0]._Node16Brand
		&& arg[1] && arg[1]._Node4Brand
}

function startsWithNode17Node4(arg: any): arg is AddUnknownNodeRest<[Node17, Node4]> {
	return arg[0] && arg[0]._Node17Brand
		&& arg[1] && arg[1]._Node4Brand
}

function startsWithNode18Node4(arg: any): arg is AddUnknownNodeRest<[Node18, Node4]> {
	return arg[0] && arg[0]._Node18Brand
		&& arg[1] && arg[1]._Node4Brand
}

function startsWithNode19Node4(arg: any): arg is AddUnknownNodeRest<[Node19, Node4]> {
	return arg[0] && arg[0]._Node19Brand
		&& arg[1] && arg[1]._Node4Brand
}

function startsWithNode2(arg: any): arg is AddUnknownNodeRest<[Node2]> {
	return arg[0] && arg[0]._Node2Brand
}

function startsWithNode20Node21(arg: any): arg is AddUnknownNodeRest<[Node20, Node21]> {
	return arg[0] && arg[0]._Node20Brand
		&& arg[1] && arg[1]._Node21Brand
}

function startsWithNode21(arg: any): arg is AddUnknownNodeRest<[Node21]> {
	return arg[0] && arg[0]._Node21Brand
}

function startsWithNode22Node10(arg: any): arg is AddUnknownNodeRest<[Node22, Node10]> {
	return arg[0] && arg[0]._Node22Brand
		&& arg[1] && arg[1]._Node10Brand
}

function startsWithNode22Node8(arg: any): arg is AddUnknownNodeRest<[Node22, Node8]> {
	return arg[0] && arg[0]._Node22Brand
		&& arg[1] && arg[1]._Node8Brand
}

function startsWithNode22Node9(arg: any): arg is AddUnknownNodeRest<[Node22, Node9]> {
	return arg[0] && arg[0]._Node22Brand
		&& arg[1] && arg[1]._Node9Brand
}

function startsWithNode23Node1(arg: any): arg is AddUnknownNodeRest<[Node23, Node1]> {
	return arg[0] && arg[0]._Node23Brand
		&& arg[1] && arg[1]._Node1Brand
}

function startsWithNode23Node10(arg: any): arg is AddUnknownNodeRest<[Node23, Node10]> {
	return arg[0] && arg[0]._Node23Brand
		&& arg[1] && arg[1]._Node10Brand
}

function startsWithNode23Node21(arg: any): arg is AddUnknownNodeRest<[Node23, Node21]> {
	return arg[0] && arg[0]._Node23Brand
		&& arg[1] && arg[1]._Node21Brand
}

function startsWithNode23Node24(arg: any): arg is AddUnknownNodeRest<[Node23, Node24]> {
	return arg[0] && arg[0]._Node23Brand
		&& arg[1] && arg[1]._Node24Brand
}

function startsWithNode23Node25(arg: any): arg is AddUnknownNodeRest<[Node23, Node25]> {
	return arg[0] && arg[0]._Node23Brand
		&& arg[1] && arg[1]._Node25Brand
}

function startsWithNode23Node26(arg: any): arg is AddUnknownNodeRest<[Node23, Node26]> {
	return arg[0] && arg[0]._Node23Brand
		&& arg[1] && arg[1]._Node26Brand
}

function startsWithNode23Node27(arg: any): arg is AddUnknownNodeRest<[Node23, Node27]> {
	return arg[0] && arg[0]._Node23Brand
		&& arg[1] && arg[1]._Node27Brand
}

function startsWithNode23Node28(arg: any): arg is AddUnknownNodeRest<[Node23, Node28]> {
	return arg[0] && arg[0]._Node23Brand
		&& arg[1] && arg[1]._Node28Brand
}

function startsWithNode23Node8(arg: any): arg is AddUnknownNodeRest<[Node23, Node8]> {
	return arg[0] && arg[0]._Node23Brand
		&& arg[1] && arg[1]._Node8Brand
}

function startsWithNode23Node9(arg: any): arg is AddUnknownNodeRest<[Node23, Node9]> {
	return arg[0] && arg[0]._Node23Brand
		&& arg[1] && arg[1]._Node9Brand
}

function startsWithNode24(arg: any): arg is AddUnknownNodeRest<[Node24]> {
	return arg[0] && arg[0]._Node24Brand
}

function startsWithNode24Node10Node1(arg: any): arg is AddUnknownNodeRest<[Node24, Node10, Node1]> {
	return arg[0] && arg[0]._Node24Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node1Brand
}

function startsWithNode24Node10Node10(arg: any): arg is AddUnknownNodeRest<[Node24, Node10, Node10]> {
	return arg[0] && arg[0]._Node24Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node10Brand
}

function startsWithNode24Node10Node21(arg: any): arg is AddUnknownNodeRest<[Node24, Node10, Node21]> {
	return arg[0] && arg[0]._Node24Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node21Brand
}

function startsWithNode24Node10Node24(arg: any): arg is AddUnknownNodeRest<[Node24, Node10, Node24]> {
	return arg[0] && arg[0]._Node24Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node24Brand
}

function startsWithNode24Node10Node25(arg: any): arg is AddUnknownNodeRest<[Node24, Node10, Node25]> {
	return arg[0] && arg[0]._Node24Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node25Brand
}

function startsWithNode24Node10Node26(arg: any): arg is AddUnknownNodeRest<[Node24, Node10, Node26]> {
	return arg[0] && arg[0]._Node24Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node26Brand
}

function startsWithNode24Node10Node27(arg: any): arg is AddUnknownNodeRest<[Node24, Node10, Node27]> {
	return arg[0] && arg[0]._Node24Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node27Brand
}

function startsWithNode24Node10Node28(arg: any): arg is AddUnknownNodeRest<[Node24, Node10, Node28]> {
	return arg[0] && arg[0]._Node24Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node28Brand
}

function startsWithNode24Node10Node8(arg: any): arg is AddUnknownNodeRest<[Node24, Node10, Node8]> {
	return arg[0] && arg[0]._Node24Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node8Brand
}

function startsWithNode24Node10Node9(arg: any): arg is AddUnknownNodeRest<[Node24, Node10, Node9]> {
	return arg[0] && arg[0]._Node24Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node9Brand
}

function startsWithNode25(arg: any): arg is AddUnknownNodeRest<[Node25]> {
	return arg[0] && arg[0]._Node25Brand
}

function startsWithNode25Node10Node1(arg: any): arg is AddUnknownNodeRest<[Node25, Node10, Node1]> {
	return arg[0] && arg[0]._Node25Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node1Brand
}

function startsWithNode25Node10Node10(arg: any): arg is AddUnknownNodeRest<[Node25, Node10, Node10]> {
	return arg[0] && arg[0]._Node25Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node10Brand
}

function startsWithNode25Node10Node21(arg: any): arg is AddUnknownNodeRest<[Node25, Node10, Node21]> {
	return arg[0] && arg[0]._Node25Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node21Brand
}

function startsWithNode25Node10Node24(arg: any): arg is AddUnknownNodeRest<[Node25, Node10, Node24]> {
	return arg[0] && arg[0]._Node25Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node24Brand
}

function startsWithNode25Node10Node25(arg: any): arg is AddUnknownNodeRest<[Node25, Node10, Node25]> {
	return arg[0] && arg[0]._Node25Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node25Brand
}

function startsWithNode25Node10Node26(arg: any): arg is AddUnknownNodeRest<[Node25, Node10, Node26]> {
	return arg[0] && arg[0]._Node25Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node26Brand
}

function startsWithNode25Node10Node27(arg: any): arg is AddUnknownNodeRest<[Node25, Node10, Node27]> {
	return arg[0] && arg[0]._Node25Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node27Brand
}

function startsWithNode25Node10Node28(arg: any): arg is AddUnknownNodeRest<[Node25, Node10, Node28]> {
	return arg[0] && arg[0]._Node25Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node28Brand
}

function startsWithNode25Node10Node8(arg: any): arg is AddUnknownNodeRest<[Node25, Node10, Node8]> {
	return arg[0] && arg[0]._Node25Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node8Brand
}

function startsWithNode25Node10Node9(arg: any): arg is AddUnknownNodeRest<[Node25, Node10, Node9]> {
	return arg[0] && arg[0]._Node25Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node9Brand
}

function startsWithNode26(arg: any): arg is AddUnknownNodeRest<[Node26]> {
	return arg[0] && arg[0]._Node26Brand
}

function startsWithNode27(arg: any): arg is AddUnknownNodeRest<[Node27]> {
	return arg[0] && arg[0]._Node27Brand
}

function startsWithNode28(arg: any): arg is AddUnknownNodeRest<[Node28]> {
	return arg[0] && arg[0]._Node28Brand
}

function startsWithNode29Node1(arg: any): arg is AddUnknownNodeRest<[Node29, Node1]> {
	return arg[0] && arg[0]._Node29Brand
		&& arg[1] && arg[1]._Node1Brand
}

function startsWithNode29Node10(arg: any): arg is AddUnknownNodeRest<[Node29, Node10]> {
	return arg[0] && arg[0]._Node29Brand
		&& arg[1] && arg[1]._Node10Brand
}

function startsWithNode29Node21(arg: any): arg is AddUnknownNodeRest<[Node29, Node21]> {
	return arg[0] && arg[0]._Node29Brand
		&& arg[1] && arg[1]._Node21Brand
}

function startsWithNode29Node24(arg: any): arg is AddUnknownNodeRest<[Node29, Node24]> {
	return arg[0] && arg[0]._Node29Brand
		&& arg[1] && arg[1]._Node24Brand
}

function startsWithNode29Node25(arg: any): arg is AddUnknownNodeRest<[Node29, Node25]> {
	return arg[0] && arg[0]._Node29Brand
		&& arg[1] && arg[1]._Node25Brand
}

function startsWithNode29Node26(arg: any): arg is AddUnknownNodeRest<[Node29, Node26]> {
	return arg[0] && arg[0]._Node29Brand
		&& arg[1] && arg[1]._Node26Brand
}

function startsWithNode29Node27(arg: any): arg is AddUnknownNodeRest<[Node29, Node27]> {
	return arg[0] && arg[0]._Node29Brand
		&& arg[1] && arg[1]._Node27Brand
}

function startsWithNode29Node28(arg: any): arg is AddUnknownNodeRest<[Node29, Node28]> {
	return arg[0] && arg[0]._Node29Brand
		&& arg[1] && arg[1]._Node28Brand
}

function startsWithNode29Node8(arg: any): arg is AddUnknownNodeRest<[Node29, Node8]> {
	return arg[0] && arg[0]._Node29Brand
		&& arg[1] && arg[1]._Node8Brand
}

function startsWithNode29Node9(arg: any): arg is AddUnknownNodeRest<[Node29, Node9]> {
	return arg[0] && arg[0]._Node29Brand
		&& arg[1] && arg[1]._Node9Brand
}

function startsWithNode3Node4(arg: any): arg is AddUnknownNodeRest<[Node3, Node4]> {
	return arg[0] && arg[0]._Node3Brand
		&& arg[1] && arg[1]._Node4Brand
}

function startsWithNode30Node1(arg: any): arg is AddUnknownNodeRest<[Node30, Node1]> {
	return arg[0] && arg[0]._Node30Brand
		&& arg[1] && arg[1]._Node1Brand
}

function startsWithNode30Node10(arg: any): arg is AddUnknownNodeRest<[Node30, Node10]> {
	return arg[0] && arg[0]._Node30Brand
		&& arg[1] && arg[1]._Node10Brand
}

function startsWithNode30Node21(arg: any): arg is AddUnknownNodeRest<[Node30, Node21]> {
	return arg[0] && arg[0]._Node30Brand
		&& arg[1] && arg[1]._Node21Brand
}

function startsWithNode30Node24(arg: any): arg is AddUnknownNodeRest<[Node30, Node24]> {
	return arg[0] && arg[0]._Node30Brand
		&& arg[1] && arg[1]._Node24Brand
}

function startsWithNode30Node25(arg: any): arg is AddUnknownNodeRest<[Node30, Node25]> {
	return arg[0] && arg[0]._Node30Brand
		&& arg[1] && arg[1]._Node25Brand
}

function startsWithNode30Node26(arg: any): arg is AddUnknownNodeRest<[Node30, Node26]> {
	return arg[0] && arg[0]._Node30Brand
		&& arg[1] && arg[1]._Node26Brand
}

function startsWithNode30Node27(arg: any): arg is AddUnknownNodeRest<[Node30, Node27]> {
	return arg[0] && arg[0]._Node30Brand
		&& arg[1] && arg[1]._Node27Brand
}

function startsWithNode30Node28(arg: any): arg is AddUnknownNodeRest<[Node30, Node28]> {
	return arg[0] && arg[0]._Node30Brand
		&& arg[1] && arg[1]._Node28Brand
}

function startsWithNode30Node8(arg: any): arg is AddUnknownNodeRest<[Node30, Node8]> {
	return arg[0] && arg[0]._Node30Brand
		&& arg[1] && arg[1]._Node8Brand
}

function startsWithNode30Node9(arg: any): arg is AddUnknownNodeRest<[Node30, Node9]> {
	return arg[0] && arg[0]._Node30Brand
		&& arg[1] && arg[1]._Node9Brand
}

function startsWithNode31Node1(arg: any): arg is AddUnknownNodeRest<[Node31, Node1]> {
	return arg[0] && arg[0]._Node31Brand
		&& arg[1] && arg[1]._Node1Brand
}

function startsWithNode31Node10(arg: any): arg is AddUnknownNodeRest<[Node31, Node10]> {
	return arg[0] && arg[0]._Node31Brand
		&& arg[1] && arg[1]._Node10Brand
}

function startsWithNode31Node21(arg: any): arg is AddUnknownNodeRest<[Node31, Node21]> {
	return arg[0] && arg[0]._Node31Brand
		&& arg[1] && arg[1]._Node21Brand
}

function startsWithNode31Node24(arg: any): arg is AddUnknownNodeRest<[Node31, Node24]> {
	return arg[0] && arg[0]._Node31Brand
		&& arg[1] && arg[1]._Node24Brand
}

function startsWithNode31Node25(arg: any): arg is AddUnknownNodeRest<[Node31, Node25]> {
	return arg[0] && arg[0]._Node31Brand
		&& arg[1] && arg[1]._Node25Brand
}

function startsWithNode31Node26(arg: any): arg is AddUnknownNodeRest<[Node31, Node26]> {
	return arg[0] && arg[0]._Node31Brand
		&& arg[1] && arg[1]._Node26Brand
}

function startsWithNode31Node27(arg: any): arg is AddUnknownNodeRest<[Node31, Node27]> {
	return arg[0] && arg[0]._Node31Brand
		&& arg[1] && arg[1]._Node27Brand
}

function startsWithNode31Node28(arg: any): arg is AddUnknownNodeRest<[Node31, Node28]> {
	return arg[0] && arg[0]._Node31Brand
		&& arg[1] && arg[1]._Node28Brand
}

function startsWithNode31Node8(arg: any): arg is AddUnknownNodeRest<[Node31, Node8]> {
	return arg[0] && arg[0]._Node31Brand
		&& arg[1] && arg[1]._Node8Brand
}

function startsWithNode31Node9(arg: any): arg is AddUnknownNodeRest<[Node31, Node9]> {
	return arg[0] && arg[0]._Node31Brand
		&& arg[1] && arg[1]._Node9Brand
}

function startsWithNode32Node10(arg: any): arg is AddUnknownNodeRest<[Node32, Node10]> {
	return arg[0] && arg[0]._Node32Brand
		&& arg[1] && arg[1]._Node10Brand
}

function startsWithNode32Node9(arg: any): arg is AddUnknownNodeRest<[Node32, Node9]> {
	return arg[0] && arg[0]._Node32Brand
		&& arg[1] && arg[1]._Node9Brand
}

function startsWithNode33Node1(arg: any): arg is AddUnknownNodeRest<[Node33, Node1]> {
	return arg[0] && arg[0]._Node33Brand
		&& arg[1] && arg[1]._Node1Brand
}

function startsWithNode33Node10(arg: any): arg is AddUnknownNodeRest<[Node33, Node10]> {
	return arg[0] && arg[0]._Node33Brand
		&& arg[1] && arg[1]._Node10Brand
}

function startsWithNode33Node21(arg: any): arg is AddUnknownNodeRest<[Node33, Node21]> {
	return arg[0] && arg[0]._Node33Brand
		&& arg[1] && arg[1]._Node21Brand
}

function startsWithNode33Node24(arg: any): arg is AddUnknownNodeRest<[Node33, Node24]> {
	return arg[0] && arg[0]._Node33Brand
		&& arg[1] && arg[1]._Node24Brand
}

function startsWithNode33Node25(arg: any): arg is AddUnknownNodeRest<[Node33, Node25]> {
	return arg[0] && arg[0]._Node33Brand
		&& arg[1] && arg[1]._Node25Brand
}

function startsWithNode33Node26(arg: any): arg is AddUnknownNodeRest<[Node33, Node26]> {
	return arg[0] && arg[0]._Node33Brand
		&& arg[1] && arg[1]._Node26Brand
}

function startsWithNode33Node27(arg: any): arg is AddUnknownNodeRest<[Node33, Node27]> {
	return arg[0] && arg[0]._Node33Brand
		&& arg[1] && arg[1]._Node27Brand
}

function startsWithNode33Node28(arg: any): arg is AddUnknownNodeRest<[Node33, Node28]> {
	return arg[0] && arg[0]._Node33Brand
		&& arg[1] && arg[1]._Node28Brand
}

function startsWithNode33Node34(arg: any): arg is AddUnknownNodeRest<[Node33, Node34]> {
	return arg[0] && arg[0]._Node33Brand
		&& arg[1] && arg[1]._Node34Brand
}

function startsWithNode33Node35(arg: any): arg is AddUnknownNodeRest<[Node33, Node35]> {
	return arg[0] && arg[0]._Node33Brand
		&& arg[1] && arg[1]._Node35Brand
}

function startsWithNode33Node8(arg: any): arg is AddUnknownNodeRest<[Node33, Node8]> {
	return arg[0] && arg[0]._Node33Brand
		&& arg[1] && arg[1]._Node8Brand
}

function startsWithNode33Node9(arg: any): arg is AddUnknownNodeRest<[Node33, Node9]> {
	return arg[0] && arg[0]._Node33Brand
		&& arg[1] && arg[1]._Node9Brand
}

function startsWithNode36Node34Node10Node1(arg: any): arg is AddUnknownNodeRest<[Node36, Node34, Node10, Node1]> {
	return arg[0] && arg[0]._Node36Brand
		&& arg[1] && arg[1]._Node34Brand
		&& arg[2] && arg[2]._Node10Brand
		&& arg[3] && arg[3]._Node1Brand
}

function startsWithNode36Node34Node10Node10(arg: any): arg is AddUnknownNodeRest<[Node36, Node34, Node10, Node10]> {
	return arg[0] && arg[0]._Node36Brand
		&& arg[1] && arg[1]._Node34Brand
		&& arg[2] && arg[2]._Node10Brand
		&& arg[3] && arg[3]._Node10Brand
}

function startsWithNode36Node34Node10Node21(arg: any): arg is AddUnknownNodeRest<[Node36, Node34, Node10, Node21]> {
	return arg[0] && arg[0]._Node36Brand
		&& arg[1] && arg[1]._Node34Brand
		&& arg[2] && arg[2]._Node10Brand
		&& arg[3] && arg[3]._Node21Brand
}

function startsWithNode36Node34Node10Node24(arg: any): arg is AddUnknownNodeRest<[Node36, Node34, Node10, Node24]> {
	return arg[0] && arg[0]._Node36Brand
		&& arg[1] && arg[1]._Node34Brand
		&& arg[2] && arg[2]._Node10Brand
		&& arg[3] && arg[3]._Node24Brand
}

function startsWithNode36Node34Node10Node25(arg: any): arg is AddUnknownNodeRest<[Node36, Node34, Node10, Node25]> {
	return arg[0] && arg[0]._Node36Brand
		&& arg[1] && arg[1]._Node34Brand
		&& arg[2] && arg[2]._Node10Brand
		&& arg[3] && arg[3]._Node25Brand
}

function startsWithNode36Node34Node10Node26(arg: any): arg is AddUnknownNodeRest<[Node36, Node34, Node10, Node26]> {
	return arg[0] && arg[0]._Node36Brand
		&& arg[1] && arg[1]._Node34Brand
		&& arg[2] && arg[2]._Node10Brand
		&& arg[3] && arg[3]._Node26Brand
}

function startsWithNode36Node34Node10Node27(arg: any): arg is AddUnknownNodeRest<[Node36, Node34, Node10, Node27]> {
	return arg[0] && arg[0]._Node36Brand
		&& arg[1] && arg[1]._Node34Brand
		&& arg[2] && arg[2]._Node10Brand
		&& arg[3] && arg[3]._Node27Brand
}

function startsWithNode36Node34Node10Node28(arg: any): arg is AddUnknownNodeRest<[Node36, Node34, Node10, Node28]> {
	return arg[0] && arg[0]._Node36Brand
		&& arg[1] && arg[1]._Node34Brand
		&& arg[2] && arg[2]._Node10Brand
		&& arg[3] && arg[3]._Node28Brand
}

function startsWithNode36Node34Node10Node8(arg: any): arg is AddUnknownNodeRest<[Node36, Node34, Node10, Node8]> {
	return arg[0] && arg[0]._Node36Brand
		&& arg[1] && arg[1]._Node34Brand
		&& arg[2] && arg[2]._Node10Brand
		&& arg[3] && arg[3]._Node8Brand
}

function startsWithNode36Node34Node10Node9(arg: any): arg is AddUnknownNodeRest<[Node36, Node34, Node10, Node9]> {
	return arg[0] && arg[0]._Node36Brand
		&& arg[1] && arg[1]._Node34Brand
		&& arg[2] && arg[2]._Node10Brand
		&& arg[3] && arg[3]._Node9Brand
}

function startsWithNode37Node10Node1(arg: any): arg is AddUnknownNodeRest<[Node37, Node10, Node1]> {
	return arg[0] && arg[0]._Node37Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node1Brand
}

function startsWithNode37Node10Node10(arg: any): arg is AddUnknownNodeRest<[Node37, Node10, Node10]> {
	return arg[0] && arg[0]._Node37Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node10Brand
}

function startsWithNode37Node10Node21(arg: any): arg is AddUnknownNodeRest<[Node37, Node10, Node21]> {
	return arg[0] && arg[0]._Node37Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node21Brand
}

function startsWithNode37Node10Node24(arg: any): arg is AddUnknownNodeRest<[Node37, Node10, Node24]> {
	return arg[0] && arg[0]._Node37Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node24Brand
}

function startsWithNode37Node10Node25(arg: any): arg is AddUnknownNodeRest<[Node37, Node10, Node25]> {
	return arg[0] && arg[0]._Node37Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node25Brand
}

function startsWithNode37Node10Node26(arg: any): arg is AddUnknownNodeRest<[Node37, Node10, Node26]> {
	return arg[0] && arg[0]._Node37Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node26Brand
}

function startsWithNode37Node10Node27(arg: any): arg is AddUnknownNodeRest<[Node37, Node10, Node27]> {
	return arg[0] && arg[0]._Node37Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node27Brand
}

function startsWithNode37Node10Node28(arg: any): arg is AddUnknownNodeRest<[Node37, Node10, Node28]> {
	return arg[0] && arg[0]._Node37Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node28Brand
}

function startsWithNode37Node10Node8(arg: any): arg is AddUnknownNodeRest<[Node37, Node10, Node8]> {
	return arg[0] && arg[0]._Node37Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node8Brand
}

function startsWithNode37Node10Node9(arg: any): arg is AddUnknownNodeRest<[Node37, Node10, Node9]> {
	return arg[0] && arg[0]._Node37Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node9Brand
}

function startsWithNode38Node35Node10Node1(arg: any): arg is AddUnknownNodeRest<[Node38, Node35, Node10, Node1]> {
	return arg[0] && arg[0]._Node38Brand
		&& arg[1] && arg[1]._Node35Brand
		&& arg[2] && arg[2]._Node10Brand
		&& arg[3] && arg[3]._Node1Brand
}

function startsWithNode38Node35Node10Node10(arg: any): arg is AddUnknownNodeRest<[Node38, Node35, Node10, Node10]> {
	return arg[0] && arg[0]._Node38Brand
		&& arg[1] && arg[1]._Node35Brand
		&& arg[2] && arg[2]._Node10Brand
		&& arg[3] && arg[3]._Node10Brand
}

function startsWithNode38Node35Node10Node21(arg: any): arg is AddUnknownNodeRest<[Node38, Node35, Node10, Node21]> {
	return arg[0] && arg[0]._Node38Brand
		&& arg[1] && arg[1]._Node35Brand
		&& arg[2] && arg[2]._Node10Brand
		&& arg[3] && arg[3]._Node21Brand
}

function startsWithNode38Node35Node10Node24(arg: any): arg is AddUnknownNodeRest<[Node38, Node35, Node10, Node24]> {
	return arg[0] && arg[0]._Node38Brand
		&& arg[1] && arg[1]._Node35Brand
		&& arg[2] && arg[2]._Node10Brand
		&& arg[3] && arg[3]._Node24Brand
}

function startsWithNode38Node35Node10Node25(arg: any): arg is AddUnknownNodeRest<[Node38, Node35, Node10, Node25]> {
	return arg[0] && arg[0]._Node38Brand
		&& arg[1] && arg[1]._Node35Brand
		&& arg[2] && arg[2]._Node10Brand
		&& arg[3] && arg[3]._Node25Brand
}

function startsWithNode38Node35Node10Node26(arg: any): arg is AddUnknownNodeRest<[Node38, Node35, Node10, Node26]> {
	return arg[0] && arg[0]._Node38Brand
		&& arg[1] && arg[1]._Node35Brand
		&& arg[2] && arg[2]._Node10Brand
		&& arg[3] && arg[3]._Node26Brand
}

function startsWithNode38Node35Node10Node27(arg: any): arg is AddUnknownNodeRest<[Node38, Node35, Node10, Node27]> {
	return arg[0] && arg[0]._Node38Brand
		&& arg[1] && arg[1]._Node35Brand
		&& arg[2] && arg[2]._Node10Brand
		&& arg[3] && arg[3]._Node27Brand
}

function startsWithNode38Node35Node10Node28(arg: any): arg is AddUnknownNodeRest<[Node38, Node35, Node10, Node28]> {
	return arg[0] && arg[0]._Node38Brand
		&& arg[1] && arg[1]._Node35Brand
		&& arg[2] && arg[2]._Node10Brand
		&& arg[3] && arg[3]._Node28Brand
}

function startsWithNode38Node35Node10Node8(arg: any): arg is AddUnknownNodeRest<[Node38, Node35, Node10, Node8]> {
	return arg[0] && arg[0]._Node38Brand
		&& arg[1] && arg[1]._Node35Brand
		&& arg[2] && arg[2]._Node10Brand
		&& arg[3] && arg[3]._Node8Brand
}

function startsWithNode38Node35Node10Node9(arg: any): arg is AddUnknownNodeRest<[Node38, Node35, Node10, Node9]> {
	return arg[0] && arg[0]._Node38Brand
		&& arg[1] && arg[1]._Node35Brand
		&& arg[2] && arg[2]._Node10Brand
		&& arg[3] && arg[3]._Node9Brand
}

function startsWithNode39Node10Node1(arg: any): arg is AddUnknownNodeRest<[Node39, Node10, Node1]> {
	return arg[0] && arg[0]._Node39Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node1Brand
}

function startsWithNode39Node10Node10(arg: any): arg is AddUnknownNodeRest<[Node39, Node10, Node10]> {
	return arg[0] && arg[0]._Node39Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node10Brand
}

function startsWithNode39Node10Node21(arg: any): arg is AddUnknownNodeRest<[Node39, Node10, Node21]> {
	return arg[0] && arg[0]._Node39Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node21Brand
}

function startsWithNode39Node10Node24(arg: any): arg is AddUnknownNodeRest<[Node39, Node10, Node24]> {
	return arg[0] && arg[0]._Node39Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node24Brand
}

function startsWithNode39Node10Node25(arg: any): arg is AddUnknownNodeRest<[Node39, Node10, Node25]> {
	return arg[0] && arg[0]._Node39Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node25Brand
}

function startsWithNode39Node10Node26(arg: any): arg is AddUnknownNodeRest<[Node39, Node10, Node26]> {
	return arg[0] && arg[0]._Node39Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node26Brand
}

function startsWithNode39Node10Node27(arg: any): arg is AddUnknownNodeRest<[Node39, Node10, Node27]> {
	return arg[0] && arg[0]._Node39Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node27Brand
}

function startsWithNode39Node10Node28(arg: any): arg is AddUnknownNodeRest<[Node39, Node10, Node28]> {
	return arg[0] && arg[0]._Node39Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node28Brand
}

function startsWithNode39Node10Node8(arg: any): arg is AddUnknownNodeRest<[Node39, Node10, Node8]> {
	return arg[0] && arg[0]._Node39Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node8Brand
}

function startsWithNode39Node10Node9(arg: any): arg is AddUnknownNodeRest<[Node39, Node10, Node9]> {
	return arg[0] && arg[0]._Node39Brand
		&& arg[1] && arg[1]._Node10Brand
		&& arg[2] && arg[2]._Node9Brand
}

function startsWithNode4(arg: any): arg is AddUnknownNodeRest<[Node4]> {
	return arg[0] && arg[0]._Node4Brand
}

function startsWithNode40Node1(arg: any): arg is AddUnknownNodeRest<[Node40, Node1]> {
	return arg[0] && arg[0]._Node40Brand
		&& arg[1] && arg[1]._Node1Brand
}

function startsWithNode40Node10(arg: any): arg is AddUnknownNodeRest<[Node40, Node10]> {
	return arg[0] && arg[0]._Node40Brand
		&& arg[1] && arg[1]._Node10Brand
}

function startsWithNode40Node21(arg: any): arg is AddUnknownNodeRest<[Node40, Node21]> {
	return arg[0] && arg[0]._Node40Brand
		&& arg[1] && arg[1]._Node21Brand
}

function startsWithNode40Node24(arg: any): arg is AddUnknownNodeRest<[Node40, Node24]> {
	return arg[0] && arg[0]._Node40Brand
		&& arg[1] && arg[1]._Node24Brand
}

function startsWithNode40Node25(arg: any): arg is AddUnknownNodeRest<[Node40, Node25]> {
	return arg[0] && arg[0]._Node40Brand
		&& arg[1] && arg[1]._Node25Brand
}

function startsWithNode40Node26(arg: any): arg is AddUnknownNodeRest<[Node40, Node26]> {
	return arg[0] && arg[0]._Node40Brand
		&& arg[1] && arg[1]._Node26Brand
}

function startsWithNode40Node27(arg: any): arg is AddUnknownNodeRest<[Node40, Node27]> {
	return arg[0] && arg[0]._Node40Brand
		&& arg[1] && arg[1]._Node27Brand
}

function startsWithNode40Node28(arg: any): arg is AddUnknownNodeRest<[Node40, Node28]> {
	return arg[0] && arg[0]._Node40Brand
		&& arg[1] && arg[1]._Node28Brand
}

function startsWithNode40Node8(arg: any): arg is AddUnknownNodeRest<[Node40, Node8]> {
	return arg[0] && arg[0]._Node40Brand
		&& arg[1] && arg[1]._Node8Brand
}

function startsWithNode40Node9(arg: any): arg is AddUnknownNodeRest<[Node40, Node9]> {
	return arg[0] && arg[0]._Node40Brand
		&& arg[1] && arg[1]._Node9Brand
}

function startsWithNode41Node1(arg: any): arg is AddUnknownNodeRest<[Node41, Node1]> {
	return arg[0] && arg[0]._Node41Brand
		&& arg[1] && arg[1]._Node1Brand
}

function startsWithNode41Node10(arg: any): arg is AddUnknownNodeRest<[Node41, Node10]> {
	return arg[0] && arg[0]._Node41Brand
		&& arg[1] && arg[1]._Node10Brand
}

function startsWithNode41Node21(arg: any): arg is AddUnknownNodeRest<[Node41, Node21]> {
	return arg[0] && arg[0]._Node41Brand
		&& arg[1] && arg[1]._Node21Brand
}

function startsWithNode41Node24(arg: any): arg is AddUnknownNodeRest<[Node41, Node24]> {
	return arg[0] && arg[0]._Node41Brand
		&& arg[1] && arg[1]._Node24Brand
}

function startsWithNode41Node25(arg: any): arg is AddUnknownNodeRest<[Node41, Node25]> {
	return arg[0] && arg[0]._Node41Brand
		&& arg[1] && arg[1]._Node25Brand
}

function startsWithNode41Node26(arg: any): arg is AddUnknownNodeRest<[Node41, Node26]> {
	return arg[0] && arg[0]._Node41Brand
		&& arg[1] && arg[1]._Node26Brand
}

function startsWithNode41Node27(arg: any): arg is AddUnknownNodeRest<[Node41, Node27]> {
	return arg[0] && arg[0]._Node41Brand
		&& arg[1] && arg[1]._Node27Brand
}

function startsWithNode41Node28(arg: any): arg is AddUnknownNodeRest<[Node41, Node28]> {
	return arg[0] && arg[0]._Node41Brand
		&& arg[1] && arg[1]._Node28Brand
}

function startsWithNode41Node8(arg: any): arg is AddUnknownNodeRest<[Node41, Node8]> {
	return arg[0] && arg[0]._Node41Brand
		&& arg[1] && arg[1]._Node8Brand
}

function startsWithNode41Node9(arg: any): arg is AddUnknownNodeRest<[Node41, Node9]> {
	return arg[0] && arg[0]._Node41Brand
		&& arg[1] && arg[1]._Node9Brand
}

function startsWithNode42Node1(arg: any): arg is AddUnknownNodeRest<[Node42, Node1]> {
	return arg[0] && arg[0]._Node42Brand
		&& arg[1] && arg[1]._Node1Brand
}

function startsWithNode42Node10(arg: any): arg is AddUnknownNodeRest<[Node42, Node10]> {
	return arg[0] && arg[0]._Node42Brand
		&& arg[1] && arg[1]._Node10Brand
}

function startsWithNode42Node21(arg: any): arg is AddUnknownNodeRest<[Node42, Node21]> {
	return arg[0] && arg[0]._Node42Brand
		&& arg[1] && arg[1]._Node21Brand
}

function startsWithNode42Node24(arg: any): arg is AddUnknownNodeRest<[Node42, Node24]> {
	return arg[0] && arg[0]._Node42Brand
		&& arg[1] && arg[1]._Node24Brand
}

function startsWithNode42Node25(arg: any): arg is AddUnknownNodeRest<[Node42, Node25]> {
	return arg[0] && arg[0]._Node42Brand
		&& arg[1] && arg[1]._Node25Brand
}

function startsWithNode42Node26(arg: any): arg is AddUnknownNodeRest<[Node42, Node26]> {
	return arg[0] && arg[0]._Node42Brand
		&& arg[1] && arg[1]._Node26Brand
}

function startsWithNode42Node27(arg: any): arg is AddUnknownNodeRest<[Node42, Node27]> {
	return arg[0] && arg[0]._Node42Brand
		&& arg[1] && arg[1]._Node27Brand
}

function startsWithNode42Node28(arg: any): arg is AddUnknownNodeRest<[Node42, Node28]> {
	return arg[0] && arg[0]._Node42Brand
		&& arg[1] && arg[1]._Node28Brand
}

function startsWithNode42Node8(arg: any): arg is AddUnknownNodeRest<[Node42, Node8]> {
	return arg[0] && arg[0]._Node42Brand
		&& arg[1] && arg[1]._Node8Brand
}

function startsWithNode42Node9(arg: any): arg is AddUnknownNodeRest<[Node42, Node9]> {
	return arg[0] && arg[0]._Node42Brand
		&& arg[1] && arg[1]._Node9Brand
}

function startsWithNode43Node1(arg: any): arg is AddUnknownNodeRest<[Node43, Node1]> {
	return arg[0] && arg[0]._Node43Brand
		&& arg[1] && arg[1]._Node1Brand
}

function startsWithNode43Node10(arg: any): arg is AddUnknownNodeRest<[Node43, Node10]> {
	return arg[0] && arg[0]._Node43Brand
		&& arg[1] && arg[1]._Node10Brand
}

function startsWithNode43Node21(arg: any): arg is AddUnknownNodeRest<[Node43, Node21]> {
	return arg[0] && arg[0]._Node43Brand
		&& arg[1] && arg[1]._Node21Brand
}

function startsWithNode43Node24(arg: any): arg is AddUnknownNodeRest<[Node43, Node24]> {
	return arg[0] && arg[0]._Node43Brand
		&& arg[1] && arg[1]._Node24Brand
}

function startsWithNode43Node25(arg: any): arg is AddUnknownNodeRest<[Node43, Node25]> {
	return arg[0] && arg[0]._Node43Brand
		&& arg[1] && arg[1]._Node25Brand
}

function startsWithNode43Node26(arg: any): arg is AddUnknownNodeRest<[Node43, Node26]> {
	return arg[0] && arg[0]._Node43Brand
		&& arg[1] && arg[1]._Node26Brand
}

function startsWithNode43Node27(arg: any): arg is AddUnknownNodeRest<[Node43, Node27]> {
	return arg[0] && arg[0]._Node43Brand
		&& arg[1] && arg[1]._Node27Brand
}

function startsWithNode43Node28(arg: any): arg is AddUnknownNodeRest<[Node43, Node28]> {
	return arg[0] && arg[0]._Node43Brand
		&& arg[1] && arg[1]._Node28Brand
}

function startsWithNode43Node8(arg: any): arg is AddUnknownNodeRest<[Node43, Node8]> {
	return arg[0] && arg[0]._Node43Brand
		&& arg[1] && arg[1]._Node8Brand
}

function startsWithNode43Node9(arg: any): arg is AddUnknownNodeRest<[Node43, Node9]> {
	return arg[0] && arg[0]._Node43Brand
		&& arg[1] && arg[1]._Node9Brand
}

function startsWithNode44Node1(arg: any): arg is AddUnknownNodeRest<[Node44, Node1]> {
	return arg[0] && arg[0]._Node44Brand
		&& arg[1] && arg[1]._Node1Brand
}

function startsWithNode44Node10(arg: any): arg is AddUnknownNodeRest<[Node44, Node10]> {
	return arg[0] && arg[0]._Node44Brand
		&& arg[1] && arg[1]._Node10Brand
}

function startsWithNode44Node21(arg: any): arg is AddUnknownNodeRest<[Node44, Node21]> {
	return arg[0] && arg[0]._Node44Brand
		&& arg[1] && arg[1]._Node21Brand
}

function startsWithNode44Node24(arg: any): arg is AddUnknownNodeRest<[Node44, Node24]> {
	return arg[0] && arg[0]._Node44Brand
		&& arg[1] && arg[1]._Node24Brand
}

function startsWithNode44Node25(arg: any): arg is AddUnknownNodeRest<[Node44, Node25]> {
	return arg[0] && arg[0]._Node44Brand
		&& arg[1] && arg[1]._Node25Brand
}

function startsWithNode44Node26(arg: any): arg is AddUnknownNodeRest<[Node44, Node26]> {
	return arg[0] && arg[0]._Node44Brand
		&& arg[1] && arg[1]._Node26Brand
}

function startsWithNode44Node27(arg: any): arg is AddUnknownNodeRest<[Node44, Node27]> {
	return arg[0] && arg[0]._Node44Brand
		&& arg[1] && arg[1]._Node27Brand
}

function startsWithNode44Node28(arg: any): arg is AddUnknownNodeRest<[Node44, Node28]> {
	return arg[0] && arg[0]._Node44Brand
		&& arg[1] && arg[1]._Node28Brand
}

function startsWithNode44Node8(arg: any): arg is AddUnknownNodeRest<[Node44, Node8]> {
	return arg[0] && arg[0]._Node44Brand
		&& arg[1] && arg[1]._Node8Brand
}

function startsWithNode44Node9(arg: any): arg is AddUnknownNodeRest<[Node44, Node9]> {
	return arg[0] && arg[0]._Node44Brand
		&& arg[1] && arg[1]._Node9Brand
}

function startsWithNode45Node24Node10(arg: any): arg is AddUnknownNodeRest<[Node45, Node24, Node10]> {
	return arg[0] && arg[0]._Node45Brand
		&& arg[1] && arg[1]._Node24Brand
		&& arg[2] && arg[2]._Node10Brand
}

function startsWithNode45Node26Node1(arg: any): arg is AddUnknownNodeRest<[Node45, Node26, Node1]> {
	return arg[0] && arg[0]._Node45Brand
		&& arg[1] && arg[1]._Node26Brand
		&& arg[2] && arg[2]._Node1Brand
}

function startsWithNode45Node26Node21(arg: any): arg is AddUnknownNodeRest<[Node45, Node26, Node21]> {
	return arg[0] && arg[0]._Node45Brand
		&& arg[1] && arg[1]._Node26Brand
		&& arg[2] && arg[2]._Node21Brand
}

function startsWithNode45Node26Node24(arg: any): arg is AddUnknownNodeRest<[Node45, Node26, Node24]> {
	return arg[0] && arg[0]._Node45Brand
		&& arg[1] && arg[1]._Node26Brand
		&& arg[2] && arg[2]._Node24Brand
}

function startsWithNode45Node26Node25(arg: any): arg is AddUnknownNodeRest<[Node45, Node26, Node25]> {
	return arg[0] && arg[0]._Node45Brand
		&& arg[1] && arg[1]._Node26Brand
		&& arg[2] && arg[2]._Node25Brand
}

function startsWithNode45Node26Node26(arg: any): arg is AddUnknownNodeRest<[Node45, Node26, Node26]> {
	return arg[0] && arg[0]._Node45Brand
		&& arg[1] && arg[1]._Node26Brand
		&& arg[2] && arg[2]._Node26Brand
}

function startsWithNode45Node26Node27(arg: any): arg is AddUnknownNodeRest<[Node45, Node26, Node27]> {
	return arg[0] && arg[0]._Node45Brand
		&& arg[1] && arg[1]._Node26Brand
		&& arg[2] && arg[2]._Node27Brand
}

function startsWithNode45Node26Node28(arg: any): arg is AddUnknownNodeRest<[Node45, Node26, Node28]> {
	return arg[0] && arg[0]._Node45Brand
		&& arg[1] && arg[1]._Node26Brand
		&& arg[2] && arg[2]._Node28Brand
}

function startsWithNode45Node26Node8(arg: any): arg is AddUnknownNodeRest<[Node45, Node26, Node8]> {
	return arg[0] && arg[0]._Node45Brand
		&& arg[1] && arg[1]._Node26Brand
		&& arg[2] && arg[2]._Node8Brand
}

function startsWithNode45Node26Node9(arg: any): arg is AddUnknownNodeRest<[Node45, Node26, Node9]> {
	return arg[0] && arg[0]._Node45Brand
		&& arg[1] && arg[1]._Node26Brand
		&& arg[2] && arg[2]._Node9Brand
}

function startsWithNode46Node1(arg: any): arg is AddUnknownNodeRest<[Node46, Node1]> {
	return arg[0] && arg[0]._Node46Brand
		&& arg[1] && arg[1]._Node1Brand
}

function startsWithNode46Node10(arg: any): arg is AddUnknownNodeRest<[Node46, Node10]> {
	return arg[0] && arg[0]._Node46Brand
		&& arg[1] && arg[1]._Node10Brand
}

function startsWithNode46Node21(arg: any): arg is AddUnknownNodeRest<[Node46, Node21]> {
	return arg[0] && arg[0]._Node46Brand
		&& arg[1] && arg[1]._Node21Brand
}

function startsWithNode46Node24(arg: any): arg is AddUnknownNodeRest<[Node46, Node24]> {
	return arg[0] && arg[0]._Node46Brand
		&& arg[1] && arg[1]._Node24Brand
}

function startsWithNode46Node25(arg: any): arg is AddUnknownNodeRest<[Node46, Node25]> {
	return arg[0] && arg[0]._Node46Brand
		&& arg[1] && arg[1]._Node25Brand
}

function startsWithNode46Node26(arg: any): arg is AddUnknownNodeRest<[Node46, Node26]> {
	return arg[0] && arg[0]._Node46Brand
		&& arg[1] && arg[1]._Node26Brand
}

function startsWithNode46Node27(arg: any): arg is AddUnknownNodeRest<[Node46, Node27]> {
	return arg[0] && arg[0]._Node46Brand
		&& arg[1] && arg[1]._Node27Brand
}

function startsWithNode46Node28(arg: any): arg is AddUnknownNodeRest<[Node46, Node28]> {
	return arg[0] && arg[0]._Node46Brand
		&& arg[1] && arg[1]._Node28Brand
}

function startsWithNode46Node8(arg: any): arg is AddUnknownNodeRest<[Node46, Node8]> {
	return arg[0] && arg[0]._Node46Brand
		&& arg[1] && arg[1]._Node8Brand
}

function startsWithNode46Node9(arg: any): arg is AddUnknownNodeRest<[Node46, Node9]> {
	return arg[0] && arg[0]._Node46Brand
		&& arg[1] && arg[1]._Node9Brand
}

function startsWithNode47Node1(arg: any): arg is AddUnknownNodeRest<[Node47, Node1]> {
	return arg[0] && arg[0]._Node47Brand
		&& arg[1] && arg[1]._Node1Brand
}

function startsWithNode47Node10(arg: any): arg is AddUnknownNodeRest<[Node47, Node10]> {
	return arg[0] && arg[0]._Node47Brand
		&& arg[1] && arg[1]._Node10Brand
}

function startsWithNode47Node21(arg: any): arg is AddUnknownNodeRest<[Node47, Node21]> {
	return arg[0] && arg[0]._Node47Brand
		&& arg[1] && arg[1]._Node21Brand
}

function startsWithNode47Node24(arg: any): arg is AddUnknownNodeRest<[Node47, Node24]> {
	return arg[0] && arg[0]._Node47Brand
		&& arg[1] && arg[1]._Node24Brand
}

function startsWithNode47Node25(arg: any): arg is AddUnknownNodeRest<[Node47, Node25]> {
	return arg[0] && arg[0]._Node47Brand
		&& arg[1] && arg[1]._Node25Brand
}

function startsWithNode47Node26(arg: any): arg is AddUnknownNodeRest<[Node47, Node26]> {
	return arg[0] && arg[0]._Node47Brand
		&& arg[1] && arg[1]._Node26Brand
}

function startsWithNode47Node27(arg: any): arg is AddUnknownNodeRest<[Node47, Node27]> {
	return arg[0] && arg[0]._Node47Brand
		&& arg[1] && arg[1]._Node27Brand
}

function startsWithNode47Node28(arg: any): arg is AddUnknownNodeRest<[Node47, Node28]> {
	return arg[0] && arg[0]._Node47Brand
		&& arg[1] && arg[1]._Node28Brand
}

function startsWithNode47Node8(arg: any): arg is AddUnknownNodeRest<[Node47, Node8]> {
	return arg[0] && arg[0]._Node47Brand
		&& arg[1] && arg[1]._Node8Brand
}

function startsWithNode47Node9(arg: any): arg is AddUnknownNodeRest<[Node47, Node9]> {
	return arg[0] && arg[0]._Node47Brand
		&& arg[1] && arg[1]._Node9Brand
}

function startsWithNode48Node1(arg: any): arg is AddUnknownNodeRest<[Node48, Node1]> {
	return arg[0] && arg[0]._Node48Brand
		&& arg[1] && arg[1]._Node1Brand
}

function startsWithNode48Node10(arg: any): arg is AddUnknownNodeRest<[Node48, Node10]> {
	return arg[0] && arg[0]._Node48Brand
		&& arg[1] && arg[1]._Node10Brand
}

function startsWithNode48Node21(arg: any): arg is AddUnknownNodeRest<[Node48, Node21]> {
	return arg[0] && arg[0]._Node48Brand
		&& arg[1] && arg[1]._Node21Brand
}

function startsWithNode48Node24(arg: any): arg is AddUnknownNodeRest<[Node48, Node24]> {
	return arg[0] && arg[0]._Node48Brand
		&& arg[1] && arg[1]._Node24Brand
}

function startsWithNode48Node25(arg: any): arg is AddUnknownNodeRest<[Node48, Node25]> {
	return arg[0] && arg[0]._Node48Brand
		&& arg[1] && arg[1]._Node25Brand
}

function startsWithNode48Node26(arg: any): arg is AddUnknownNodeRest<[Node48, Node26]> {
	return arg[0] && arg[0]._Node48Brand
		&& arg[1] && arg[1]._Node26Brand
}

function startsWithNode48Node27(arg: any): arg is AddUnknownNodeRest<[Node48, Node27]> {
	return arg[0] && arg[0]._Node48Brand
		&& arg[1] && arg[1]._Node27Brand
}

function startsWithNode48Node28(arg: any): arg is AddUnknownNodeRest<[Node48, Node28]> {
	return arg[0] && arg[0]._Node48Brand
		&& arg[1] && arg[1]._Node28Brand
}

function startsWithNode48Node8(arg: any): arg is AddUnknownNodeRest<[Node48, Node8]> {
	return arg[0] && arg[0]._Node48Brand
		&& arg[1] && arg[1]._Node8Brand
}

function startsWithNode48Node9(arg: any): arg is AddUnknownNodeRest<[Node48, Node9]> {
	return arg[0] && arg[0]._Node48Brand
		&& arg[1] && arg[1]._Node9Brand
}

function startsWithNode49Node21Node1(arg: any): arg is AddUnknownNodeRest<[Node49, Node21, Node1]> {
	return arg[0] && arg[0]._Node49Brand
		&& arg[1] && arg[1]._Node21Brand
		&& arg[2] && arg[2]._Node1Brand
}

function startsWithNode49Node21Node10(arg: any): arg is AddUnknownNodeRest<[Node49, Node21, Node10]> {
	return arg[0] && arg[0]._Node49Brand
		&& arg[1] && arg[1]._Node21Brand
		&& arg[2] && arg[2]._Node10Brand
}

function startsWithNode49Node21Node21(arg: any): arg is AddUnknownNodeRest<[Node49, Node21, Node21]> {
	return arg[0] && arg[0]._Node49Brand
		&& arg[1] && arg[1]._Node21Brand
		&& arg[2] && arg[2]._Node21Brand
}

function startsWithNode49Node21Node24(arg: any): arg is AddUnknownNodeRest<[Node49, Node21, Node24]> {
	return arg[0] && arg[0]._Node49Brand
		&& arg[1] && arg[1]._Node21Brand
		&& arg[2] && arg[2]._Node24Brand
}

function startsWithNode49Node21Node25(arg: any): arg is AddUnknownNodeRest<[Node49, Node21, Node25]> {
	return arg[0] && arg[0]._Node49Brand
		&& arg[1] && arg[1]._Node21Brand
		&& arg[2] && arg[2]._Node25Brand
}

function startsWithNode49Node21Node26(arg: any): arg is AddUnknownNodeRest<[Node49, Node21, Node26]> {
	return arg[0] && arg[0]._Node49Brand
		&& arg[1] && arg[1]._Node21Brand
		&& arg[2] && arg[2]._Node26Brand
}

function startsWithNode49Node21Node27(arg: any): arg is AddUnknownNodeRest<[Node49, Node21, Node27]> {
	return arg[0] && arg[0]._Node49Brand
		&& arg[1] && arg[1]._Node21Brand
		&& arg[2] && arg[2]._Node27Brand
}

function startsWithNode49Node21Node28(arg: any): arg is AddUnknownNodeRest<[Node49, Node21, Node28]> {
	return arg[0] && arg[0]._Node49Brand
		&& arg[1] && arg[1]._Node21Brand
		&& arg[2] && arg[2]._Node28Brand
}

function startsWithNode49Node21Node8(arg: any): arg is AddUnknownNodeRest<[Node49, Node21, Node8]> {
	return arg[0] && arg[0]._Node49Brand
		&& arg[1] && arg[1]._Node21Brand
		&& arg[2] && arg[2]._Node8Brand
}

function startsWithNode49Node21Node9(arg: any): arg is AddUnknownNodeRest<[Node49, Node21, Node9]> {
	return arg[0] && arg[0]._Node49Brand
		&& arg[1] && arg[1]._Node21Brand
		&& arg[2] && arg[2]._Node9Brand
}

function startsWithNode5Node4(arg: any): arg is AddUnknownNodeRest<[Node5, Node4]> {
	return arg[0] && arg[0]._Node5Brand
		&& arg[1] && arg[1]._Node4Brand
}

function startsWithNode50Node25Node10(arg: any): arg is AddUnknownNodeRest<[Node50, Node25, Node10]> {
	return arg[0] && arg[0]._Node50Brand
		&& arg[1] && arg[1]._Node25Brand
		&& arg[2] && arg[2]._Node10Brand
}

function startsWithNode50Node27Node1(arg: any): arg is AddUnknownNodeRest<[Node50, Node27, Node1]> {
	return arg[0] && arg[0]._Node50Brand
		&& arg[1] && arg[1]._Node27Brand
		&& arg[2] && arg[2]._Node1Brand
}

function startsWithNode50Node27Node21(arg: any): arg is AddUnknownNodeRest<[Node50, Node27, Node21]> {
	return arg[0] && arg[0]._Node50Brand
		&& arg[1] && arg[1]._Node27Brand
		&& arg[2] && arg[2]._Node21Brand
}

function startsWithNode50Node27Node24(arg: any): arg is AddUnknownNodeRest<[Node50, Node27, Node24]> {
	return arg[0] && arg[0]._Node50Brand
		&& arg[1] && arg[1]._Node27Brand
		&& arg[2] && arg[2]._Node24Brand
}

function startsWithNode50Node27Node25(arg: any): arg is AddUnknownNodeRest<[Node50, Node27, Node25]> {
	return arg[0] && arg[0]._Node50Brand
		&& arg[1] && arg[1]._Node27Brand
		&& arg[2] && arg[2]._Node25Brand
}

function startsWithNode50Node27Node26(arg: any): arg is AddUnknownNodeRest<[Node50, Node27, Node26]> {
	return arg[0] && arg[0]._Node50Brand
		&& arg[1] && arg[1]._Node27Brand
		&& arg[2] && arg[2]._Node26Brand
}

function startsWithNode50Node27Node27(arg: any): arg is AddUnknownNodeRest<[Node50, Node27, Node27]> {
	return arg[0] && arg[0]._Node50Brand
		&& arg[1] && arg[1]._Node27Brand
		&& arg[2] && arg[2]._Node27Brand
}

function startsWithNode50Node27Node28(arg: any): arg is AddUnknownNodeRest<[Node50, Node27, Node28]> {
	return arg[0] && arg[0]._Node50Brand
		&& arg[1] && arg[1]._Node27Brand
		&& arg[2] && arg[2]._Node28Brand
}

function startsWithNode50Node27Node8(arg: any): arg is AddUnknownNodeRest<[Node50, Node27, Node8]> {
	return arg[0] && arg[0]._Node50Brand
		&& arg[1] && arg[1]._Node27Brand
		&& arg[2] && arg[2]._Node8Brand
}

function startsWithNode50Node27Node9(arg: any): arg is AddUnknownNodeRest<[Node50, Node27, Node9]> {
	return arg[0] && arg[0]._Node50Brand
		&& arg[1] && arg[1]._Node27Brand
		&& arg[2] && arg[2]._Node9Brand
}

function startsWithNode51Node1(arg: any): arg is AddUnknownNodeRest<[Node51, Node1]> {
	return arg[0] && arg[0]._Node51Brand
		&& arg[1] && arg[1]._Node1Brand
}

function startsWithNode51Node10(arg: any): arg is AddUnknownNodeRest<[Node51, Node10]> {
	return arg[0] && arg[0]._Node51Brand
		&& arg[1] && arg[1]._Node10Brand
}

function startsWithNode51Node21(arg: any): arg is AddUnknownNodeRest<[Node51, Node21]> {
	return arg[0] && arg[0]._Node51Brand
		&& arg[1] && arg[1]._Node21Brand
}

function startsWithNode51Node24(arg: any): arg is AddUnknownNodeRest<[Node51, Node24]> {
	return arg[0] && arg[0]._Node51Brand
		&& arg[1] && arg[1]._Node24Brand
}

function startsWithNode51Node25(arg: any): arg is AddUnknownNodeRest<[Node51, Node25]> {
	return arg[0] && arg[0]._Node51Brand
		&& arg[1] && arg[1]._Node25Brand
}

function startsWithNode51Node26(arg: any): arg is AddUnknownNodeRest<[Node51, Node26]> {
	return arg[0] && arg[0]._Node51Brand
		&& arg[1] && arg[1]._Node26Brand
}

function startsWithNode51Node27(arg: any): arg is AddUnknownNodeRest<[Node51, Node27]> {
	return arg[0] && arg[0]._Node51Brand
		&& arg[1] && arg[1]._Node27Brand
}

function startsWithNode51Node28(arg: any): arg is AddUnknownNodeRest<[Node51, Node28]> {
	return arg[0] && arg[0]._Node51Brand
		&& arg[1] && arg[1]._Node28Brand
}

function startsWithNode51Node8(arg: any): arg is AddUnknownNodeRest<[Node51, Node8]> {
	return arg[0] && arg[0]._Node51Brand
		&& arg[1] && arg[1]._Node8Brand
}

function startsWithNode51Node9(arg: any): arg is AddUnknownNodeRest<[Node51, Node9]> {
	return arg[0] && arg[0]._Node51Brand
		&& arg[1] && arg[1]._Node9Brand
}

function startsWithNode52Node28Node1(arg: any): arg is AddUnknownNodeRest<[Node52, Node28, Node1]> {
	return arg[0] && arg[0]._Node52Brand
		&& arg[1] && arg[1]._Node28Brand
		&& arg[2] && arg[2]._Node1Brand
}

function startsWithNode52Node28Node10(arg: any): arg is AddUnknownNodeRest<[Node52, Node28, Node10]> {
	return arg[0] && arg[0]._Node52Brand
		&& arg[1] && arg[1]._Node28Brand
		&& arg[2] && arg[2]._Node10Brand
}

function startsWithNode52Node28Node21(arg: any): arg is AddUnknownNodeRest<[Node52, Node28, Node21]> {
	return arg[0] && arg[0]._Node52Brand
		&& arg[1] && arg[1]._Node28Brand
		&& arg[2] && arg[2]._Node21Brand
}

function startsWithNode52Node28Node24(arg: any): arg is AddUnknownNodeRest<[Node52, Node28, Node24]> {
	return arg[0] && arg[0]._Node52Brand
		&& arg[1] && arg[1]._Node28Brand
		&& arg[2] && arg[2]._Node24Brand
}

function startsWithNode52Node28Node25(arg: any): arg is AddUnknownNodeRest<[Node52, Node28, Node25]> {
	return arg[0] && arg[0]._Node52Brand
		&& arg[1] && arg[1]._Node28Brand
		&& arg[2] && arg[2]._Node25Brand
}

function startsWithNode52Node28Node26(arg: any): arg is AddUnknownNodeRest<[Node52, Node28, Node26]> {
	return arg[0] && arg[0]._Node52Brand
		&& arg[1] && arg[1]._Node28Brand
		&& arg[2] && arg[2]._Node26Brand
}

function startsWithNode52Node28Node27(arg: any): arg is AddUnknownNodeRest<[Node52, Node28, Node27]> {
	return arg[0] && arg[0]._Node52Brand
		&& arg[1] && arg[1]._Node28Brand
		&& arg[2] && arg[2]._Node27Brand
}

function startsWithNode52Node28Node28(arg: any): arg is AddUnknownNodeRest<[Node52, Node28, Node28]> {
	return arg[0] && arg[0]._Node52Brand
		&& arg[1] && arg[1]._Node28Brand
		&& arg[2] && arg[2]._Node28Brand
}

function startsWithNode52Node28Node8(arg: any): arg is AddUnknownNodeRest<[Node52, Node28, Node8]> {
	return arg[0] && arg[0]._Node52Brand
		&& arg[1] && arg[1]._Node28Brand
		&& arg[2] && arg[2]._Node8Brand
}

function startsWithNode52Node28Node9(arg: any): arg is AddUnknownNodeRest<[Node52, Node28, Node9]> {
	return arg[0] && arg[0]._Node52Brand
		&& arg[1] && arg[1]._Node28Brand
		&& arg[2] && arg[2]._Node9Brand
}

function startsWithNode6Node4(arg: any): arg is AddUnknownNodeRest<[Node6, Node4]> {
	return arg[0] && arg[0]._Node6Brand
		&& arg[1] && arg[1]._Node4Brand
}

function startsWithNode7Node8Node4Node10(arg: any): arg is AddUnknownNodeRest<[Node7, Node8, Node4, Node10]> {
	return arg[0] && arg[0]._Node7Brand
		&& arg[1] && arg[1]._Node8Brand
		&& arg[2] && arg[2]._Node4Brand
		&& arg[3] && arg[3]._Node10Brand
}

function startsWithNode7Node8Node4Node8(arg: any): arg is AddUnknownNodeRest<[Node7, Node8, Node4, Node8]> {
	return arg[0] && arg[0]._Node7Brand
		&& arg[1] && arg[1]._Node8Brand
		&& arg[2] && arg[2]._Node4Brand
		&& arg[3] && arg[3]._Node8Brand
}

function startsWithNode7Node8Node4Node9(arg: any): arg is AddUnknownNodeRest<[Node7, Node8, Node4, Node9]> {
	return arg[0] && arg[0]._Node7Brand
		&& arg[1] && arg[1]._Node8Brand
		&& arg[2] && arg[2]._Node4Brand
		&& arg[3] && arg[3]._Node9Brand
}

function startsWithNode8(arg: any): arg is AddUnknownNodeRest<[Node8]> {
	return arg[0] && arg[0]._Node8Brand
}

function startsWithNode9(arg: any): arg is AddUnknownNodeRest<[Node9]> {
	return arg[0] && arg[0]._Node9Brand
}

type Fluent<Stack extends unknown[]> = (
	{
		0: {}
		1: { end: () => Node2['arg1'] }
	}[StartsWith<Stack, [Node2]>]
) & (
	{
		0: {}
		1: { and: () => Fluent<Prepend<Node43, Stack>> }
	}[StartsWith<Stack, [Node1]>]
) & (
	{
		0: {}
		1: { character: (arg1: string) => Fluent<Prepend<Node31, Stack>> }
	}[StartsWith<Stack, [Node1]>]
) & (
	{
		0: {}
		1: { complement: () => Fluent<Prepend<Node44, Stack>> }
	}[StartsWith<Stack, [Node1]>]
) & (
	{
		0: {}
		1: { floating: (arg1: number) => Fluent<Prepend<Node29, Stack>> }
	}[StartsWith<Stack, [Node1]>]
) & (
	{
		0: {}
		1: { integer: (arg1: number) => Fluent<Prepend<Node30, Stack>> }
	}[StartsWith<Stack, [Node1]>]
) & (
	{
		0: {}
		1: { minus: () => Fluent<Prepend<Node46, Stack>> }
	}[StartsWith<Stack, [Node1]>]
) & (
	{
		0: {}
		1: { minusMinus: () => Fluent<Prepend<Node26, Stack>> }
	}[StartsWith<Stack, [Node1]>]
) & (
	{
		0: {}
		1: { multi: () => Fluent<Prepend<Node47, Stack>> }
	}[StartsWith<Stack, [Node1]>]
) & (
	{
		0: {}
		1: { not: () => Fluent<Prepend<Node48, Stack>> }
	}[StartsWith<Stack, [Node1]>]
) & (
	{
		0: {}
		1: { plus: () => Fluent<Prepend<Node51, Stack>> }
	}[StartsWith<Stack, [Node1]>]
) & (
	{
		0: {}
		1: { plusPlus: () => Fluent<Prepend<Node27, Stack>> }
	}[StartsWith<Stack, [Node1]>]
) & (
	{
		0: {}
		1: { sizeof: () => Fluent<Prepend<Node28, Stack>> }
	}[StartsWith<Stack, [Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node3, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node3, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node3, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node3, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node3, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node3, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node3, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node3, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node3, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node3, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node3, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node3, Node4]>]
) & (
	{
		0: {}
		1: { andEqual: () => Fluent<Prepend<Node3, Stack>> }
	}[StartsWith<Stack, [Node4]>]
) & (
	{
		0: {}
		1: { divEqual: () => Fluent<Prepend<Node5, Stack>> }
	}[StartsWith<Stack, [Node4]>]
) & (
	{
		0: {}
		1: { euaql: () => Fluent<Prepend<Node6, Stack>> }
	}[StartsWith<Stack, [Node4]>]
) & (
	{
		0: {}
		1: { leftShiftEqual: () => Fluent<Prepend<Node12, Stack>> }
	}[StartsWith<Stack, [Node4]>]
) & (
	{
		0: {}
		1: { minusEqual: () => Fluent<Prepend<Node13, Stack>> }
	}[StartsWith<Stack, [Node4]>]
) & (
	{
		0: {}
		1: { multiEqual: () => Fluent<Prepend<Node14, Stack>> }
	}[StartsWith<Stack, [Node4]>]
) & (
	{
		0: {}
		1: { orEqual: () => Fluent<Prepend<Node15, Stack>> }
	}[StartsWith<Stack, [Node4]>]
) & (
	{
		0: {}
		1: { percentEqual: () => Fluent<Prepend<Node16, Stack>> }
	}[StartsWith<Stack, [Node4]>]
) & (
	{
		0: {}
		1: { plusEqual: () => Fluent<Prepend<Node17, Stack>> }
	}[StartsWith<Stack, [Node4]>]
) & (
	{
		0: {}
		1: { rifhtShiftEqual: () => Fluent<Prepend<Node18, Stack>> }
	}[StartsWith<Stack, [Node4]>]
) & (
	{
		0: {}
		1: { xorEqual: () => Fluent<Prepend<Node19, Stack>> }
	}[StartsWith<Stack, [Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node5, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node5, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node5, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node5, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node5, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node5, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node5, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node5, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node5, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node5, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node5, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node5, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node6, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node6, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node6, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node6, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node6, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node6, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node6, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node6, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node6, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node6, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node6, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node6, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node7, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node7, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node7, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node7, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node7, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node7, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node7, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node7, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node7, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node7, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node7, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node7, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node7, Node8, Node4, Node10]>]
) & (
	{
		0: {}
		1: { and: () => Fluent<Prepend<Node43, Stack>> }
	}[StartsWith<Stack, [Node8]>]
) & (
	{
		0: {}
		1: { character: (arg1: string) => Fluent<Prepend<Node31, Stack>> }
	}[StartsWith<Stack, [Node8]>]
) & (
	{
		0: {}
		1: { complement: () => Fluent<Prepend<Node44, Stack>> }
	}[StartsWith<Stack, [Node8]>]
) & (
	{
		0: {}
		1: { floating: (arg1: number) => Fluent<Prepend<Node29, Stack>> }
	}[StartsWith<Stack, [Node8]>]
) & (
	{
		0: {}
		1: { integer: (arg1: number) => Fluent<Prepend<Node30, Stack>> }
	}[StartsWith<Stack, [Node8]>]
) & (
	{
		0: {}
		1: { minus: () => Fluent<Prepend<Node46, Stack>> }
	}[StartsWith<Stack, [Node8]>]
) & (
	{
		0: {}
		1: { minusMinus: () => Fluent<Prepend<Node26, Stack>> }
	}[StartsWith<Stack, [Node8]>]
) & (
	{
		0: {}
		1: { multi: () => Fluent<Prepend<Node47, Stack>> }
	}[StartsWith<Stack, [Node8]>]
) & (
	{
		0: {}
		1: { not: () => Fluent<Prepend<Node48, Stack>> }
	}[StartsWith<Stack, [Node8]>]
) & (
	{
		0: {}
		1: { plus: () => Fluent<Prepend<Node51, Stack>> }
	}[StartsWith<Stack, [Node8]>]
) & (
	{
		0: {}
		1: { plusPlus: () => Fluent<Prepend<Node27, Stack>> }
	}[StartsWith<Stack, [Node8]>]
) & (
	{
		0: {}
		1: { sizeof: () => Fluent<Prepend<Node28, Stack>> }
	}[StartsWith<Stack, [Node8]>]
) & (
	{
		0: {}
		1: { and: () => Fluent<Prepend<Node43, Stack>> }
	}[StartsWith<Stack, [Node9]>]
) & (
	{
		0: {}
		1: { character: (arg1: string) => Fluent<Prepend<Node31, Stack>> }
	}[StartsWith<Stack, [Node9]>]
) & (
	{
		0: {}
		1: { complement: () => Fluent<Prepend<Node44, Stack>> }
	}[StartsWith<Stack, [Node9]>]
) & (
	{
		0: {}
		1: { floating: (arg1: number) => Fluent<Prepend<Node29, Stack>> }
	}[StartsWith<Stack, [Node9]>]
) & (
	{
		0: {}
		1: { integer: (arg1: number) => Fluent<Prepend<Node30, Stack>> }
	}[StartsWith<Stack, [Node9]>]
) & (
	{
		0: {}
		1: { minus: () => Fluent<Prepend<Node46, Stack>> }
	}[StartsWith<Stack, [Node9]>]
) & (
	{
		0: {}
		1: { minusMinus: () => Fluent<Prepend<Node26, Stack>> }
	}[StartsWith<Stack, [Node9]>]
) & (
	{
		0: {}
		1: { multi: () => Fluent<Prepend<Node47, Stack>> }
	}[StartsWith<Stack, [Node9]>]
) & (
	{
		0: {}
		1: { not: () => Fluent<Prepend<Node48, Stack>> }
	}[StartsWith<Stack, [Node9]>]
) & (
	{
		0: {}
		1: { plus: () => Fluent<Prepend<Node51, Stack>> }
	}[StartsWith<Stack, [Node9]>]
) & (
	{
		0: {}
		1: { plusPlus: () => Fluent<Prepend<Node27, Stack>> }
	}[StartsWith<Stack, [Node9]>]
) & (
	{
		0: {}
		1: { sizeof: () => Fluent<Prepend<Node28, Stack>> }
	}[StartsWith<Stack, [Node9]>]
) & (
	{
		0: {}
		1: { and: () => Fluent<Prepend<Node43, Stack>> }
	}[StartsWith<Stack, [Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node28]>]
) & (
	{
		0: {}
		1: { arrow: () => Fluent<Prepend<Node34, Stack>> }
	}[StartsWith<Stack, [Node10]>]
) & (
	{
		0: {}
		1: { character: (arg1: string) => Fluent<Prepend<Node31, Stack>> }
	}[StartsWith<Stack, [Node10]>]
) & (
	{
		0: {}
		1: { complement: () => Fluent<Prepend<Node44, Stack>> }
	}[StartsWith<Stack, [Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node28]>]
) & (
	{
		0: {}
		1: { dot: () => Fluent<Prepend<Node35, Stack>> }
	}[StartsWith<Stack, [Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node10, Node28]>]
) & (
	{
		0: {}
		1: { floating: (arg1: number) => Fluent<Prepend<Node29, Stack>> }
	}[StartsWith<Stack, [Node10]>]
) & (
	{
		0: {}
		1: { integer: (arg1: number) => Fluent<Prepend<Node30, Stack>> }
	}[StartsWith<Stack, [Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node28]>]
) & (
	{
		0: {}
		1: { minus: () => Fluent<Prepend<Node46, Stack>> }
	}[StartsWith<Stack, [Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node28]>]
) & (
	{
		0: {}
		1: { minusMinus: () => Fluent<Prepend<Node24, Stack>> }
	}[StartsWith<Stack, [Node10]>]
) & (
	{
		0: {}
		1: { multi: () => Fluent<Prepend<Node47, Stack>> }
	}[StartsWith<Stack, [Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node28]>]
) & (
	{
		0: {}
		1: { not: () => Fluent<Prepend<Node48, Stack>> }
	}[StartsWith<Stack, [Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node28]>]
) & (
	{
		0: {}
		1: { plus: () => Fluent<Prepend<Node51, Stack>> }
	}[StartsWith<Stack, [Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node28]>]
) & (
	{
		0: {}
		1: { plusPlus: () => Fluent<Prepend<Node25, Stack>> }
	}[StartsWith<Stack, [Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node28]>]
) & (
	{
		0: {}
		1: { sizeof: () => Fluent<Prepend<Node28, Stack>> }
	}[StartsWith<Stack, [Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Tail<Stack>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Tail<Stack>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Tail<Stack>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Tail<Stack>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Tail<Stack>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Tail<Stack>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Tail<Stack>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Tail<Stack>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Tail<Stack>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Tail<Stack>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Tail<Stack>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Tail<Stack>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node11, Node9, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node12, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node12, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node12, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node12, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node12, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node12, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node12, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node12, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node12, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node12, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node12, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node12, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node13, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node13, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node13, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node13, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node13, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node13, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node13, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node13, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node13, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node13, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node13, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node13, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node14, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node14, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node14, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node14, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node14, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node14, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node14, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node14, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node14, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node14, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node14, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node14, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node15, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node15, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node15, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node15, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node15, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node15, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node15, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node15, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node15, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node15, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node15, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node15, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node16, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node16, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node16, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node16, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node16, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node16, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node16, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node16, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node16, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node16, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node16, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node16, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node17, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node17, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node17, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node17, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node17, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node17, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node17, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node17, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node17, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node17, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node17, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node17, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node18, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node18, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node18, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node18, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node18, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node18, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node18, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node18, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node18, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node18, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node18, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node18, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node19, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node19, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node19, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node19, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node19, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node19, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node19, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node19, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node19, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node19, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node19, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node8, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node19, Node4]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node20, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node20, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node49, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node20, Node21]>]
) & (
	{
		0: {}
		1: { and: () => Fluent<Prepend<Node43, Stack>> }
	}[StartsWith<Stack, [Node21]>]
) & (
	{
		0: {}
		1: { character: (arg1: string) => Fluent<Prepend<Node31, Stack>> }
	}[StartsWith<Stack, [Node21]>]
) & (
	{
		0: {}
		1: { complement: () => Fluent<Prepend<Node44, Stack>> }
	}[StartsWith<Stack, [Node21]>]
) & (
	{
		0: {}
		1: { floating: (arg1: number) => Fluent<Prepend<Node29, Stack>> }
	}[StartsWith<Stack, [Node21]>]
) & (
	{
		0: {}
		1: { integer: (arg1: number) => Fluent<Prepend<Node30, Stack>> }
	}[StartsWith<Stack, [Node21]>]
) & (
	{
		0: {}
		1: { minus: () => Fluent<Prepend<Node46, Stack>> }
	}[StartsWith<Stack, [Node21]>]
) & (
	{
		0: {}
		1: { minusMinus: () => Fluent<Prepend<Node26, Stack>> }
	}[StartsWith<Stack, [Node21]>]
) & (
	{
		0: {}
		1: { multi: () => Fluent<Prepend<Node47, Stack>> }
	}[StartsWith<Stack, [Node21]>]
) & (
	{
		0: {}
		1: { not: () => Fluent<Prepend<Node48, Stack>> }
	}[StartsWith<Stack, [Node21]>]
) & (
	{
		0: {}
		1: { plus: () => Fluent<Prepend<Node51, Stack>> }
	}[StartsWith<Stack, [Node21]>]
) & (
	{
		0: {}
		1: { plusPlus: () => Fluent<Prepend<Node27, Stack>> }
	}[StartsWith<Stack, [Node21]>]
) & (
	{
		0: {}
		1: { sizeof: () => Fluent<Prepend<Node28, Stack>> }
	}[StartsWith<Stack, [Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node7, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node22, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node22, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node7, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node22, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node22, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node7, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node22, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node22, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node7, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node22, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node22, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node7, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node22, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node22, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node7, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node22, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node22, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node7, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node22, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node22, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node7, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node22, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node22, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node7, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node22, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node22, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node7, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node22, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node22, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node7, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node22, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node22, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node7, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node22, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node22, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node9, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node22, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node23, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node23, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node23, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node23, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node23, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node23, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node23, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node23, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node23, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node23, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node23, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node23, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node23, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node23, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node23, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node23, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node23, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node23, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node23, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node23, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node23, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node23, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node23, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node23, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node23, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node23, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node23, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node23, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node23, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node23, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node23, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node23, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node23, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node23, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node23, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node23, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node23, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node23, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node23, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node23, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node23, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node23, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node23, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node23, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node23, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node23, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node23, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node23, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node23, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node23, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node23, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node23, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node23, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node23, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node23, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node23, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node23, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node23, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node23, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node23, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node23, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node23, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node23, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node23, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node23, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node23, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node23, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node23, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node23, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node23, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node23, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node23, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node23, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node23, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node23, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node23, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node23, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node23, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node23, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node23, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node23, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node23, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node23, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node23, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node23, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node23, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node23, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node23, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node23, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node23, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node23, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node23, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node23, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node23, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node23, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node23, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node23, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node23, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node23, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node23, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node23, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node23, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node23, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node23, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node23, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node23, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node23, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node23, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node23, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node23, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node23, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node23, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node23, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node23, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node23, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node23, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node23, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node23, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node23, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node23, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node23, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node23, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node23, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node23, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node23, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node23, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node23, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node23, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node23, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node23, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node23, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node23, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node23, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node23, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node23, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node23, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node23, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node23, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node23, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node23, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node23, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node23, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node23, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node23, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node23, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node23, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node23, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node23, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node23, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node23, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node23, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node23, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node23, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node23, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node23, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node23, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node23, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node23, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node23, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node23, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node23, Node28]>]
) & (
	{
		0: {}
		1: { and: () => Fluent<Prepend<Node43, Stack>> }
	}[StartsWith<Stack, [Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node28]>]
) & (
	{
		0: {}
		1: { character: (arg1: string) => Fluent<Prepend<Node31, Stack>> }
	}[StartsWith<Stack, [Node24]>]
) & (
	{
		0: {}
		1: { complement: () => Fluent<Prepend<Node44, Stack>> }
	}[StartsWith<Stack, [Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node28]>]
) & (
	{
		0: {}
		1: { floating: (arg1: number) => Fluent<Prepend<Node29, Stack>> }
	}[StartsWith<Stack, [Node24]>]
) & (
	{
		0: {}
		1: { integer: (arg1: number) => Fluent<Prepend<Node30, Stack>> }
	}[StartsWith<Stack, [Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node28]>]
) & (
	{
		0: {}
		1: { minus: () => Fluent<Prepend<Node46, Stack>> }
	}[StartsWith<Stack, [Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node28]>]
) & (
	{
		0: {}
		1: { minusMinus: () => Fluent<Prepend<Node26, Stack>> }
	}[StartsWith<Stack, [Node24]>]
) & (
	{
		0: {}
		1: { multi: () => Fluent<Prepend<Node47, Stack>> }
	}[StartsWith<Stack, [Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node28]>]
) & (
	{
		0: {}
		1: { not: () => Fluent<Prepend<Node48, Stack>> }
	}[StartsWith<Stack, [Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node28]>]
) & (
	{
		0: {}
		1: { plus: () => Fluent<Prepend<Node51, Stack>> }
	}[StartsWith<Stack, [Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node28]>]
) & (
	{
		0: {}
		1: { plusPlus: () => Fluent<Prepend<Node27, Stack>> }
	}[StartsWith<Stack, [Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node28]>]
) & (
	{
		0: {}
		1: { sizeof: () => Fluent<Prepend<Node28, Stack>> }
	}[StartsWith<Stack, [Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node24, Node10, Node28]>]
) & (
	{
		0: {}
		1: { and: () => Fluent<Prepend<Node43, Stack>> }
	}[StartsWith<Stack, [Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node28]>]
) & (
	{
		0: {}
		1: { character: (arg1: string) => Fluent<Prepend<Node31, Stack>> }
	}[StartsWith<Stack, [Node25]>]
) & (
	{
		0: {}
		1: { complement: () => Fluent<Prepend<Node44, Stack>> }
	}[StartsWith<Stack, [Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node28]>]
) & (
	{
		0: {}
		1: { floating: (arg1: number) => Fluent<Prepend<Node29, Stack>> }
	}[StartsWith<Stack, [Node25]>]
) & (
	{
		0: {}
		1: { integer: (arg1: number) => Fluent<Prepend<Node30, Stack>> }
	}[StartsWith<Stack, [Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node28]>]
) & (
	{
		0: {}
		1: { minus: () => Fluent<Prepend<Node46, Stack>> }
	}[StartsWith<Stack, [Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node28]>]
) & (
	{
		0: {}
		1: { minusMinus: () => Fluent<Prepend<Node26, Stack>> }
	}[StartsWith<Stack, [Node25]>]
) & (
	{
		0: {}
		1: { multi: () => Fluent<Prepend<Node47, Stack>> }
	}[StartsWith<Stack, [Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node28]>]
) & (
	{
		0: {}
		1: { not: () => Fluent<Prepend<Node48, Stack>> }
	}[StartsWith<Stack, [Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node28]>]
) & (
	{
		0: {}
		1: { plus: () => Fluent<Prepend<Node51, Stack>> }
	}[StartsWith<Stack, [Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node28]>]
) & (
	{
		0: {}
		1: { plusPlus: () => Fluent<Prepend<Node27, Stack>> }
	}[StartsWith<Stack, [Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node28]>]
) & (
	{
		0: {}
		1: { sizeof: () => Fluent<Prepend<Node28, Stack>> }
	}[StartsWith<Stack, [Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node25, Node10, Node28]>]
) & (
	{
		0: {}
		1: { and: () => Fluent<Prepend<Node43, Stack>> }
	}[StartsWith<Stack, [Node26]>]
) & (
	{
		0: {}
		1: { character: (arg1: string) => Fluent<Prepend<Node31, Stack>> }
	}[StartsWith<Stack, [Node26]>]
) & (
	{
		0: {}
		1: { complement: () => Fluent<Prepend<Node44, Stack>> }
	}[StartsWith<Stack, [Node26]>]
) & (
	{
		0: {}
		1: { floating: (arg1: number) => Fluent<Prepend<Node29, Stack>> }
	}[StartsWith<Stack, [Node26]>]
) & (
	{
		0: {}
		1: { integer: (arg1: number) => Fluent<Prepend<Node30, Stack>> }
	}[StartsWith<Stack, [Node26]>]
) & (
	{
		0: {}
		1: { minus: () => Fluent<Prepend<Node46, Stack>> }
	}[StartsWith<Stack, [Node26]>]
) & (
	{
		0: {}
		1: { minusMinus: () => Fluent<Prepend<Node26, Stack>> }
	}[StartsWith<Stack, [Node26]>]
) & (
	{
		0: {}
		1: { multi: () => Fluent<Prepend<Node47, Stack>> }
	}[StartsWith<Stack, [Node26]>]
) & (
	{
		0: {}
		1: { not: () => Fluent<Prepend<Node48, Stack>> }
	}[StartsWith<Stack, [Node26]>]
) & (
	{
		0: {}
		1: { plus: () => Fluent<Prepend<Node51, Stack>> }
	}[StartsWith<Stack, [Node26]>]
) & (
	{
		0: {}
		1: { plusPlus: () => Fluent<Prepend<Node27, Stack>> }
	}[StartsWith<Stack, [Node26]>]
) & (
	{
		0: {}
		1: { sizeof: () => Fluent<Prepend<Node28, Stack>> }
	}[StartsWith<Stack, [Node26]>]
) & (
	{
		0: {}
		1: { and: () => Fluent<Prepend<Node43, Stack>> }
	}[StartsWith<Stack, [Node27]>]
) & (
	{
		0: {}
		1: { character: (arg1: string) => Fluent<Prepend<Node31, Stack>> }
	}[StartsWith<Stack, [Node27]>]
) & (
	{
		0: {}
		1: { complement: () => Fluent<Prepend<Node44, Stack>> }
	}[StartsWith<Stack, [Node27]>]
) & (
	{
		0: {}
		1: { floating: (arg1: number) => Fluent<Prepend<Node29, Stack>> }
	}[StartsWith<Stack, [Node27]>]
) & (
	{
		0: {}
		1: { integer: (arg1: number) => Fluent<Prepend<Node30, Stack>> }
	}[StartsWith<Stack, [Node27]>]
) & (
	{
		0: {}
		1: { minus: () => Fluent<Prepend<Node46, Stack>> }
	}[StartsWith<Stack, [Node27]>]
) & (
	{
		0: {}
		1: { minusMinus: () => Fluent<Prepend<Node26, Stack>> }
	}[StartsWith<Stack, [Node27]>]
) & (
	{
		0: {}
		1: { multi: () => Fluent<Prepend<Node47, Stack>> }
	}[StartsWith<Stack, [Node27]>]
) & (
	{
		0: {}
		1: { not: () => Fluent<Prepend<Node48, Stack>> }
	}[StartsWith<Stack, [Node27]>]
) & (
	{
		0: {}
		1: { plus: () => Fluent<Prepend<Node51, Stack>> }
	}[StartsWith<Stack, [Node27]>]
) & (
	{
		0: {}
		1: { plusPlus: () => Fluent<Prepend<Node27, Stack>> }
	}[StartsWith<Stack, [Node27]>]
) & (
	{
		0: {}
		1: { sizeof: () => Fluent<Prepend<Node28, Stack>> }
	}[StartsWith<Stack, [Node27]>]
) & (
	{
		0: {}
		1: { and: () => Fluent<Prepend<Node43, Stack>> }
	}[StartsWith<Stack, [Node28]>]
) & (
	{
		0: {}
		1: { character: (arg1: string) => Fluent<Prepend<Node31, Stack>> }
	}[StartsWith<Stack, [Node28]>]
) & (
	{
		0: {}
		1: { complement: () => Fluent<Prepend<Node44, Stack>> }
	}[StartsWith<Stack, [Node28]>]
) & (
	{
		0: {}
		1: { floating: (arg1: number) => Fluent<Prepend<Node29, Stack>> }
	}[StartsWith<Stack, [Node28]>]
) & (
	{
		0: {}
		1: { integer: (arg1: number) => Fluent<Prepend<Node30, Stack>> }
	}[StartsWith<Stack, [Node28]>]
) & (
	{
		0: {}
		1: { minus: () => Fluent<Prepend<Node46, Stack>> }
	}[StartsWith<Stack, [Node28]>]
) & (
	{
		0: {}
		1: { minusMinus: () => Fluent<Prepend<Node26, Stack>> }
	}[StartsWith<Stack, [Node28]>]
) & (
	{
		0: {}
		1: { multi: () => Fluent<Prepend<Node47, Stack>> }
	}[StartsWith<Stack, [Node28]>]
) & (
	{
		0: {}
		1: { not: () => Fluent<Prepend<Node48, Stack>> }
	}[StartsWith<Stack, [Node28]>]
) & (
	{
		0: {}
		1: { plus: () => Fluent<Prepend<Node51, Stack>> }
	}[StartsWith<Stack, [Node28]>]
) & (
	{
		0: {}
		1: { plusPlus: () => Fluent<Prepend<Node27, Stack>> }
	}[StartsWith<Stack, [Node28]>]
) & (
	{
		0: {}
		1: { sizeof: () => Fluent<Prepend<Node28, Stack>> }
	}[StartsWith<Stack, [Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node29, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node29, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node29, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node29, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node29, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node29, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node29, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node29, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node29, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node29, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node29, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node29, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node29, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node29, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node29, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node29, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node29, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node29, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node29, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node29, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node29, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node29, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node29, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node29, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node29, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node29, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node29, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node29, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node29, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node29, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node29, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node29, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node29, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node29, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node29, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node29, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node29, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node29, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node29, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node29, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node29, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node29, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node29, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node29, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node29, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node29, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node29, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node29, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node29, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node29, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node29, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node29, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node29, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node29, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node29, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node29, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node29, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node29, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node29, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node29, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node29, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node29, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node29, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node29, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node29, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node29, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node29, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node29, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node29, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node29, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node29, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node29, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node29, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node29, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node29, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node29, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node29, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node29, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node29, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node29, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node29, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node29, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node29, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node29, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node29, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node29, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node29, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node29, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node29, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node29, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node29, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node29, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node29, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node29, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node29, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node29, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node29, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node29, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node29, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node29, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node30, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node30, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node30, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node30, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node30, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node30, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node30, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node30, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node30, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node30, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node30, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node30, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node30, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node30, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node30, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node30, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node30, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node30, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node30, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node30, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node30, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node30, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node30, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node30, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node30, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node30, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node30, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node30, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node30, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node30, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node30, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node30, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node30, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node30, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node31, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node31, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node31, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node31, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node31, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node31, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node31, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node31, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node31, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node31, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node31, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node31, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node31, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node31, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node31, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node31, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node31, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node31, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node31, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node31, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node31, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node31, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node31, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node31, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node31, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node31, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node31, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node31, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node31, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node31, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node31, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node31, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node31, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node31, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node31, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node31, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node31, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node31, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node31, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node31, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node31, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node31, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node31, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node31, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node31, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node31, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node31, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node31, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node31, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node31, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node31, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node31, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node31, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node31, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node31, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node31, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node31, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node31, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node31, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node31, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node31, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node31, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node31, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node31, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node31, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node31, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node31, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node31, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node31, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node31, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node31, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node31, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node31, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node31, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node31, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node31, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node31, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node31, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node31, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node31, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node31, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node31, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node31, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node31, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node31, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node31, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node31, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node31, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node31, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node31, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node31, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node31, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node31, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node31, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node31, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node31, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node31, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node31, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node31, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node31, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node31, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node31, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node31, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node31, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node31, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node31, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node31, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node31, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node31, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node31, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node31, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node31, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node31, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node31, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node31, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node31, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node31, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node31, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node31, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node31, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node31, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node31, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node31, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node31, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node31, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node31, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node31, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node31, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node31, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node31, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node31, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node31, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node31, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node31, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node31, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node31, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node31, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node31, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node31, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node31, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node31, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node31, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node31, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node31, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node31, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node31, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node31, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node31, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node31, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node31, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node31, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node31, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node31, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node31, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node31, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node31, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node31, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node31, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node31, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node31, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node41, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node31, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node32, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node32, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node32, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node32, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node32, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node32, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node32, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node32, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node32, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node32, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node32, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node32, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node32, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node32, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node32, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node32, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node32, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node32, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node32, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node32, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node32, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node32, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node32, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node32, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node32, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node32, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node32, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node32, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node32, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node32, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node32, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node32, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node32, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node32, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node32, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node32, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node32, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node32, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node32, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node32, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node32, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node32, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node32, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node32, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node32, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node32, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node32, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node32, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node32, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node32, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node11, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node32, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node37, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node32, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node33, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node33, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node33, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node33, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node33, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node33, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node33, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node33, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node33, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node33, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node33, Node34]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node33, Node35]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node34]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node35]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node33, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node33, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node33, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node33, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node33, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node33, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node33, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node33, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node33, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node33, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node33, Node34]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node33, Node35]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node33, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node33, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node33, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node33, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node33, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node33, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node33, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node33, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node33, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node33, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node33, Node34]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node33, Node35]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node33, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node33, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node33, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node33, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node33, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node33, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node33, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node33, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node33, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node33, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node33, Node34]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node33, Node35]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node34]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node35]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node33, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node33, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node33, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node33, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node33, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node33, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node33, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node33, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node33, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node33, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node33, Node34]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node33, Node35]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node33, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node33, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node33, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node33, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node33, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node33, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node33, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node33, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node33, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node33, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node33, Node34]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node33, Node35]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node33, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node33, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node33, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node33, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node33, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node33, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node33, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node33, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node33, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node33, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node33, Node34]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node33, Node35]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node33, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node33, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node33, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node33, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node33, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node33, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node33, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node33, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node33, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node33, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node33, Node34]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node33, Node35]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node34]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node35]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node34]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node35]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node34]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node35]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node34]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node35]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node33, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node33, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node33, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node33, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node33, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node33, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node33, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node33, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node33, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node33, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node33, Node34]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node33, Node35]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node34]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node35]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node33, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node33, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node33, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node33, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node33, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node33, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node33, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node33, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node33, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node33, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node33, Node34]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node33, Node35]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node34]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node35]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node34]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node35]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node34]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node35]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node34]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node35]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node34]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node33, Node35]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node34]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node35]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node33, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node33, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node33, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node33, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node33, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node33, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node33, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node33, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node33, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node33, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node33, Node34]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node33, Node35]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node34]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node33, Node35]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node33, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node33, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node33, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node33, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node33, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node33, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node33, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node33, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node33, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node42, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node33, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node36, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node33, Node34]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node38, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node33, Node35]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node36, Node34, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node37, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Tail<Stack>>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node38, Node35, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node39, Node10, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node40, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node40, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node40, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node40, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node40, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node40, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node40, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node40, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node40, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node40, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node40, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node40, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node40, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node40, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node40, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node40, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node40, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node40, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node40, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node40, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node40, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node40, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node40, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node40, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node40, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node40, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node40, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node40, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node40, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node40, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node40, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node40, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node40, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node40, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node40, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node40, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node40, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node40, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node40, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node40, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node40, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node40, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node40, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node40, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node40, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node40, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node40, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node40, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node40, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node40, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node40, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node40, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node40, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node40, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node40, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node40, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node40, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node40, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node40, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node40, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node40, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node40, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node40, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node40, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node40, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node40, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node40, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node40, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node40, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node40, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node40, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node40, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node40, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node40, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node40, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node40, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node40, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node40, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node40, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node40, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node40, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node40, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node40, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node40, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node40, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node40, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node40, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node40, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node40, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node40, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node40, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node40, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node40, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node40, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node40, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node40, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node40, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node40, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node40, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node40, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node40, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node40, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node40, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node40, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node40, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node40, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node40, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node40, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node40, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node40, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node40, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node40, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node40, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node40, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node40, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node40, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node40, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node40, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node40, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node40, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node40, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node40, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node40, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node40, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node40, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node40, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node40, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node40, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node40, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node40, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node40, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node40, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node40, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node40, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node40, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node40, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node40, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node40, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node40, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node40, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node40, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node40, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node40, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node40, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node40, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node40, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node40, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node40, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node40, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node40, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node40, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node40, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node40, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node40, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node40, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node40, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node40, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node40, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node40, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node40, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node10, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node40, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node41, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node41, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node41, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node41, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node41, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node41, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node41, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node41, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node41, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node41, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node41, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node41, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node41, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node41, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node41, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node41, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node41, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node41, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node41, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node41, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node41, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node41, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node41, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node41, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node41, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node41, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node41, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node41, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node41, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node41, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node41, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node41, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node41, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node41, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node41, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node41, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node41, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node41, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node41, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node41, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node41, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node41, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node41, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node41, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node41, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node41, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node41, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node41, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node41, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node41, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node41, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node41, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node41, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node41, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node41, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node41, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node41, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node41, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node41, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node41, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node41, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node41, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node41, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node41, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node41, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node41, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node41, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node41, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node41, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node41, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node41, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node41, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node41, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node41, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node41, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node41, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node41, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node41, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node41, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node41, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node41, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node41, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node41, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node41, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node41, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node41, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node41, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node41, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node41, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node41, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node41, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node41, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node41, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node41, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node41, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node41, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node41, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node41, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node41, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node41, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node41, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node41, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node41, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node41, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node41, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node41, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node41, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node41, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node41, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node41, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node41, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node41, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node41, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node41, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node41, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node41, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node41, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node41, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node41, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node41, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node41, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node41, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node42, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node42, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node42, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node42, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node42, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node42, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node42, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node42, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node42, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node42, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node42, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node42, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node42, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node42, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node42, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node42, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node42, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { arrow: infer F }
			? { arrow: F }
			: {}
	}[StartsWith<Stack, [Node42, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node42, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node42, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node42, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node42, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node42, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node42, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node42, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node42, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node42, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node42, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node42, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node42, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node42, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node42, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node42, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node42, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node42, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node42, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node42, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node42, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node42, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node42, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node42, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node42, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node42, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node42, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { dot: infer F }
			? { dot: F }
			: {}
	}[StartsWith<Stack, [Node42, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node42, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node42, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node42, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node42, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node42, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node42, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node42, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node42, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node42, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node42, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node42, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node42, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node42, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node42, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node42, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node42, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node42, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node42, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node42, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node42, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node42, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node42, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node42, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node42, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node42, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node42, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node42, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node42, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node42, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node42, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node42, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node42, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node42, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node42, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node42, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node42, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node42, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node42, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node42, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node42, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node42, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node42, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node42, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node42, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node42, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node42, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node42, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node42, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node42, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node42, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node42, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node42, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node42, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node42, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node42, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node42, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node42, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node42, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node42, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node42, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node42, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node42, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node42, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node42, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node42, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node42, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node42, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node42, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node42, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node42, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node42, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node42, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node42, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node42, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node42, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node42, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node42, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node42, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node42, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node42, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node42, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node42, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node42, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node42, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node42, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node42, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node42, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node42, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node42, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node42, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node42, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node42, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node42, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node42, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node42, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node42, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node42, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node42, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node42, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node42, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node40, Tail<Stack>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node42, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node43, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node43, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node43, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node43, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node43, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node43, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node43, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node43, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node43, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node43, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node43, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node43, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node43, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node43, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node43, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node43, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node43, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node43, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node43, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node43, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node43, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node43, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node43, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node43, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node43, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node43, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node43, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node43, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node43, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node43, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node43, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node43, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node43, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node43, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node43, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node43, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node43, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node43, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node43, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node43, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node43, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node43, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node43, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node43, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node43, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node43, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node43, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node43, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node43, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node43, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node43, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node43, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node43, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node43, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node43, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node43, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node43, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node43, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node43, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node43, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node43, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node43, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node43, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node43, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node43, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node43, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node43, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node43, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node43, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node43, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node43, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node43, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node43, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node43, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node43, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node43, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node43, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node43, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node43, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node43, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node43, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node44, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node44, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node44, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node44, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node44, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node44, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node44, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node44, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node44, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node44, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node44, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node44, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node44, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node44, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node44, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node44, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node44, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node44, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node44, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node44, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node44, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node44, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node44, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node44, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node44, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node44, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node44, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node44, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node44, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node44, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node44, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node44, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node44, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node44, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node44, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node44, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node44, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node44, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node44, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node44, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node44, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node44, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node44, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node44, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node44, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node44, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node44, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node44, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node44, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node44, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node44, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node44, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node44, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node44, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node44, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node44, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node44, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node44, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node44, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node44, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node44, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node44, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node44, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node44, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node44, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node44, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node44, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node44, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node44, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node44, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node44, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node44, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node44, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node44, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node44, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node44, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node44, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node44, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node44, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node44, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node44, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node24, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node24, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node45, Node24, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node24, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node24, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node24, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node24, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node24, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node24, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node24, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node24, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node45, Node24, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node45, Node26, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node46, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node46, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node46, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node46, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node46, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node46, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node46, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node46, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node46, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node46, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node46, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node46, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node46, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node46, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node46, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node46, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node46, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node46, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node46, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node46, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node46, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node46, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node46, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node46, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node46, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node46, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node46, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node46, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node46, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node46, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node46, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node46, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node46, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node46, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node46, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node46, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node46, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node46, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node46, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node46, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node46, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node46, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node46, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node46, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node46, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node46, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node46, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node46, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node46, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node46, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node46, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node46, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node46, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node46, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node46, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node46, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node46, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node46, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node46, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node46, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node46, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node46, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node46, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node46, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node46, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node46, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node46, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node46, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node46, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node46, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node46, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node46, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node46, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node46, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node46, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node46, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node46, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node46, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node46, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node46, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node46, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node46, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node46, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node46, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node46, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node46, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node46, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node46, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node46, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node46, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node46, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node46, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node46, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node46, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node46, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node46, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node46, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node46, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node46, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node46, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node46, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node46, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node46, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node46, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node46, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node46, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node46, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node46, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node46, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node46, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node46, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node46, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node46, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node46, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node46, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node46, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node46, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node46, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node46, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node46, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node47, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node47, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node47, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node47, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node47, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node47, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node47, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node47, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node47, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node47, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node47, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node47, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node47, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node47, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node47, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node47, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node47, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node47, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node47, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node47, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node47, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node47, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node47, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node47, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node47, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node47, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node47, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node47, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node47, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node47, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node47, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node47, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node47, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node47, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node47, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node47, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node47, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node47, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node47, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node47, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node47, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node47, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node47, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node47, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node47, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node47, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node47, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node47, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node47, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node47, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node47, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node47, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node47, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node47, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node47, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node47, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node47, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node47, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node47, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node47, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node47, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node47, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node47, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node47, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node47, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node47, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node47, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node47, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node47, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node47, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node47, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node47, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node47, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node47, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node47, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node47, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node47, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node47, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node47, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node47, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node47, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node47, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node47, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node47, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node47, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node47, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node47, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node47, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node47, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node47, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node47, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node47, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node47, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node47, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node47, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node47, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node47, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node47, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node47, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node47, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node47, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node47, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node47, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node47, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node47, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node47, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node47, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node47, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node47, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node48, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node48, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node48, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node48, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node48, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node48, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node48, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node48, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node48, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node48, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node48, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node48, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node48, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node48, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node48, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node48, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node48, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node48, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node48, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node48, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node48, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node48, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node48, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node48, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node48, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node48, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node48, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node48, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node48, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node48, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node48, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node48, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node48, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node48, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node48, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node48, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node48, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node48, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node48, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node48, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node48, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node48, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node48, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node48, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node48, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node48, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node48, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node48, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node48, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node48, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node48, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node48, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node48, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node48, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node48, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node48, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node48, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node48, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node48, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node48, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node48, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node48, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node48, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node48, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node48, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node48, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node48, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node48, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node48, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node48, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node48, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node48, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node48, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node48, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node48, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node48, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node48, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node48, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node48, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node48, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node48, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node49, Node21, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node25, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node25, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node50, Node25, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node25, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node25, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node25, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node25, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node25, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node25, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node25, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node25, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node50, Node25, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node50, Node27, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node51, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node51, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node51, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node51, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node51, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node51, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node51, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node51, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node51, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { and: infer F }
			? { and: F }
			: {}
	}[StartsWith<Stack, [Node51, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node51, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node51, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node51, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node51, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node51, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node51, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node51, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node51, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node51, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { character: infer F }
			? { character: F }
			: {}
	}[StartsWith<Stack, [Node51, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node51, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node51, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node51, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node51, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node51, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node51, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node51, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node51, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node51, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { complement: infer F }
			? { complement: F }
			: {}
	}[StartsWith<Stack, [Node51, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node51, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node51, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node51, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node51, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node51, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node51, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node51, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node51, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node51, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { floating: infer F }
			? { floating: F }
			: {}
	}[StartsWith<Stack, [Node51, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node51, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node51, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node51, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node51, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node51, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node51, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node51, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node51, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node51, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { integer: infer F }
			? { integer: F }
			: {}
	}[StartsWith<Stack, [Node51, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node51, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node51, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node51, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node51, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node51, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node51, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node51, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node51, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node51, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minus: infer F }
			? { minus: F }
			: {}
	}[StartsWith<Stack, [Node51, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node51, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node51, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node51, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node51, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node51, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node51, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node51, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node51, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node51, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { minusMinus: infer F }
			? { minusMinus: F }
			: {}
	}[StartsWith<Stack, [Node51, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node51, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node51, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node51, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node51, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node51, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node51, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node51, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node51, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node51, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { multi: infer F }
			? { multi: F }
			: {}
	}[StartsWith<Stack, [Node51, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node51, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node51, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node51, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node51, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node51, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node51, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node51, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node51, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node51, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { not: infer F }
			? { not: F }
			: {}
	}[StartsWith<Stack, [Node51, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node51, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node51, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node51, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node51, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node51, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node51, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node51, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node51, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node51, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plus: infer F }
			? { plus: F }
			: {}
	}[StartsWith<Stack, [Node51, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node51, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node51, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node51, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node51, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node51, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node51, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node51, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node51, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node51, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { plusPlus: infer F }
			? { plusPlus: F }
			: {}
	}[StartsWith<Stack, [Node51, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node51, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node51, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node51, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node51, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node51, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node51, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node51, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node51, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node51, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node21, Tail<Stack>>>extends { sizeof: infer F }
			? { sizeof: F }
			: {}
	}[StartsWith<Stack, [Node51, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { andEqual: infer F }
			? { andEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { divEqual: infer F }
			? { divEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { euaql: infer F }
			? { euaql: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { leftShiftEqual: infer F }
			? { leftShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { minusEqual: infer F }
			? { minusEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { multiEqual: infer F }
			? { multiEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { orEqual: infer F }
			? { orEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { percentEqual: infer F }
			? { percentEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { plusEqual: infer F }
			? { plusEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { rifhtShiftEqual: infer F }
			? { rifhtShiftEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { xorEqual: infer F }
			? { xorEqual: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node28]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node2, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node1]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node8]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node9]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node4, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node10]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node20, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node21]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node24]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node25]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node45, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node26]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node50, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node27]>]
) & (
	{
		0: {}
		1: Fluent<Prepend<Node52, Tail<Tail<Stack>>>>extends { end: infer F }
			? { end: F }
			: {}
	}[StartsWith<Stack, [Node52, Node28, Node28]>]
)

class FluentImpl {
	stack: Node[] = [new Node1]
	and = (...a: any[]) => {
		if (startsWithNode51Node28(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode51Node27(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode51Node26(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode51Node25(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode51Node24(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode51Node21(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode51Node10(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode51Node9(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode51Node8(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode51Node1(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode48Node28(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode48Node27(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode48Node26(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode48Node25(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode48Node24(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode48Node21(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode48Node10(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode48Node9(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode48Node8(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode48Node1(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode47Node28(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode47Node27(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode47Node26(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode47Node25(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode47Node24(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode47Node21(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode47Node10(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode47Node9(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode47Node8(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode47Node1(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode46Node28(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode46Node27(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode46Node26(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode46Node25(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode46Node24(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode46Node21(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode46Node10(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode46Node9(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode46Node8(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode46Node1(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode44Node28(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode44Node27(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode44Node26(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode44Node25(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode44Node24(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode44Node21(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode44Node10(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode44Node9(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode44Node8(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode44Node1(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode43Node28(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode43Node27(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode43Node26(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode43Node25(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode43Node24(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode43Node21(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode43Node10(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode43Node9(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode43Node8(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode43Node1(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.and()
		}
		if (startsWithNode42Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.and()
		}
		if (startsWithNode42Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.and()
		}
		if (startsWithNode42Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.and()
		}
		if (startsWithNode42Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.and()
		}
		if (startsWithNode42Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.and()
		}
		if (startsWithNode42Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.and()
		}
		if (startsWithNode42Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.and()
		}
		if (startsWithNode42Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.and()
		}
		if (startsWithNode42Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.and()
		}
		if (startsWithNode42Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.and()
		}
		if (startsWithNode41Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.and()
		}
		if (startsWithNode41Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.and()
		}
		if (startsWithNode41Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.and()
		}
		if (startsWithNode41Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.and()
		}
		if (startsWithNode41Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.and()
		}
		if (startsWithNode41Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.and()
		}
		if (startsWithNode41Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.and()
		}
		if (startsWithNode41Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.and()
		}
		if (startsWithNode41Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.and()
		}
		if (startsWithNode41Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.and()
		}
		if (startsWithNode40Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode40Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode40Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode40Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode40Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode40Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode40Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode40Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode40Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode40Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode39Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode39Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode39Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode39Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode39Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode39Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode39Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode39Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode39Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode39Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode38Node35Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode38Node35Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode38Node35Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode38Node35Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode38Node35Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode38Node35Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode38Node35Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode38Node35Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode38Node35Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode38Node35Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode37Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode37Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode37Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode37Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode37Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode37Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode37Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode37Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode37Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode37Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode36Node34Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode36Node34Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode36Node34Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode36Node34Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode36Node34Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode36Node34Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode36Node34Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode36Node34Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode36Node34Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode36Node34Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.and()
		}
		if (startsWithNode33Node35(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.and()
		}
		if (startsWithNode33Node34(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.and()
		}
		if (startsWithNode33Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.and()
		}
		if (startsWithNode33Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.and()
		}
		if (startsWithNode33Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.and()
		}
		if (startsWithNode33Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.and()
		}
		if (startsWithNode33Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.and()
		}
		if (startsWithNode33Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.and()
		}
		if (startsWithNode33Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.and()
		}
		if (startsWithNode33Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.and()
		}
		if (startsWithNode33Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.and()
		}
		if (startsWithNode33Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.and()
		}
		if (startsWithNode32Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.and()
		}
		if (startsWithNode32Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.and()
		}
		if (startsWithNode31Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.and()
		}
		if (startsWithNode31Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.and()
		}
		if (startsWithNode31Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.and()
		}
		if (startsWithNode31Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.and()
		}
		if (startsWithNode31Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.and()
		}
		if (startsWithNode31Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.and()
		}
		if (startsWithNode31Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.and()
		}
		if (startsWithNode31Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.and()
		}
		if (startsWithNode31Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.and()
		}
		if (startsWithNode31Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.and()
		}
		if (startsWithNode30Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.and()
		}
		if (startsWithNode30Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.and()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.and()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.and()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.and()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.and()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.and()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.and()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.and()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.and()
		}
		if (startsWithNode29Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.and()
		}
		if (startsWithNode29Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.and()
		}
		if (startsWithNode29Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.and()
		}
		if (startsWithNode29Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.and()
		}
		if (startsWithNode29Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.and()
		}
		if (startsWithNode29Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.and()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.and()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.and()
		}
		if (startsWithNode29Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.and()
		}
		if (startsWithNode29Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.and()
		}
		if (startsWithNode28(this.stack)) {
			this.stack = [new Node43(), ...this.stack]
			return this
		}		if (startsWithNode27(this.stack)) {
			this.stack = [new Node43(), ...this.stack]
			return this
		}		if (startsWithNode26(this.stack)) {
			this.stack = [new Node43(), ...this.stack]
			return this
		}		if (startsWithNode25(this.stack)) {
			this.stack = [new Node43(), ...this.stack]
			return this
		}		if (startsWithNode24(this.stack)) {
			this.stack = [new Node43(), ...this.stack]
			return this
		}		if (startsWithNode23Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.and()
		}
		if (startsWithNode23Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.and()
		}
		if (startsWithNode23Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.and()
		}
		if (startsWithNode23Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.and()
		}
		if (startsWithNode23Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.and()
		}
		if (startsWithNode23Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.and()
		}
		if (startsWithNode23Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.and()
		}
		if (startsWithNode23Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.and()
		}
		if (startsWithNode23Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.and()
		}
		if (startsWithNode23Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.and()
		}
		if (startsWithNode22Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConditionalAssignmentExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node9(content), ...tail]
			return this.and()
		}
		if (startsWithNode22Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConditionalAssignmentExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node9(content), ...tail]
			return this.and()
		}
		if (startsWithNode22Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConditionalAssignmentExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node7(content), ...tail]
			return this.and()
		}
		if (startsWithNode21(this.stack)) {
			this.stack = [new Node43(), ...this.stack]
			return this
		}		if (startsWithNode19Node4(this.stack)) {
			const content = new AssignmentXorEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.and()
		}
		if (startsWithNode18Node4(this.stack)) {
			const content = new AssignmentRightShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.and()
		}
		if (startsWithNode17Node4(this.stack)) {
			const content = new AssignmentPlusEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.and()
		}
		if (startsWithNode16Node4(this.stack)) {
			const content = new AssignmentPercentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.and()
		}
		if (startsWithNode15Node4(this.stack)) {
			const content = new AssignmentOrEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.and()
		}
		if (startsWithNode14Node4(this.stack)) {
			const content = new AssignmentMultiEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.and()
		}
		if (startsWithNode13Node4(this.stack)) {
			const content = new AssignmentMinuxEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.and()
		}
		if (startsWithNode12Node4(this.stack)) {
			const content = new AssignmentLeftShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.and()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node37(content), ...tail]
			return this.and()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.and()
		}
		if (startsWithNode10(this.stack)) {
			this.stack = [new Node43(), ...this.stack]
			return this
		}		if (startsWithNode9(this.stack)) {
			this.stack = [new Node43(), ...this.stack]
			return this
		}		if (startsWithNode8(this.stack)) {
			this.stack = [new Node43(), ...this.stack]
			return this
		}		if (startsWithNode7Node8Node4Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.and()
		}
		if (startsWithNode7Node8Node4Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.and()
		}
		if (startsWithNode7Node8Node4Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node7(content), ...tail]
			return this.and()
		}
		if (startsWithNode6Node4(this.stack)) {
			const content = new AssignmentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.and()
		}
		if (startsWithNode5Node4(this.stack)) {
			const content = new AssignmentDivEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.and()
		}
		if (startsWithNode3Node4(this.stack)) {
			const content = new AssignmentAndEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.and()
		}
		if (startsWithNode1(this.stack)) {
			this.stack = [new Node43(), ...this.stack]
			return this
		}
	}
	andEqual = (...a: any[]) => {
		if (startsWithNode52Node28Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode52Node28Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode52Node28Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode52Node28Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode52Node28Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode52Node28Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode52Node28Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode52Node28Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode52Node28Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode52Node28Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode50Node27Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode50Node27Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode50Node27Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode50Node27Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode50Node27Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode50Node27Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode50Node25Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode50Node27Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode50Node27Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode50Node27Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode49Node21Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode49Node21Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode49Node21Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode49Node21Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode49Node21Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode49Node21Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode49Node21Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode49Node21Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode49Node21Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode49Node21Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode45Node26Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode45Node26Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode45Node26Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode45Node26Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode45Node26Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode45Node26Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode45Node24Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode45Node26Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode45Node26Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode45Node26Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode42Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode42Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode42Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode42Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode42Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode42Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode42Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode42Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode42Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode42Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode41Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode41Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode41Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode41Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode41Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode41Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode41Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode41Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode41Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode41Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode40Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode40Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode40Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode40Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode40Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode40Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode40Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode40Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode40Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode40Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode39Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode39Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode39Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode39Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode39Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode39Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode39Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode39Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode39Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode39Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode38Node35Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode38Node35Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode38Node35Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode38Node35Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode38Node35Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode38Node35Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode38Node35Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode38Node35Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode38Node35Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode38Node35Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode37Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode37Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode37Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode37Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode37Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode37Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode37Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode37Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode37Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode37Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode36Node34Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode36Node34Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode36Node34Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode36Node34Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode36Node34Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode36Node34Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode36Node34Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode36Node34Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode36Node34Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode36Node34Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode33Node35(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode33Node34(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode33Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode33Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode33Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode33Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode33Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode33Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode33Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode33Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode33Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode33Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode32Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode32Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode31Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode31Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode31Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode31Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode31Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode31Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode31Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode31Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode31Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode31Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode30Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode30Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode29Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode29Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode29Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode29Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode29Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode29Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode29Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode29Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode25Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode25Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode25Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode25Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode25Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode25Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode25Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode25Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode25Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode25Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode24Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode24Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode24Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode24Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode24Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode24Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode24Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode24Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode24Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode24Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode23Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode23Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode23Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode23Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode23Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode23Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode23Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode23Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode23Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode23Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode20Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new CastExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node49(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node37(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode10Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node52(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode10Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node50(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode10Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node45(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode10Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node50(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode10Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node45(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode10Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node20(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode10Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode10Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode10Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode10Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node2(content), ...tail]
			return this.andEqual()
		}
		if (startsWithNode4(this.stack)) {
			this.stack = [new Node3(), ...this.stack]
			return this
		}
	}
	arrow = (...a: any[]) => {
		if (startsWithNode42Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode42Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode42Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode42Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode42Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode42Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode42Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode42Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode42Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode42Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode41Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode41Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode41Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode41Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode41Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode41Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode41Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode41Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode41Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode41Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode40Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode40Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode40Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode40Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode40Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode40Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode40Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode40Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode40Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode40Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode39Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode39Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode39Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode39Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode39Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode39Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode39Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode39Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode39Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode39Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode38Node35Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode38Node35Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode38Node35Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode38Node35Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode38Node35Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode38Node35Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode38Node35Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode38Node35Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode38Node35Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode38Node35Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode37Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode37Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode37Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode37Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode37Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode37Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode37Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode37Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode37Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode37Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode36Node34Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode36Node34Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode36Node34Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode36Node34Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode36Node34Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode36Node34Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode36Node34Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode36Node34Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode36Node34Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode36Node34Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode33Node35(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode33Node34(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode33Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode33Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode33Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode33Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode33Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode33Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode33Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode33Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode33Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode33Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode32Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode32Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode31Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode31Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode31Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode31Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode31Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode31Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode31Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode31Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode31Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode31Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode30Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode30Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode29Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode29Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode29Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode29Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode29Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode29Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode29Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode29Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode25Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode25Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode25Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode25Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode25Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode25Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode25Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode25Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode25Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode25Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode24Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode24Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode24Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode24Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode24Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode24Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode24Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode24Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode24Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode24Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode23Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode23Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode23Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode23Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode23Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode23Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode23Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode23Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode23Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode23Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node37(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.arrow()
		}
		if (startsWithNode10(this.stack)) {
			this.stack = [new Node34(), ...this.stack]
			return this
		}
	}
	character = (...a: any[]) => {
		if (startsWithNode51Node28(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode51Node27(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode51Node26(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode51Node25(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode51Node24(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode51Node21(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode51Node10(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode51Node9(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode51Node8(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode51Node1(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode48Node28(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode48Node27(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode48Node26(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode48Node25(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode48Node24(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode48Node21(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode48Node10(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode48Node9(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode48Node8(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode48Node1(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode47Node28(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode47Node27(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode47Node26(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode47Node25(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode47Node24(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode47Node21(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode47Node10(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode47Node9(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode47Node8(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode47Node1(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode46Node28(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode46Node27(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode46Node26(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode46Node25(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode46Node24(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode46Node21(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode46Node10(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode46Node9(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode46Node8(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode46Node1(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode44Node28(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode44Node27(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode44Node26(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode44Node25(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode44Node24(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode44Node21(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode44Node10(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode44Node9(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode44Node8(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode44Node1(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode43Node28(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode43Node27(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode43Node26(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode43Node25(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode43Node24(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode43Node21(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode43Node10(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode43Node9(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode43Node8(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode43Node1(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.character()
		}
		if (startsWithNode42Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.character()
		}
		if (startsWithNode42Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.character()
		}
		if (startsWithNode42Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.character()
		}
		if (startsWithNode42Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.character()
		}
		if (startsWithNode42Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.character()
		}
		if (startsWithNode42Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.character()
		}
		if (startsWithNode42Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.character()
		}
		if (startsWithNode42Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.character()
		}
		if (startsWithNode42Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.character()
		}
		if (startsWithNode42Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.character()
		}
		if (startsWithNode41Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.character()
		}
		if (startsWithNode41Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.character()
		}
		if (startsWithNode41Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.character()
		}
		if (startsWithNode41Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.character()
		}
		if (startsWithNode41Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.character()
		}
		if (startsWithNode41Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.character()
		}
		if (startsWithNode41Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.character()
		}
		if (startsWithNode41Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.character()
		}
		if (startsWithNode41Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.character()
		}
		if (startsWithNode41Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.character()
		}
		if (startsWithNode40Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode40Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode40Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode40Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode40Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode40Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode40Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode40Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode40Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode40Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode39Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode39Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode39Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode39Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode39Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode39Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode39Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode39Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode39Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode39Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode38Node35Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode38Node35Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode38Node35Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode38Node35Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode38Node35Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode38Node35Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode38Node35Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode38Node35Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode38Node35Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode38Node35Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode37Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode37Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode37Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode37Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode37Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode37Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode37Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode37Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode37Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode37Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode36Node34Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode36Node34Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode36Node34Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode36Node34Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode36Node34Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode36Node34Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode36Node34Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode36Node34Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode36Node34Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode36Node34Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.character()
		}
		if (startsWithNode33Node35(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.character()
		}
		if (startsWithNode33Node34(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.character()
		}
		if (startsWithNode33Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.character()
		}
		if (startsWithNode33Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.character()
		}
		if (startsWithNode33Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.character()
		}
		if (startsWithNode33Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.character()
		}
		if (startsWithNode33Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.character()
		}
		if (startsWithNode33Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.character()
		}
		if (startsWithNode33Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.character()
		}
		if (startsWithNode33Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.character()
		}
		if (startsWithNode33Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.character()
		}
		if (startsWithNode33Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.character()
		}
		if (startsWithNode32Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.character()
		}
		if (startsWithNode32Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.character()
		}
		if (startsWithNode31Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.character()
		}
		if (startsWithNode31Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.character()
		}
		if (startsWithNode31Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.character()
		}
		if (startsWithNode31Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.character()
		}
		if (startsWithNode31Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.character()
		}
		if (startsWithNode31Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.character()
		}
		if (startsWithNode31Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.character()
		}
		if (startsWithNode31Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.character()
		}
		if (startsWithNode31Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.character()
		}
		if (startsWithNode31Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.character()
		}
		if (startsWithNode30Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.character()
		}
		if (startsWithNode30Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.character()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.character()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.character()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.character()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.character()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.character()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.character()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.character()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.character()
		}
		if (startsWithNode29Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.character()
		}
		if (startsWithNode29Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.character()
		}
		if (startsWithNode29Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.character()
		}
		if (startsWithNode29Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.character()
		}
		if (startsWithNode29Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.character()
		}
		if (startsWithNode29Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.character()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.character()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.character()
		}
		if (startsWithNode29Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.character()
		}
		if (startsWithNode29Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.character()
		}
		if (startsWithNode28(this.stack)) {
			this.stack = [new Node31(a[0] as string), ...this.stack]
			return this
		}		if (startsWithNode27(this.stack)) {
			this.stack = [new Node31(a[0] as string), ...this.stack]
			return this
		}		if (startsWithNode26(this.stack)) {
			this.stack = [new Node31(a[0] as string), ...this.stack]
			return this
		}		if (startsWithNode25(this.stack)) {
			this.stack = [new Node31(a[0] as string), ...this.stack]
			return this
		}		if (startsWithNode24(this.stack)) {
			this.stack = [new Node31(a[0] as string), ...this.stack]
			return this
		}		if (startsWithNode23Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.character()
		}
		if (startsWithNode23Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.character()
		}
		if (startsWithNode23Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.character()
		}
		if (startsWithNode23Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.character()
		}
		if (startsWithNode23Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.character()
		}
		if (startsWithNode23Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.character()
		}
		if (startsWithNode23Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.character()
		}
		if (startsWithNode23Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.character()
		}
		if (startsWithNode23Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.character()
		}
		if (startsWithNode23Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.character()
		}
		if (startsWithNode22Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConditionalAssignmentExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node9(content), ...tail]
			return this.character()
		}
		if (startsWithNode22Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConditionalAssignmentExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node9(content), ...tail]
			return this.character()
		}
		if (startsWithNode22Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConditionalAssignmentExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node7(content), ...tail]
			return this.character()
		}
		if (startsWithNode21(this.stack)) {
			this.stack = [new Node31(a[0] as string), ...this.stack]
			return this
		}		if (startsWithNode19Node4(this.stack)) {
			const content = new AssignmentXorEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.character()
		}
		if (startsWithNode18Node4(this.stack)) {
			const content = new AssignmentRightShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.character()
		}
		if (startsWithNode17Node4(this.stack)) {
			const content = new AssignmentPlusEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.character()
		}
		if (startsWithNode16Node4(this.stack)) {
			const content = new AssignmentPercentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.character()
		}
		if (startsWithNode15Node4(this.stack)) {
			const content = new AssignmentOrEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.character()
		}
		if (startsWithNode14Node4(this.stack)) {
			const content = new AssignmentMultiEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.character()
		}
		if (startsWithNode13Node4(this.stack)) {
			const content = new AssignmentMinuxEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.character()
		}
		if (startsWithNode12Node4(this.stack)) {
			const content = new AssignmentLeftShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.character()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node37(content), ...tail]
			return this.character()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.character()
		}
		if (startsWithNode10(this.stack)) {
			this.stack = [new Node31(a[0] as string), ...this.stack]
			return this
		}		if (startsWithNode9(this.stack)) {
			this.stack = [new Node31(a[0] as string), ...this.stack]
			return this
		}		if (startsWithNode8(this.stack)) {
			this.stack = [new Node31(a[0] as string), ...this.stack]
			return this
		}		if (startsWithNode7Node8Node4Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.character()
		}
		if (startsWithNode7Node8Node4Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.character()
		}
		if (startsWithNode7Node8Node4Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node7(content), ...tail]
			return this.character()
		}
		if (startsWithNode6Node4(this.stack)) {
			const content = new AssignmentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.character()
		}
		if (startsWithNode5Node4(this.stack)) {
			const content = new AssignmentDivEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.character()
		}
		if (startsWithNode3Node4(this.stack)) {
			const content = new AssignmentAndEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.character()
		}
		if (startsWithNode1(this.stack)) {
			this.stack = [new Node31(a[0] as string), ...this.stack]
			return this
		}
	}
	complement = (...a: any[]) => {
		if (startsWithNode51Node28(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode51Node27(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode51Node26(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode51Node25(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode51Node24(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode51Node21(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode51Node10(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode51Node9(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode51Node8(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode51Node1(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode48Node28(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode48Node27(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode48Node26(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode48Node25(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode48Node24(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode48Node21(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode48Node10(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode48Node9(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode48Node8(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode48Node1(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode47Node28(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode47Node27(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode47Node26(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode47Node25(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode47Node24(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode47Node21(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode47Node10(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode47Node9(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode47Node8(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode47Node1(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode46Node28(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode46Node27(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode46Node26(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode46Node25(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode46Node24(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode46Node21(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode46Node10(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode46Node9(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode46Node8(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode46Node1(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode44Node28(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode44Node27(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode44Node26(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode44Node25(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode44Node24(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode44Node21(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode44Node10(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode44Node9(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode44Node8(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode44Node1(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode43Node28(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode43Node27(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode43Node26(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode43Node25(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode43Node24(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode43Node21(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode43Node10(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode43Node9(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode43Node8(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode43Node1(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.complement()
		}
		if (startsWithNode42Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.complement()
		}
		if (startsWithNode42Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.complement()
		}
		if (startsWithNode42Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.complement()
		}
		if (startsWithNode42Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.complement()
		}
		if (startsWithNode42Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.complement()
		}
		if (startsWithNode42Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.complement()
		}
		if (startsWithNode42Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.complement()
		}
		if (startsWithNode42Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.complement()
		}
		if (startsWithNode42Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.complement()
		}
		if (startsWithNode42Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.complement()
		}
		if (startsWithNode41Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.complement()
		}
		if (startsWithNode41Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.complement()
		}
		if (startsWithNode41Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.complement()
		}
		if (startsWithNode41Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.complement()
		}
		if (startsWithNode41Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.complement()
		}
		if (startsWithNode41Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.complement()
		}
		if (startsWithNode41Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.complement()
		}
		if (startsWithNode41Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.complement()
		}
		if (startsWithNode41Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.complement()
		}
		if (startsWithNode41Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.complement()
		}
		if (startsWithNode40Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode40Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode40Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode40Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode40Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode40Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode40Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode40Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode40Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode40Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode39Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode39Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode39Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode39Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode39Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode39Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode39Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode39Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode39Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode39Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode38Node35Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode38Node35Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode38Node35Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode38Node35Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode38Node35Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode38Node35Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode38Node35Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode38Node35Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode38Node35Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode38Node35Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode37Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode37Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode37Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode37Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode37Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode37Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode37Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode37Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode37Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode37Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode36Node34Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode36Node34Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode36Node34Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode36Node34Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode36Node34Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode36Node34Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode36Node34Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode36Node34Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode36Node34Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode36Node34Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.complement()
		}
		if (startsWithNode33Node35(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.complement()
		}
		if (startsWithNode33Node34(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.complement()
		}
		if (startsWithNode33Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.complement()
		}
		if (startsWithNode33Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.complement()
		}
		if (startsWithNode33Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.complement()
		}
		if (startsWithNode33Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.complement()
		}
		if (startsWithNode33Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.complement()
		}
		if (startsWithNode33Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.complement()
		}
		if (startsWithNode33Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.complement()
		}
		if (startsWithNode33Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.complement()
		}
		if (startsWithNode33Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.complement()
		}
		if (startsWithNode33Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.complement()
		}
		if (startsWithNode32Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.complement()
		}
		if (startsWithNode32Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.complement()
		}
		if (startsWithNode31Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.complement()
		}
		if (startsWithNode31Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.complement()
		}
		if (startsWithNode31Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.complement()
		}
		if (startsWithNode31Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.complement()
		}
		if (startsWithNode31Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.complement()
		}
		if (startsWithNode31Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.complement()
		}
		if (startsWithNode31Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.complement()
		}
		if (startsWithNode31Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.complement()
		}
		if (startsWithNode31Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.complement()
		}
		if (startsWithNode31Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.complement()
		}
		if (startsWithNode30Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.complement()
		}
		if (startsWithNode30Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.complement()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.complement()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.complement()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.complement()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.complement()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.complement()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.complement()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.complement()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.complement()
		}
		if (startsWithNode29Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.complement()
		}
		if (startsWithNode29Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.complement()
		}
		if (startsWithNode29Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.complement()
		}
		if (startsWithNode29Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.complement()
		}
		if (startsWithNode29Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.complement()
		}
		if (startsWithNode29Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.complement()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.complement()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.complement()
		}
		if (startsWithNode29Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.complement()
		}
		if (startsWithNode29Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.complement()
		}
		if (startsWithNode28(this.stack)) {
			this.stack = [new Node44(), ...this.stack]
			return this
		}		if (startsWithNode27(this.stack)) {
			this.stack = [new Node44(), ...this.stack]
			return this
		}		if (startsWithNode26(this.stack)) {
			this.stack = [new Node44(), ...this.stack]
			return this
		}		if (startsWithNode25(this.stack)) {
			this.stack = [new Node44(), ...this.stack]
			return this
		}		if (startsWithNode24(this.stack)) {
			this.stack = [new Node44(), ...this.stack]
			return this
		}		if (startsWithNode23Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.complement()
		}
		if (startsWithNode23Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.complement()
		}
		if (startsWithNode23Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.complement()
		}
		if (startsWithNode23Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.complement()
		}
		if (startsWithNode23Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.complement()
		}
		if (startsWithNode23Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.complement()
		}
		if (startsWithNode23Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.complement()
		}
		if (startsWithNode23Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.complement()
		}
		if (startsWithNode23Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.complement()
		}
		if (startsWithNode23Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.complement()
		}
		if (startsWithNode22Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConditionalAssignmentExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node9(content), ...tail]
			return this.complement()
		}
		if (startsWithNode22Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConditionalAssignmentExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node9(content), ...tail]
			return this.complement()
		}
		if (startsWithNode22Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConditionalAssignmentExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node7(content), ...tail]
			return this.complement()
		}
		if (startsWithNode21(this.stack)) {
			this.stack = [new Node44(), ...this.stack]
			return this
		}		if (startsWithNode19Node4(this.stack)) {
			const content = new AssignmentXorEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.complement()
		}
		if (startsWithNode18Node4(this.stack)) {
			const content = new AssignmentRightShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.complement()
		}
		if (startsWithNode17Node4(this.stack)) {
			const content = new AssignmentPlusEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.complement()
		}
		if (startsWithNode16Node4(this.stack)) {
			const content = new AssignmentPercentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.complement()
		}
		if (startsWithNode15Node4(this.stack)) {
			const content = new AssignmentOrEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.complement()
		}
		if (startsWithNode14Node4(this.stack)) {
			const content = new AssignmentMultiEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.complement()
		}
		if (startsWithNode13Node4(this.stack)) {
			const content = new AssignmentMinuxEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.complement()
		}
		if (startsWithNode12Node4(this.stack)) {
			const content = new AssignmentLeftShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.complement()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node37(content), ...tail]
			return this.complement()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.complement()
		}
		if (startsWithNode10(this.stack)) {
			this.stack = [new Node44(), ...this.stack]
			return this
		}		if (startsWithNode9(this.stack)) {
			this.stack = [new Node44(), ...this.stack]
			return this
		}		if (startsWithNode8(this.stack)) {
			this.stack = [new Node44(), ...this.stack]
			return this
		}		if (startsWithNode7Node8Node4Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.complement()
		}
		if (startsWithNode7Node8Node4Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.complement()
		}
		if (startsWithNode7Node8Node4Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node7(content), ...tail]
			return this.complement()
		}
		if (startsWithNode6Node4(this.stack)) {
			const content = new AssignmentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.complement()
		}
		if (startsWithNode5Node4(this.stack)) {
			const content = new AssignmentDivEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.complement()
		}
		if (startsWithNode3Node4(this.stack)) {
			const content = new AssignmentAndEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.complement()
		}
		if (startsWithNode1(this.stack)) {
			this.stack = [new Node44(), ...this.stack]
			return this
		}
	}
	divEqual = (...a: any[]) => {
		if (startsWithNode52Node28Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode52Node28Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode52Node28Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode52Node28Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode52Node28Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode52Node28Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode52Node28Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode52Node28Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode52Node28Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode52Node28Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode50Node27Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode50Node27Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode50Node27Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode50Node27Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode50Node27Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode50Node27Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode50Node25Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode50Node27Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode50Node27Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode50Node27Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode49Node21Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode49Node21Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode49Node21Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode49Node21Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode49Node21Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode49Node21Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode49Node21Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode49Node21Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode49Node21Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode49Node21Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode45Node26Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode45Node26Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode45Node26Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode45Node26Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode45Node26Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode45Node26Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode45Node24Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode45Node26Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode45Node26Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode45Node26Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode42Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode42Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode42Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode42Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode42Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode42Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode42Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode42Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode42Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode42Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode41Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode41Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode41Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode41Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode41Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode41Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode41Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode41Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode41Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode41Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode40Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode40Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode40Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode40Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode40Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode40Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode40Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode40Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode40Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode40Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode39Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode39Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode39Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode39Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode39Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode39Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode39Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode39Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode39Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode39Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode38Node35Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode38Node35Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode38Node35Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode38Node35Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode38Node35Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode38Node35Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode38Node35Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode38Node35Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode38Node35Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode38Node35Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode37Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode37Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode37Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode37Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode37Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode37Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode37Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode37Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode37Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode37Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode36Node34Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode36Node34Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode36Node34Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode36Node34Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode36Node34Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode36Node34Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode36Node34Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode36Node34Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode36Node34Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode36Node34Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode33Node35(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode33Node34(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode33Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode33Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode33Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode33Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode33Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode33Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode33Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode33Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode33Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode33Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode32Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode32Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode31Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode31Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode31Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode31Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode31Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode31Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode31Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode31Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode31Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode31Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode30Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode30Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode29Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode29Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode29Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode29Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode29Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode29Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode29Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode29Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode25Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode25Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode25Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode25Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode25Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode25Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode25Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode25Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode25Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode25Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode24Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode24Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode24Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode24Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode24Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode24Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode24Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode24Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode24Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode24Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode23Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode23Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode23Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode23Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode23Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode23Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode23Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode23Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode23Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode23Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode20Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new CastExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node49(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node37(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode10Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node52(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode10Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node50(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode10Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node45(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode10Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node50(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode10Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node45(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode10Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node20(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode10Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode10Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode10Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode10Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node2(content), ...tail]
			return this.divEqual()
		}
		if (startsWithNode4(this.stack)) {
			this.stack = [new Node5(), ...this.stack]
			return this
		}
	}
	dot = (...a: any[]) => {
		if (startsWithNode42Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.dot()
		}
		if (startsWithNode42Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.dot()
		}
		if (startsWithNode42Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.dot()
		}
		if (startsWithNode42Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.dot()
		}
		if (startsWithNode42Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.dot()
		}
		if (startsWithNode42Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.dot()
		}
		if (startsWithNode42Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.dot()
		}
		if (startsWithNode42Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.dot()
		}
		if (startsWithNode42Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.dot()
		}
		if (startsWithNode42Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.dot()
		}
		if (startsWithNode41Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.dot()
		}
		if (startsWithNode41Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.dot()
		}
		if (startsWithNode41Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.dot()
		}
		if (startsWithNode41Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.dot()
		}
		if (startsWithNode41Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.dot()
		}
		if (startsWithNode41Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.dot()
		}
		if (startsWithNode41Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.dot()
		}
		if (startsWithNode41Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.dot()
		}
		if (startsWithNode41Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.dot()
		}
		if (startsWithNode41Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.dot()
		}
		if (startsWithNode40Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode40Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode40Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode40Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode40Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode40Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode40Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode40Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode40Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode40Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode39Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode39Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode39Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode39Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode39Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode39Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode39Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode39Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode39Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode39Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode38Node35Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode38Node35Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode38Node35Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode38Node35Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode38Node35Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode38Node35Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode38Node35Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode38Node35Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode38Node35Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode38Node35Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode37Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode37Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode37Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode37Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode37Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode37Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode37Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode37Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode37Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode37Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode36Node34Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode36Node34Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode36Node34Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode36Node34Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode36Node34Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode36Node34Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode36Node34Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode36Node34Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode36Node34Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode36Node34Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode33Node35(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.dot()
		}
		if (startsWithNode33Node34(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.dot()
		}
		if (startsWithNode33Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.dot()
		}
		if (startsWithNode33Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.dot()
		}
		if (startsWithNode33Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.dot()
		}
		if (startsWithNode33Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.dot()
		}
		if (startsWithNode33Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.dot()
		}
		if (startsWithNode33Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.dot()
		}
		if (startsWithNode33Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.dot()
		}
		if (startsWithNode33Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.dot()
		}
		if (startsWithNode33Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.dot()
		}
		if (startsWithNode33Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.dot()
		}
		if (startsWithNode32Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.dot()
		}
		if (startsWithNode32Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.dot()
		}
		if (startsWithNode31Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.dot()
		}
		if (startsWithNode31Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.dot()
		}
		if (startsWithNode31Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.dot()
		}
		if (startsWithNode31Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.dot()
		}
		if (startsWithNode31Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.dot()
		}
		if (startsWithNode31Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.dot()
		}
		if (startsWithNode31Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.dot()
		}
		if (startsWithNode31Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.dot()
		}
		if (startsWithNode31Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.dot()
		}
		if (startsWithNode31Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.dot()
		}
		if (startsWithNode30Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.dot()
		}
		if (startsWithNode30Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.dot()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.dot()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.dot()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.dot()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.dot()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.dot()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.dot()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.dot()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.dot()
		}
		if (startsWithNode29Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.dot()
		}
		if (startsWithNode29Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.dot()
		}
		if (startsWithNode29Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.dot()
		}
		if (startsWithNode29Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.dot()
		}
		if (startsWithNode29Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.dot()
		}
		if (startsWithNode29Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.dot()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.dot()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.dot()
		}
		if (startsWithNode29Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.dot()
		}
		if (startsWithNode29Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.dot()
		}
		if (startsWithNode25Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode25Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode25Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode25Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode25Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode25Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode25Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode25Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode25Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode25Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode24Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode24Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode24Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode24Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode24Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode24Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode24Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode24Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode24Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode24Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.dot()
		}
		if (startsWithNode23Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.dot()
		}
		if (startsWithNode23Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.dot()
		}
		if (startsWithNode23Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.dot()
		}
		if (startsWithNode23Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.dot()
		}
		if (startsWithNode23Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.dot()
		}
		if (startsWithNode23Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.dot()
		}
		if (startsWithNode23Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.dot()
		}
		if (startsWithNode23Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.dot()
		}
		if (startsWithNode23Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.dot()
		}
		if (startsWithNode23Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.dot()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node37(content), ...tail]
			return this.dot()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.dot()
		}
		if (startsWithNode10(this.stack)) {
			this.stack = [new Node35(), ...this.stack]
			return this
		}
	}
	end = (...a: any[]) => {
		if (startsWithNode52Node28Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.end()
		}
		if (startsWithNode52Node28Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.end()
		}
		if (startsWithNode52Node28Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.end()
		}
		if (startsWithNode52Node28Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.end()
		}
		if (startsWithNode52Node28Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.end()
		}
		if (startsWithNode52Node28Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.end()
		}
		if (startsWithNode52Node28Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.end()
		}
		if (startsWithNode52Node28Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.end()
		}
		if (startsWithNode52Node28Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.end()
		}
		if (startsWithNode52Node28Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.end()
		}
		if (startsWithNode50Node27Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.end()
		}
		if (startsWithNode50Node27Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.end()
		}
		if (startsWithNode50Node27Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.end()
		}
		if (startsWithNode50Node27Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.end()
		}
		if (startsWithNode50Node27Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.end()
		}
		if (startsWithNode50Node27Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.end()
		}
		if (startsWithNode50Node25Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.end()
		}
		if (startsWithNode50Node27Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.end()
		}
		if (startsWithNode50Node27Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.end()
		}
		if (startsWithNode50Node27Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.end()
		}
		if (startsWithNode49Node21Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.end()
		}
		if (startsWithNode49Node21Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.end()
		}
		if (startsWithNode49Node21Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.end()
		}
		if (startsWithNode49Node21Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.end()
		}
		if (startsWithNode49Node21Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.end()
		}
		if (startsWithNode49Node21Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.end()
		}
		if (startsWithNode49Node21Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.end()
		}
		if (startsWithNode49Node21Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.end()
		}
		if (startsWithNode49Node21Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.end()
		}
		if (startsWithNode49Node21Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.end()
		}
		if (startsWithNode45Node26Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.end()
		}
		if (startsWithNode45Node26Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.end()
		}
		if (startsWithNode45Node26Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.end()
		}
		if (startsWithNode45Node26Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.end()
		}
		if (startsWithNode45Node26Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.end()
		}
		if (startsWithNode45Node26Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.end()
		}
		if (startsWithNode45Node24Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.end()
		}
		if (startsWithNode45Node26Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.end()
		}
		if (startsWithNode45Node26Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.end()
		}
		if (startsWithNode45Node26Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.end()
		}
		if (startsWithNode42Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.end()
		}
		if (startsWithNode42Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.end()
		}
		if (startsWithNode42Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.end()
		}
		if (startsWithNode42Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.end()
		}
		if (startsWithNode42Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.end()
		}
		if (startsWithNode42Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.end()
		}
		if (startsWithNode42Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.end()
		}
		if (startsWithNode42Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.end()
		}
		if (startsWithNode42Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.end()
		}
		if (startsWithNode42Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.end()
		}
		if (startsWithNode41Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.end()
		}
		if (startsWithNode41Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.end()
		}
		if (startsWithNode41Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.end()
		}
		if (startsWithNode41Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.end()
		}
		if (startsWithNode41Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.end()
		}
		if (startsWithNode41Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.end()
		}
		if (startsWithNode41Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.end()
		}
		if (startsWithNode41Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.end()
		}
		if (startsWithNode41Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.end()
		}
		if (startsWithNode41Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.end()
		}
		if (startsWithNode40Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode40Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode40Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode40Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode40Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode40Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode40Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode40Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode40Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode40Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode39Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode39Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode39Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode39Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode39Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode39Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode39Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode39Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode39Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode39Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode38Node35Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode38Node35Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode38Node35Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode38Node35Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode38Node35Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode38Node35Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode38Node35Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode38Node35Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode38Node35Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode38Node35Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode37Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode37Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode37Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode37Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode37Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode37Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode37Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode37Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode37Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode37Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode36Node34Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode36Node34Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode36Node34Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode36Node34Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode36Node34Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode36Node34Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode36Node34Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode36Node34Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode36Node34Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode36Node34Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode33Node35(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.end()
		}
		if (startsWithNode33Node34(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.end()
		}
		if (startsWithNode33Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.end()
		}
		if (startsWithNode33Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.end()
		}
		if (startsWithNode33Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.end()
		}
		if (startsWithNode33Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.end()
		}
		if (startsWithNode33Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.end()
		}
		if (startsWithNode33Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.end()
		}
		if (startsWithNode33Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.end()
		}
		if (startsWithNode33Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.end()
		}
		if (startsWithNode33Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.end()
		}
		if (startsWithNode33Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.end()
		}
		if (startsWithNode32Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.end()
		}
		if (startsWithNode32Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.end()
		}
		if (startsWithNode31Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.end()
		}
		if (startsWithNode31Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.end()
		}
		if (startsWithNode31Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.end()
		}
		if (startsWithNode31Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.end()
		}
		if (startsWithNode31Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.end()
		}
		if (startsWithNode31Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.end()
		}
		if (startsWithNode31Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.end()
		}
		if (startsWithNode31Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.end()
		}
		if (startsWithNode31Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.end()
		}
		if (startsWithNode31Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.end()
		}
		if (startsWithNode30Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.end()
		}
		if (startsWithNode30Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.end()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.end()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.end()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.end()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.end()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.end()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.end()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.end()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.end()
		}
		if (startsWithNode29Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.end()
		}
		if (startsWithNode29Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.end()
		}
		if (startsWithNode29Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.end()
		}
		if (startsWithNode29Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.end()
		}
		if (startsWithNode29Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.end()
		}
		if (startsWithNode29Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.end()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.end()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.end()
		}
		if (startsWithNode29Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.end()
		}
		if (startsWithNode29Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.end()
		}
		if (startsWithNode25Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode25Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode25Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode25Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode25Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode25Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode25Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode25Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode25Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode25Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode24Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode24Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode24Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode24Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode24Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode24Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode24Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode24Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode24Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode24Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.end()
		}
		if (startsWithNode23Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.end()
		}
		if (startsWithNode23Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.end()
		}
		if (startsWithNode23Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.end()
		}
		if (startsWithNode23Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.end()
		}
		if (startsWithNode23Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.end()
		}
		if (startsWithNode23Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.end()
		}
		if (startsWithNode23Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.end()
		}
		if (startsWithNode23Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.end()
		}
		if (startsWithNode23Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.end()
		}
		if (startsWithNode23Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.end()
		}
		if (startsWithNode20Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new CastExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node49(content), ...tail]
			return this.end()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node37(content), ...tail]
			return this.end()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.end()
		}
		if (startsWithNode10Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node52(content), ...tail]
			return this.end()
		}
		if (startsWithNode10Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node50(content), ...tail]
			return this.end()
		}
		if (startsWithNode10Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node45(content), ...tail]
			return this.end()
		}
		if (startsWithNode10Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node50(content), ...tail]
			return this.end()
		}
		if (startsWithNode10Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node45(content), ...tail]
			return this.end()
		}
		if (startsWithNode10Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node20(content), ...tail]
			return this.end()
		}
		if (startsWithNode10Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.end()
		}
		if (startsWithNode10Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.end()
		}
		if (startsWithNode10Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.end()
		}
		if (startsWithNode10Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node2(content), ...tail]
			return this.end()
		}
		if (startsWithNode2(this.stack)) {
			return this.stack[0].arg1
		}
	}
	euaql = (...a: any[]) => {
		if (startsWithNode52Node28Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode52Node28Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode52Node28Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode52Node28Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode52Node28Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode52Node28Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode52Node28Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode52Node28Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode52Node28Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode52Node28Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode50Node27Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode50Node27Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode50Node27Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode50Node27Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode50Node27Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode50Node27Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode50Node25Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode50Node27Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode50Node27Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode50Node27Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode49Node21Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode49Node21Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode49Node21Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode49Node21Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode49Node21Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode49Node21Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode49Node21Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode49Node21Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode49Node21Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode49Node21Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode45Node26Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode45Node26Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode45Node26Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode45Node26Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode45Node26Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode45Node26Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode45Node24Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode45Node26Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode45Node26Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode45Node26Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode42Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode42Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode42Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode42Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode42Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode42Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode42Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode42Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode42Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode42Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode41Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode41Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode41Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode41Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode41Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode41Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode41Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode41Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode41Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode41Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode40Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode40Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode40Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode40Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode40Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode40Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode40Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode40Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode40Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode40Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode39Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode39Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode39Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode39Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode39Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode39Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode39Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode39Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode39Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode39Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode38Node35Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode38Node35Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode38Node35Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode38Node35Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode38Node35Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode38Node35Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode38Node35Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode38Node35Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode38Node35Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode38Node35Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode37Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode37Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode37Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode37Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode37Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode37Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode37Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode37Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode37Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode37Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode36Node34Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode36Node34Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode36Node34Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode36Node34Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode36Node34Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode36Node34Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode36Node34Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode36Node34Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode36Node34Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode36Node34Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode33Node35(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode33Node34(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode33Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode33Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode33Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode33Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode33Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode33Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode33Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode33Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode33Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode33Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode32Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode32Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode31Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode31Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode31Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode31Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode31Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode31Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode31Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode31Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode31Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode31Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode30Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode30Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode29Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode29Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode29Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode29Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode29Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode29Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode29Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode29Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode25Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode25Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode25Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode25Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode25Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode25Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode25Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode25Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode25Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode25Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode24Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode24Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode24Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode24Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode24Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode24Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode24Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode24Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode24Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode24Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode23Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode23Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode23Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode23Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode23Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode23Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode23Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode23Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode23Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode23Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode20Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new CastExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node49(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node37(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode10Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node52(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode10Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node50(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode10Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node45(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode10Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node50(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode10Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node45(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode10Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node20(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode10Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode10Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode10Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode10Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node2(content), ...tail]
			return this.euaql()
		}
		if (startsWithNode4(this.stack)) {
			this.stack = [new Node6(), ...this.stack]
			return this
		}
	}
	floating = (...a: any[]) => {
		if (startsWithNode51Node28(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode51Node27(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode51Node26(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode51Node25(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode51Node24(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode51Node21(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode51Node10(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode51Node9(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode51Node8(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode51Node1(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode48Node28(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode48Node27(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode48Node26(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode48Node25(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode48Node24(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode48Node21(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode48Node10(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode48Node9(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode48Node8(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode48Node1(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode47Node28(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode47Node27(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode47Node26(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode47Node25(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode47Node24(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode47Node21(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode47Node10(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode47Node9(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode47Node8(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode47Node1(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode46Node28(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode46Node27(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode46Node26(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode46Node25(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode46Node24(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode46Node21(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode46Node10(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode46Node9(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode46Node8(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode46Node1(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode44Node28(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode44Node27(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode44Node26(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode44Node25(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode44Node24(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode44Node21(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode44Node10(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode44Node9(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode44Node8(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode44Node1(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode43Node28(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode43Node27(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode43Node26(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode43Node25(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode43Node24(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode43Node21(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode43Node10(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode43Node9(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode43Node8(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode43Node1(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.floating()
		}
		if (startsWithNode42Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.floating()
		}
		if (startsWithNode42Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.floating()
		}
		if (startsWithNode42Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.floating()
		}
		if (startsWithNode42Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.floating()
		}
		if (startsWithNode42Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.floating()
		}
		if (startsWithNode42Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.floating()
		}
		if (startsWithNode42Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.floating()
		}
		if (startsWithNode42Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.floating()
		}
		if (startsWithNode42Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.floating()
		}
		if (startsWithNode42Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.floating()
		}
		if (startsWithNode41Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.floating()
		}
		if (startsWithNode41Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.floating()
		}
		if (startsWithNode41Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.floating()
		}
		if (startsWithNode41Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.floating()
		}
		if (startsWithNode41Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.floating()
		}
		if (startsWithNode41Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.floating()
		}
		if (startsWithNode41Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.floating()
		}
		if (startsWithNode41Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.floating()
		}
		if (startsWithNode41Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.floating()
		}
		if (startsWithNode41Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.floating()
		}
		if (startsWithNode40Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode40Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode40Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode40Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode40Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode40Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode40Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode40Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode40Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode40Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode39Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode39Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode39Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode39Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode39Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode39Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode39Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode39Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode39Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode39Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode38Node35Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode38Node35Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode38Node35Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode38Node35Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode38Node35Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode38Node35Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode38Node35Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode38Node35Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode38Node35Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode38Node35Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode37Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode37Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode37Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode37Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode37Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode37Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode37Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode37Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode37Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode37Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode36Node34Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode36Node34Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode36Node34Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode36Node34Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode36Node34Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode36Node34Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode36Node34Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode36Node34Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode36Node34Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode36Node34Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.floating()
		}
		if (startsWithNode33Node35(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.floating()
		}
		if (startsWithNode33Node34(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.floating()
		}
		if (startsWithNode33Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.floating()
		}
		if (startsWithNode33Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.floating()
		}
		if (startsWithNode33Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.floating()
		}
		if (startsWithNode33Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.floating()
		}
		if (startsWithNode33Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.floating()
		}
		if (startsWithNode33Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.floating()
		}
		if (startsWithNode33Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.floating()
		}
		if (startsWithNode33Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.floating()
		}
		if (startsWithNode33Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.floating()
		}
		if (startsWithNode33Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.floating()
		}
		if (startsWithNode32Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.floating()
		}
		if (startsWithNode32Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.floating()
		}
		if (startsWithNode31Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.floating()
		}
		if (startsWithNode31Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.floating()
		}
		if (startsWithNode31Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.floating()
		}
		if (startsWithNode31Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.floating()
		}
		if (startsWithNode31Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.floating()
		}
		if (startsWithNode31Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.floating()
		}
		if (startsWithNode31Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.floating()
		}
		if (startsWithNode31Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.floating()
		}
		if (startsWithNode31Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.floating()
		}
		if (startsWithNode31Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.floating()
		}
		if (startsWithNode30Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.floating()
		}
		if (startsWithNode30Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.floating()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.floating()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.floating()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.floating()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.floating()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.floating()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.floating()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.floating()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.floating()
		}
		if (startsWithNode29Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.floating()
		}
		if (startsWithNode29Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.floating()
		}
		if (startsWithNode29Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.floating()
		}
		if (startsWithNode29Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.floating()
		}
		if (startsWithNode29Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.floating()
		}
		if (startsWithNode29Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.floating()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.floating()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.floating()
		}
		if (startsWithNode29Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.floating()
		}
		if (startsWithNode29Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.floating()
		}
		if (startsWithNode28(this.stack)) {
			this.stack = [new Node29(a[0] as number), ...this.stack]
			return this
		}		if (startsWithNode27(this.stack)) {
			this.stack = [new Node29(a[0] as number), ...this.stack]
			return this
		}		if (startsWithNode26(this.stack)) {
			this.stack = [new Node29(a[0] as number), ...this.stack]
			return this
		}		if (startsWithNode25(this.stack)) {
			this.stack = [new Node29(a[0] as number), ...this.stack]
			return this
		}		if (startsWithNode24(this.stack)) {
			this.stack = [new Node29(a[0] as number), ...this.stack]
			return this
		}		if (startsWithNode23Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.floating()
		}
		if (startsWithNode23Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.floating()
		}
		if (startsWithNode23Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.floating()
		}
		if (startsWithNode23Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.floating()
		}
		if (startsWithNode23Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.floating()
		}
		if (startsWithNode23Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.floating()
		}
		if (startsWithNode23Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.floating()
		}
		if (startsWithNode23Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.floating()
		}
		if (startsWithNode23Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.floating()
		}
		if (startsWithNode23Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.floating()
		}
		if (startsWithNode22Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConditionalAssignmentExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node9(content), ...tail]
			return this.floating()
		}
		if (startsWithNode22Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConditionalAssignmentExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node9(content), ...tail]
			return this.floating()
		}
		if (startsWithNode22Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConditionalAssignmentExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node7(content), ...tail]
			return this.floating()
		}
		if (startsWithNode21(this.stack)) {
			this.stack = [new Node29(a[0] as number), ...this.stack]
			return this
		}		if (startsWithNode19Node4(this.stack)) {
			const content = new AssignmentXorEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.floating()
		}
		if (startsWithNode18Node4(this.stack)) {
			const content = new AssignmentRightShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.floating()
		}
		if (startsWithNode17Node4(this.stack)) {
			const content = new AssignmentPlusEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.floating()
		}
		if (startsWithNode16Node4(this.stack)) {
			const content = new AssignmentPercentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.floating()
		}
		if (startsWithNode15Node4(this.stack)) {
			const content = new AssignmentOrEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.floating()
		}
		if (startsWithNode14Node4(this.stack)) {
			const content = new AssignmentMultiEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.floating()
		}
		if (startsWithNode13Node4(this.stack)) {
			const content = new AssignmentMinuxEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.floating()
		}
		if (startsWithNode12Node4(this.stack)) {
			const content = new AssignmentLeftShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.floating()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node37(content), ...tail]
			return this.floating()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.floating()
		}
		if (startsWithNode10(this.stack)) {
			this.stack = [new Node29(a[0] as number), ...this.stack]
			return this
		}		if (startsWithNode9(this.stack)) {
			this.stack = [new Node29(a[0] as number), ...this.stack]
			return this
		}		if (startsWithNode8(this.stack)) {
			this.stack = [new Node29(a[0] as number), ...this.stack]
			return this
		}		if (startsWithNode7Node8Node4Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.floating()
		}
		if (startsWithNode7Node8Node4Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.floating()
		}
		if (startsWithNode7Node8Node4Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node7(content), ...tail]
			return this.floating()
		}
		if (startsWithNode6Node4(this.stack)) {
			const content = new AssignmentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.floating()
		}
		if (startsWithNode5Node4(this.stack)) {
			const content = new AssignmentDivEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.floating()
		}
		if (startsWithNode3Node4(this.stack)) {
			const content = new AssignmentAndEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.floating()
		}
		if (startsWithNode1(this.stack)) {
			this.stack = [new Node29(a[0] as number), ...this.stack]
			return this
		}
	}
	integer = (...a: any[]) => {
		if (startsWithNode51Node28(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode51Node27(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode51Node26(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode51Node25(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode51Node24(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode51Node21(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode51Node10(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode51Node9(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode51Node8(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode51Node1(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode48Node28(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode48Node27(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode48Node26(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode48Node25(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode48Node24(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode48Node21(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode48Node10(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode48Node9(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode48Node8(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode48Node1(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode47Node28(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode47Node27(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode47Node26(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode47Node25(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode47Node24(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode47Node21(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode47Node10(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode47Node9(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode47Node8(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode47Node1(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode46Node28(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode46Node27(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode46Node26(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode46Node25(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode46Node24(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode46Node21(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode46Node10(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode46Node9(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode46Node8(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode46Node1(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode44Node28(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode44Node27(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode44Node26(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode44Node25(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode44Node24(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode44Node21(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode44Node10(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode44Node9(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode44Node8(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode44Node1(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode43Node28(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode43Node27(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode43Node26(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode43Node25(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode43Node24(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode43Node21(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode43Node10(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode43Node9(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode43Node8(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode43Node1(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.integer()
		}
		if (startsWithNode42Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.integer()
		}
		if (startsWithNode42Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.integer()
		}
		if (startsWithNode42Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.integer()
		}
		if (startsWithNode42Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.integer()
		}
		if (startsWithNode42Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.integer()
		}
		if (startsWithNode42Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.integer()
		}
		if (startsWithNode42Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.integer()
		}
		if (startsWithNode42Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.integer()
		}
		if (startsWithNode42Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.integer()
		}
		if (startsWithNode42Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.integer()
		}
		if (startsWithNode41Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.integer()
		}
		if (startsWithNode41Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.integer()
		}
		if (startsWithNode41Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.integer()
		}
		if (startsWithNode41Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.integer()
		}
		if (startsWithNode41Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.integer()
		}
		if (startsWithNode41Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.integer()
		}
		if (startsWithNode41Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.integer()
		}
		if (startsWithNode41Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.integer()
		}
		if (startsWithNode41Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.integer()
		}
		if (startsWithNode41Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.integer()
		}
		if (startsWithNode40Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode40Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode40Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode40Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode40Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode40Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode40Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode40Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode40Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode40Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode39Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode39Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode39Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode39Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode39Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode39Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode39Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode39Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode39Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode39Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode38Node35Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode38Node35Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode38Node35Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode38Node35Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode38Node35Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode38Node35Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode38Node35Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode38Node35Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode38Node35Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode38Node35Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode37Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode37Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode37Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode37Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode37Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode37Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode37Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode37Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode37Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode37Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode36Node34Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode36Node34Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode36Node34Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode36Node34Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode36Node34Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode36Node34Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode36Node34Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode36Node34Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode36Node34Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode36Node34Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.integer()
		}
		if (startsWithNode33Node35(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.integer()
		}
		if (startsWithNode33Node34(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.integer()
		}
		if (startsWithNode33Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.integer()
		}
		if (startsWithNode33Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.integer()
		}
		if (startsWithNode33Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.integer()
		}
		if (startsWithNode33Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.integer()
		}
		if (startsWithNode33Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.integer()
		}
		if (startsWithNode33Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.integer()
		}
		if (startsWithNode33Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.integer()
		}
		if (startsWithNode33Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.integer()
		}
		if (startsWithNode33Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.integer()
		}
		if (startsWithNode33Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.integer()
		}
		if (startsWithNode32Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.integer()
		}
		if (startsWithNode32Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.integer()
		}
		if (startsWithNode31Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.integer()
		}
		if (startsWithNode31Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.integer()
		}
		if (startsWithNode31Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.integer()
		}
		if (startsWithNode31Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.integer()
		}
		if (startsWithNode31Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.integer()
		}
		if (startsWithNode31Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.integer()
		}
		if (startsWithNode31Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.integer()
		}
		if (startsWithNode31Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.integer()
		}
		if (startsWithNode31Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.integer()
		}
		if (startsWithNode31Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.integer()
		}
		if (startsWithNode30Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.integer()
		}
		if (startsWithNode30Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.integer()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.integer()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.integer()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.integer()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.integer()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.integer()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.integer()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.integer()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.integer()
		}
		if (startsWithNode29Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.integer()
		}
		if (startsWithNode29Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.integer()
		}
		if (startsWithNode29Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.integer()
		}
		if (startsWithNode29Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.integer()
		}
		if (startsWithNode29Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.integer()
		}
		if (startsWithNode29Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.integer()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.integer()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.integer()
		}
		if (startsWithNode29Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.integer()
		}
		if (startsWithNode29Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.integer()
		}
		if (startsWithNode28(this.stack)) {
			this.stack = [new Node30(a[0] as number), ...this.stack]
			return this
		}		if (startsWithNode27(this.stack)) {
			this.stack = [new Node30(a[0] as number), ...this.stack]
			return this
		}		if (startsWithNode26(this.stack)) {
			this.stack = [new Node30(a[0] as number), ...this.stack]
			return this
		}		if (startsWithNode25(this.stack)) {
			this.stack = [new Node30(a[0] as number), ...this.stack]
			return this
		}		if (startsWithNode24(this.stack)) {
			this.stack = [new Node30(a[0] as number), ...this.stack]
			return this
		}		if (startsWithNode23Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.integer()
		}
		if (startsWithNode23Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.integer()
		}
		if (startsWithNode23Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.integer()
		}
		if (startsWithNode23Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.integer()
		}
		if (startsWithNode23Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.integer()
		}
		if (startsWithNode23Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.integer()
		}
		if (startsWithNode23Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.integer()
		}
		if (startsWithNode23Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.integer()
		}
		if (startsWithNode23Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.integer()
		}
		if (startsWithNode23Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.integer()
		}
		if (startsWithNode22Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConditionalAssignmentExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node9(content), ...tail]
			return this.integer()
		}
		if (startsWithNode22Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConditionalAssignmentExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node9(content), ...tail]
			return this.integer()
		}
		if (startsWithNode22Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConditionalAssignmentExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node7(content), ...tail]
			return this.integer()
		}
		if (startsWithNode21(this.stack)) {
			this.stack = [new Node30(a[0] as number), ...this.stack]
			return this
		}		if (startsWithNode19Node4(this.stack)) {
			const content = new AssignmentXorEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.integer()
		}
		if (startsWithNode18Node4(this.stack)) {
			const content = new AssignmentRightShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.integer()
		}
		if (startsWithNode17Node4(this.stack)) {
			const content = new AssignmentPlusEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.integer()
		}
		if (startsWithNode16Node4(this.stack)) {
			const content = new AssignmentPercentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.integer()
		}
		if (startsWithNode15Node4(this.stack)) {
			const content = new AssignmentOrEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.integer()
		}
		if (startsWithNode14Node4(this.stack)) {
			const content = new AssignmentMultiEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.integer()
		}
		if (startsWithNode13Node4(this.stack)) {
			const content = new AssignmentMinuxEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.integer()
		}
		if (startsWithNode12Node4(this.stack)) {
			const content = new AssignmentLeftShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.integer()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node37(content), ...tail]
			return this.integer()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.integer()
		}
		if (startsWithNode10(this.stack)) {
			this.stack = [new Node30(a[0] as number), ...this.stack]
			return this
		}		if (startsWithNode9(this.stack)) {
			this.stack = [new Node30(a[0] as number), ...this.stack]
			return this
		}		if (startsWithNode8(this.stack)) {
			this.stack = [new Node30(a[0] as number), ...this.stack]
			return this
		}		if (startsWithNode7Node8Node4Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.integer()
		}
		if (startsWithNode7Node8Node4Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.integer()
		}
		if (startsWithNode7Node8Node4Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node7(content), ...tail]
			return this.integer()
		}
		if (startsWithNode6Node4(this.stack)) {
			const content = new AssignmentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.integer()
		}
		if (startsWithNode5Node4(this.stack)) {
			const content = new AssignmentDivEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.integer()
		}
		if (startsWithNode3Node4(this.stack)) {
			const content = new AssignmentAndEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.integer()
		}
		if (startsWithNode1(this.stack)) {
			this.stack = [new Node30(a[0] as number), ...this.stack]
			return this
		}
	}
	leftShiftEqual = (...a: any[]) => {
		if (startsWithNode52Node28Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode52Node28Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode52Node28Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode52Node28Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode52Node28Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode52Node28Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode52Node28Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode52Node28Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode52Node28Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode52Node28Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode50Node27Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode50Node27Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode50Node27Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode50Node27Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode50Node27Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode50Node27Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode50Node25Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode50Node27Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode50Node27Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode50Node27Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode49Node21Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode49Node21Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode49Node21Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode49Node21Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode49Node21Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode49Node21Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode49Node21Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode49Node21Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode49Node21Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode49Node21Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode45Node26Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode45Node26Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode45Node26Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode45Node26Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode45Node26Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode45Node26Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode45Node24Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode45Node26Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode45Node26Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode45Node26Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode42Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode42Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode42Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode42Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode42Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode42Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode42Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode42Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode42Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode42Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode41Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode41Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode41Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode41Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode41Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode41Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode41Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode41Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode41Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode41Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode40Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode40Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode40Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode40Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode40Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode40Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode40Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode40Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode40Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode40Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode39Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode39Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode39Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode39Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode39Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode39Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode39Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode39Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode39Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode39Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode38Node35Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode38Node35Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode38Node35Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode38Node35Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode38Node35Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode38Node35Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode38Node35Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode38Node35Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode38Node35Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode38Node35Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode37Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode37Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode37Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode37Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode37Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode37Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode37Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode37Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode37Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode37Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode36Node34Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode36Node34Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode36Node34Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode36Node34Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode36Node34Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode36Node34Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode36Node34Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode36Node34Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode36Node34Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode36Node34Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode33Node35(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode33Node34(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode33Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode33Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode33Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode33Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode33Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode33Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode33Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode33Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode33Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode33Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode32Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode32Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode31Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode31Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode31Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode31Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode31Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode31Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode31Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode31Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode31Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode31Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode30Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode30Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode29Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode29Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode29Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode29Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode29Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode29Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode29Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode29Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode25Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode25Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode25Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode25Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode25Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode25Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode25Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode25Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode25Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode25Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode24Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode24Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode24Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode24Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode24Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode24Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode24Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode24Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode24Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode24Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode23Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode23Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode23Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode23Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode23Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode23Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode23Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode23Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode23Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode23Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode20Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new CastExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node49(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node37(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode10Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node52(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode10Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node50(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode10Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node45(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode10Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node50(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode10Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node45(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode10Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node20(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode10Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode10Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode10Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode10Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node2(content), ...tail]
			return this.leftShiftEqual()
		}
		if (startsWithNode4(this.stack)) {
			this.stack = [new Node12(), ...this.stack]
			return this
		}
	}
	minus = (...a: any[]) => {
		if (startsWithNode51Node28(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode51Node27(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode51Node26(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode51Node25(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode51Node24(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode51Node21(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode51Node10(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode51Node9(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode51Node8(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode51Node1(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode48Node28(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode48Node27(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode48Node26(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode48Node25(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode48Node24(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode48Node21(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode48Node10(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode48Node9(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode48Node8(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode48Node1(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode47Node28(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode47Node27(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode47Node26(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode47Node25(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode47Node24(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode47Node21(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode47Node10(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode47Node9(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode47Node8(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode47Node1(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode46Node28(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode46Node27(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode46Node26(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode46Node25(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode46Node24(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode46Node21(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode46Node10(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode46Node9(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode46Node8(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode46Node1(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode44Node28(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode44Node27(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode44Node26(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode44Node25(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode44Node24(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode44Node21(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode44Node10(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode44Node9(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode44Node8(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode44Node1(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode43Node28(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode43Node27(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode43Node26(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode43Node25(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode43Node24(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode43Node21(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode43Node10(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode43Node9(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode43Node8(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode43Node1(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minus()
		}
		if (startsWithNode42Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minus()
		}
		if (startsWithNode42Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minus()
		}
		if (startsWithNode42Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minus()
		}
		if (startsWithNode42Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minus()
		}
		if (startsWithNode42Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minus()
		}
		if (startsWithNode42Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minus()
		}
		if (startsWithNode42Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minus()
		}
		if (startsWithNode42Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minus()
		}
		if (startsWithNode42Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minus()
		}
		if (startsWithNode42Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minus()
		}
		if (startsWithNode41Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minus()
		}
		if (startsWithNode41Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minus()
		}
		if (startsWithNode41Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minus()
		}
		if (startsWithNode41Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minus()
		}
		if (startsWithNode41Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minus()
		}
		if (startsWithNode41Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minus()
		}
		if (startsWithNode41Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minus()
		}
		if (startsWithNode41Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minus()
		}
		if (startsWithNode41Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minus()
		}
		if (startsWithNode41Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minus()
		}
		if (startsWithNode40Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode40Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode40Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode40Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode40Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode40Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode40Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode40Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode40Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode40Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode39Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode39Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode39Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode39Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode39Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode39Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode39Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode39Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode39Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode39Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode38Node35Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode38Node35Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode38Node35Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode38Node35Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode38Node35Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode38Node35Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode38Node35Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode38Node35Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode38Node35Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode38Node35Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode37Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode37Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode37Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode37Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode37Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode37Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode37Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode37Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode37Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode37Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode36Node34Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode36Node34Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode36Node34Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode36Node34Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode36Node34Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode36Node34Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode36Node34Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode36Node34Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode36Node34Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode36Node34Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minus()
		}
		if (startsWithNode33Node35(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.minus()
		}
		if (startsWithNode33Node34(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minus()
		}
		if (startsWithNode33Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.minus()
		}
		if (startsWithNode33Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.minus()
		}
		if (startsWithNode33Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.minus()
		}
		if (startsWithNode33Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.minus()
		}
		if (startsWithNode33Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.minus()
		}
		if (startsWithNode33Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.minus()
		}
		if (startsWithNode33Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.minus()
		}
		if (startsWithNode33Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.minus()
		}
		if (startsWithNode33Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.minus()
		}
		if (startsWithNode33Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.minus()
		}
		if (startsWithNode32Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minus()
		}
		if (startsWithNode32Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.minus()
		}
		if (startsWithNode31Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minus()
		}
		if (startsWithNode31Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minus()
		}
		if (startsWithNode31Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minus()
		}
		if (startsWithNode31Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minus()
		}
		if (startsWithNode31Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minus()
		}
		if (startsWithNode31Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minus()
		}
		if (startsWithNode31Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minus()
		}
		if (startsWithNode31Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minus()
		}
		if (startsWithNode31Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minus()
		}
		if (startsWithNode31Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minus()
		}
		if (startsWithNode30Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minus()
		}
		if (startsWithNode30Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minus()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minus()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minus()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minus()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minus()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minus()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minus()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minus()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minus()
		}
		if (startsWithNode29Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minus()
		}
		if (startsWithNode29Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minus()
		}
		if (startsWithNode29Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minus()
		}
		if (startsWithNode29Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minus()
		}
		if (startsWithNode29Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minus()
		}
		if (startsWithNode29Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minus()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minus()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minus()
		}
		if (startsWithNode29Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minus()
		}
		if (startsWithNode29Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minus()
		}
		if (startsWithNode28(this.stack)) {
			this.stack = [new Node46(), ...this.stack]
			return this
		}		if (startsWithNode27(this.stack)) {
			this.stack = [new Node46(), ...this.stack]
			return this
		}		if (startsWithNode26(this.stack)) {
			this.stack = [new Node46(), ...this.stack]
			return this
		}		if (startsWithNode25(this.stack)) {
			this.stack = [new Node46(), ...this.stack]
			return this
		}		if (startsWithNode24(this.stack)) {
			this.stack = [new Node46(), ...this.stack]
			return this
		}		if (startsWithNode23Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minus()
		}
		if (startsWithNode23Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minus()
		}
		if (startsWithNode23Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minus()
		}
		if (startsWithNode23Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minus()
		}
		if (startsWithNode23Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minus()
		}
		if (startsWithNode23Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minus()
		}
		if (startsWithNode23Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minus()
		}
		if (startsWithNode23Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minus()
		}
		if (startsWithNode23Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minus()
		}
		if (startsWithNode23Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minus()
		}
		if (startsWithNode22Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConditionalAssignmentExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node9(content), ...tail]
			return this.minus()
		}
		if (startsWithNode22Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConditionalAssignmentExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node9(content), ...tail]
			return this.minus()
		}
		if (startsWithNode22Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConditionalAssignmentExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node7(content), ...tail]
			return this.minus()
		}
		if (startsWithNode21(this.stack)) {
			this.stack = [new Node46(), ...this.stack]
			return this
		}		if (startsWithNode19Node4(this.stack)) {
			const content = new AssignmentXorEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minus()
		}
		if (startsWithNode18Node4(this.stack)) {
			const content = new AssignmentRightShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minus()
		}
		if (startsWithNode17Node4(this.stack)) {
			const content = new AssignmentPlusEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minus()
		}
		if (startsWithNode16Node4(this.stack)) {
			const content = new AssignmentPercentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minus()
		}
		if (startsWithNode15Node4(this.stack)) {
			const content = new AssignmentOrEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minus()
		}
		if (startsWithNode14Node4(this.stack)) {
			const content = new AssignmentMultiEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minus()
		}
		if (startsWithNode13Node4(this.stack)) {
			const content = new AssignmentMinuxEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minus()
		}
		if (startsWithNode12Node4(this.stack)) {
			const content = new AssignmentLeftShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minus()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node37(content), ...tail]
			return this.minus()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.minus()
		}
		if (startsWithNode10(this.stack)) {
			this.stack = [new Node46(), ...this.stack]
			return this
		}		if (startsWithNode9(this.stack)) {
			this.stack = [new Node46(), ...this.stack]
			return this
		}		if (startsWithNode8(this.stack)) {
			this.stack = [new Node46(), ...this.stack]
			return this
		}		if (startsWithNode7Node8Node4Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.minus()
		}
		if (startsWithNode7Node8Node4Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.minus()
		}
		if (startsWithNode7Node8Node4Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node7(content), ...tail]
			return this.minus()
		}
		if (startsWithNode6Node4(this.stack)) {
			const content = new AssignmentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minus()
		}
		if (startsWithNode5Node4(this.stack)) {
			const content = new AssignmentDivEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minus()
		}
		if (startsWithNode3Node4(this.stack)) {
			const content = new AssignmentAndEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minus()
		}
		if (startsWithNode1(this.stack)) {
			this.stack = [new Node46(), ...this.stack]
			return this
		}
	}
	minusEqual = (...a: any[]) => {
		if (startsWithNode52Node28Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode52Node28Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode52Node28Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode52Node28Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode52Node28Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode52Node28Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode52Node28Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode52Node28Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode52Node28Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode52Node28Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode50Node27Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode50Node27Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode50Node27Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode50Node27Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode50Node27Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode50Node27Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode50Node25Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode50Node27Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode50Node27Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode50Node27Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode49Node21Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode49Node21Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode49Node21Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode49Node21Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode49Node21Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode49Node21Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode49Node21Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode49Node21Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode49Node21Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode49Node21Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode45Node26Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode45Node26Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode45Node26Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode45Node26Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode45Node26Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode45Node26Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode45Node24Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode45Node26Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode45Node26Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode45Node26Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode42Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode42Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode42Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode42Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode42Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode42Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode42Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode42Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode42Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode42Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode41Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode41Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode41Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode41Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode41Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode41Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode41Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode41Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode41Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode41Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode40Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode40Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode40Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode40Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode40Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode40Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode40Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode40Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode40Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode40Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode39Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode39Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode39Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode39Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode39Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode39Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode39Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode39Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode39Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode39Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode38Node35Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode38Node35Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode38Node35Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode38Node35Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode38Node35Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode38Node35Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode38Node35Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode38Node35Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode38Node35Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode38Node35Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode37Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode37Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode37Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode37Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode37Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode37Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode37Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode37Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode37Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode37Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode36Node34Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode36Node34Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode36Node34Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode36Node34Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode36Node34Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode36Node34Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode36Node34Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode36Node34Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode36Node34Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode36Node34Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode33Node35(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode33Node34(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode33Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode33Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode33Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode33Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode33Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode33Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode33Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode33Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode33Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode33Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode32Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode32Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode31Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode31Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode31Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode31Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode31Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode31Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode31Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode31Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode31Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode31Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode30Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode30Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode29Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode29Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode29Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode29Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode29Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode29Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode29Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode29Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode25Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode25Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode25Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode25Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode25Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode25Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode25Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode25Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode25Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode25Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode24Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode24Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode24Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode24Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode24Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode24Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode24Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode24Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode24Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode24Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode23Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode23Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode23Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode23Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode23Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode23Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode23Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode23Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode23Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode23Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode20Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new CastExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node49(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node37(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode10Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node52(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode10Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node50(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode10Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node45(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode10Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node50(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode10Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node45(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode10Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node20(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode10Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode10Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode10Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode10Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node2(content), ...tail]
			return this.minusEqual()
		}
		if (startsWithNode4(this.stack)) {
			this.stack = [new Node13(), ...this.stack]
			return this
		}
	}
	minusMinus = (...a: any[]) => {
		if (startsWithNode51Node28(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode51Node27(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode51Node26(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode51Node25(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode51Node24(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode51Node21(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode51Node10(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode51Node9(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode51Node8(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode51Node1(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode48Node28(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode48Node27(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode48Node26(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode48Node25(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode48Node24(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode48Node21(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode48Node10(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode48Node9(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode48Node8(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode48Node1(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode47Node28(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode47Node27(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode47Node26(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode47Node25(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode47Node24(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode47Node21(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode47Node10(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode47Node9(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode47Node8(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode47Node1(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode46Node28(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode46Node27(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode46Node26(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode46Node25(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode46Node24(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode46Node21(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode46Node10(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode46Node9(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode46Node8(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode46Node1(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode44Node28(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode44Node27(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode44Node26(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode44Node25(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode44Node24(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode44Node21(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode44Node10(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode44Node9(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode44Node8(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode44Node1(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode43Node28(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode43Node27(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode43Node26(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode43Node25(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode43Node24(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode43Node21(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode43Node10(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode43Node9(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode43Node8(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode43Node1(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode42Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode42Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode42Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode42Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode42Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode42Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode42Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode42Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode42Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode42Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode41Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode41Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode41Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode41Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode41Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode41Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode41Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode41Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode41Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode41Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode40Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode40Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode40Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode40Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode40Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode40Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode40Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode40Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode40Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode40Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode39Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode39Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode39Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode39Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode39Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode39Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode39Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode39Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode39Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode39Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode38Node35Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode38Node35Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode38Node35Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode38Node35Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode38Node35Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode38Node35Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode38Node35Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode38Node35Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode38Node35Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode38Node35Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode37Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode37Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode37Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode37Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode37Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode37Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode37Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode37Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode37Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode37Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode36Node34Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode36Node34Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode36Node34Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode36Node34Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode36Node34Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode36Node34Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode36Node34Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode36Node34Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode36Node34Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode36Node34Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode33Node35(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode33Node34(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode33Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode33Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode33Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode33Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode33Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode33Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode33Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode33Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode33Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode33Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode32Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode32Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode31Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode31Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode31Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode31Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode31Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode31Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode31Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode31Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode31Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode31Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode30Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode30Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode29Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode29Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode29Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode29Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode29Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode29Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode29Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode29Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode28(this.stack)) {
			this.stack = [new Node26(), ...this.stack]
			return this
		}		if (startsWithNode27(this.stack)) {
			this.stack = [new Node26(), ...this.stack]
			return this
		}		if (startsWithNode26(this.stack)) {
			this.stack = [new Node26(), ...this.stack]
			return this
		}		if (startsWithNode25(this.stack)) {
			this.stack = [new Node26(), ...this.stack]
			return this
		}		if (startsWithNode24(this.stack)) {
			this.stack = [new Node26(), ...this.stack]
			return this
		}		if (startsWithNode23Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode23Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode23Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode23Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode23Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode23Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode23Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode23Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode23Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode23Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode22Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConditionalAssignmentExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node9(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode22Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConditionalAssignmentExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node9(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode22Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConditionalAssignmentExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node7(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode21(this.stack)) {
			this.stack = [new Node26(), ...this.stack]
			return this
		}		if (startsWithNode19Node4(this.stack)) {
			const content = new AssignmentXorEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode18Node4(this.stack)) {
			const content = new AssignmentRightShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode17Node4(this.stack)) {
			const content = new AssignmentPlusEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode16Node4(this.stack)) {
			const content = new AssignmentPercentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode15Node4(this.stack)) {
			const content = new AssignmentOrEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode14Node4(this.stack)) {
			const content = new AssignmentMultiEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode13Node4(this.stack)) {
			const content = new AssignmentMinuxEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode12Node4(this.stack)) {
			const content = new AssignmentLeftShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node37(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode10(this.stack)) {
			this.stack = [new Node24(), ...this.stack]
			return this
		}		if (startsWithNode9(this.stack)) {
			this.stack = [new Node26(), ...this.stack]
			return this
		}		if (startsWithNode8(this.stack)) {
			this.stack = [new Node26(), ...this.stack]
			return this
		}		if (startsWithNode7Node8Node4Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode7Node8Node4Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode7Node8Node4Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node7(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode6Node4(this.stack)) {
			const content = new AssignmentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode5Node4(this.stack)) {
			const content = new AssignmentDivEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode3Node4(this.stack)) {
			const content = new AssignmentAndEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.minusMinus()
		}
		if (startsWithNode1(this.stack)) {
			this.stack = [new Node26(), ...this.stack]
			return this
		}
	}
	multi = (...a: any[]) => {
		if (startsWithNode51Node28(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode51Node27(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode51Node26(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode51Node25(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode51Node24(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode51Node21(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode51Node10(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode51Node9(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode51Node8(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode51Node1(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode48Node28(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode48Node27(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode48Node26(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode48Node25(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode48Node24(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode48Node21(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode48Node10(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode48Node9(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode48Node8(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode48Node1(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode47Node28(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode47Node27(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode47Node26(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode47Node25(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode47Node24(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode47Node21(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode47Node10(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode47Node9(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode47Node8(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode47Node1(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode46Node28(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode46Node27(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode46Node26(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode46Node25(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode46Node24(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode46Node21(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode46Node10(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode46Node9(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode46Node8(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode46Node1(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode44Node28(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode44Node27(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode44Node26(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode44Node25(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode44Node24(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode44Node21(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode44Node10(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode44Node9(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode44Node8(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode44Node1(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode43Node28(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode43Node27(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode43Node26(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode43Node25(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode43Node24(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode43Node21(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode43Node10(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode43Node9(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode43Node8(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode43Node1(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.multi()
		}
		if (startsWithNode42Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multi()
		}
		if (startsWithNode42Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multi()
		}
		if (startsWithNode42Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multi()
		}
		if (startsWithNode42Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multi()
		}
		if (startsWithNode42Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multi()
		}
		if (startsWithNode42Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multi()
		}
		if (startsWithNode42Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multi()
		}
		if (startsWithNode42Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multi()
		}
		if (startsWithNode42Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multi()
		}
		if (startsWithNode42Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multi()
		}
		if (startsWithNode41Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multi()
		}
		if (startsWithNode41Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multi()
		}
		if (startsWithNode41Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multi()
		}
		if (startsWithNode41Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multi()
		}
		if (startsWithNode41Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multi()
		}
		if (startsWithNode41Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multi()
		}
		if (startsWithNode41Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multi()
		}
		if (startsWithNode41Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multi()
		}
		if (startsWithNode41Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multi()
		}
		if (startsWithNode41Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multi()
		}
		if (startsWithNode40Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode40Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode40Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode40Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode40Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode40Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode40Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode40Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode40Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode40Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode39Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode39Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode39Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode39Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode39Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode39Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode39Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode39Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode39Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode39Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode38Node35Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode38Node35Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode38Node35Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode38Node35Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode38Node35Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode38Node35Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode38Node35Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode38Node35Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode38Node35Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode38Node35Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode37Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode37Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode37Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode37Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode37Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode37Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode37Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode37Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode37Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode37Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode36Node34Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode36Node34Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode36Node34Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode36Node34Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode36Node34Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode36Node34Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode36Node34Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode36Node34Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode36Node34Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode36Node34Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multi()
		}
		if (startsWithNode33Node35(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.multi()
		}
		if (startsWithNode33Node34(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multi()
		}
		if (startsWithNode33Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.multi()
		}
		if (startsWithNode33Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.multi()
		}
		if (startsWithNode33Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.multi()
		}
		if (startsWithNode33Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.multi()
		}
		if (startsWithNode33Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.multi()
		}
		if (startsWithNode33Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.multi()
		}
		if (startsWithNode33Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.multi()
		}
		if (startsWithNode33Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.multi()
		}
		if (startsWithNode33Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.multi()
		}
		if (startsWithNode33Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.multi()
		}
		if (startsWithNode32Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multi()
		}
		if (startsWithNode32Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.multi()
		}
		if (startsWithNode31Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multi()
		}
		if (startsWithNode31Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multi()
		}
		if (startsWithNode31Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multi()
		}
		if (startsWithNode31Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multi()
		}
		if (startsWithNode31Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multi()
		}
		if (startsWithNode31Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multi()
		}
		if (startsWithNode31Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multi()
		}
		if (startsWithNode31Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multi()
		}
		if (startsWithNode31Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multi()
		}
		if (startsWithNode31Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multi()
		}
		if (startsWithNode30Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multi()
		}
		if (startsWithNode30Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multi()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multi()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multi()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multi()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multi()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multi()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multi()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multi()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multi()
		}
		if (startsWithNode29Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multi()
		}
		if (startsWithNode29Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multi()
		}
		if (startsWithNode29Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multi()
		}
		if (startsWithNode29Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multi()
		}
		if (startsWithNode29Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multi()
		}
		if (startsWithNode29Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multi()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multi()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multi()
		}
		if (startsWithNode29Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multi()
		}
		if (startsWithNode29Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multi()
		}
		if (startsWithNode28(this.stack)) {
			this.stack = [new Node47(), ...this.stack]
			return this
		}		if (startsWithNode27(this.stack)) {
			this.stack = [new Node47(), ...this.stack]
			return this
		}		if (startsWithNode26(this.stack)) {
			this.stack = [new Node47(), ...this.stack]
			return this
		}		if (startsWithNode25(this.stack)) {
			this.stack = [new Node47(), ...this.stack]
			return this
		}		if (startsWithNode24(this.stack)) {
			this.stack = [new Node47(), ...this.stack]
			return this
		}		if (startsWithNode23Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multi()
		}
		if (startsWithNode23Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multi()
		}
		if (startsWithNode23Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multi()
		}
		if (startsWithNode23Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multi()
		}
		if (startsWithNode23Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multi()
		}
		if (startsWithNode23Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multi()
		}
		if (startsWithNode23Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multi()
		}
		if (startsWithNode23Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multi()
		}
		if (startsWithNode23Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multi()
		}
		if (startsWithNode23Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multi()
		}
		if (startsWithNode22Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConditionalAssignmentExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node9(content), ...tail]
			return this.multi()
		}
		if (startsWithNode22Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConditionalAssignmentExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node9(content), ...tail]
			return this.multi()
		}
		if (startsWithNode22Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConditionalAssignmentExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node7(content), ...tail]
			return this.multi()
		}
		if (startsWithNode21(this.stack)) {
			this.stack = [new Node47(), ...this.stack]
			return this
		}		if (startsWithNode19Node4(this.stack)) {
			const content = new AssignmentXorEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.multi()
		}
		if (startsWithNode18Node4(this.stack)) {
			const content = new AssignmentRightShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.multi()
		}
		if (startsWithNode17Node4(this.stack)) {
			const content = new AssignmentPlusEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.multi()
		}
		if (startsWithNode16Node4(this.stack)) {
			const content = new AssignmentPercentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.multi()
		}
		if (startsWithNode15Node4(this.stack)) {
			const content = new AssignmentOrEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.multi()
		}
		if (startsWithNode14Node4(this.stack)) {
			const content = new AssignmentMultiEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.multi()
		}
		if (startsWithNode13Node4(this.stack)) {
			const content = new AssignmentMinuxEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.multi()
		}
		if (startsWithNode12Node4(this.stack)) {
			const content = new AssignmentLeftShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.multi()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node37(content), ...tail]
			return this.multi()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.multi()
		}
		if (startsWithNode10(this.stack)) {
			this.stack = [new Node47(), ...this.stack]
			return this
		}		if (startsWithNode9(this.stack)) {
			this.stack = [new Node47(), ...this.stack]
			return this
		}		if (startsWithNode8(this.stack)) {
			this.stack = [new Node47(), ...this.stack]
			return this
		}		if (startsWithNode7Node8Node4Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.multi()
		}
		if (startsWithNode7Node8Node4Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.multi()
		}
		if (startsWithNode7Node8Node4Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node7(content), ...tail]
			return this.multi()
		}
		if (startsWithNode6Node4(this.stack)) {
			const content = new AssignmentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.multi()
		}
		if (startsWithNode5Node4(this.stack)) {
			const content = new AssignmentDivEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.multi()
		}
		if (startsWithNode3Node4(this.stack)) {
			const content = new AssignmentAndEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.multi()
		}
		if (startsWithNode1(this.stack)) {
			this.stack = [new Node47(), ...this.stack]
			return this
		}
	}
	multiEqual = (...a: any[]) => {
		if (startsWithNode52Node28Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode52Node28Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode52Node28Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode52Node28Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode52Node28Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode52Node28Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode52Node28Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode52Node28Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode52Node28Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode52Node28Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode50Node27Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode50Node27Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode50Node27Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode50Node27Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode50Node27Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode50Node27Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode50Node25Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode50Node27Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode50Node27Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode50Node27Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode49Node21Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode49Node21Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode49Node21Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode49Node21Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode49Node21Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode49Node21Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode49Node21Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode49Node21Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode49Node21Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode49Node21Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode45Node26Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode45Node26Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode45Node26Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode45Node26Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode45Node26Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode45Node26Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode45Node24Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode45Node26Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode45Node26Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode45Node26Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode42Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode42Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode42Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode42Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode42Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode42Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode42Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode42Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode42Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode42Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode41Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode41Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode41Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode41Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode41Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode41Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode41Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode41Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode41Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode41Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode40Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode40Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode40Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode40Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode40Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode40Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode40Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode40Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode40Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode40Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode39Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode39Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode39Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode39Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode39Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode39Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode39Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode39Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode39Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode39Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode38Node35Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode38Node35Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode38Node35Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode38Node35Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode38Node35Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode38Node35Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode38Node35Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode38Node35Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode38Node35Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode38Node35Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode37Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode37Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode37Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode37Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode37Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode37Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode37Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode37Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode37Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode37Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode36Node34Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode36Node34Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode36Node34Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode36Node34Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode36Node34Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode36Node34Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode36Node34Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode36Node34Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode36Node34Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode36Node34Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode33Node35(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode33Node34(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode33Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode33Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode33Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode33Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode33Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode33Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode33Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode33Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode33Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode33Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode32Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode32Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode31Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode31Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode31Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode31Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode31Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode31Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode31Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode31Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode31Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode31Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode30Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode30Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode29Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode29Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode29Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode29Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode29Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode29Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode29Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode29Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode25Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode25Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode25Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode25Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode25Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode25Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode25Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode25Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode25Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode25Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode24Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode24Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode24Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode24Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode24Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode24Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode24Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode24Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode24Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode24Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode23Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode23Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode23Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode23Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode23Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode23Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode23Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode23Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode23Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode23Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode20Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new CastExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node49(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node37(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode10Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node52(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode10Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node50(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode10Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node45(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode10Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node50(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode10Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node45(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode10Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node20(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode10Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode10Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode10Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode10Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node2(content), ...tail]
			return this.multiEqual()
		}
		if (startsWithNode4(this.stack)) {
			this.stack = [new Node14(), ...this.stack]
			return this
		}
	}
	not = (...a: any[]) => {
		if (startsWithNode51Node28(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode51Node27(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode51Node26(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode51Node25(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode51Node24(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode51Node21(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode51Node10(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode51Node9(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode51Node8(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode51Node1(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode48Node28(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode48Node27(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode48Node26(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode48Node25(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode48Node24(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode48Node21(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode48Node10(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode48Node9(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode48Node8(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode48Node1(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode47Node28(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode47Node27(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode47Node26(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode47Node25(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode47Node24(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode47Node21(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode47Node10(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode47Node9(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode47Node8(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode47Node1(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode46Node28(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode46Node27(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode46Node26(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode46Node25(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode46Node24(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode46Node21(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode46Node10(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode46Node9(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode46Node8(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode46Node1(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode44Node28(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode44Node27(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode44Node26(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode44Node25(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode44Node24(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode44Node21(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode44Node10(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode44Node9(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode44Node8(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode44Node1(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode43Node28(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode43Node27(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode43Node26(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode43Node25(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode43Node24(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode43Node21(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode43Node10(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode43Node9(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode43Node8(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode43Node1(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.not()
		}
		if (startsWithNode42Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.not()
		}
		if (startsWithNode42Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.not()
		}
		if (startsWithNode42Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.not()
		}
		if (startsWithNode42Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.not()
		}
		if (startsWithNode42Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.not()
		}
		if (startsWithNode42Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.not()
		}
		if (startsWithNode42Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.not()
		}
		if (startsWithNode42Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.not()
		}
		if (startsWithNode42Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.not()
		}
		if (startsWithNode42Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.not()
		}
		if (startsWithNode41Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.not()
		}
		if (startsWithNode41Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.not()
		}
		if (startsWithNode41Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.not()
		}
		if (startsWithNode41Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.not()
		}
		if (startsWithNode41Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.not()
		}
		if (startsWithNode41Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.not()
		}
		if (startsWithNode41Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.not()
		}
		if (startsWithNode41Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.not()
		}
		if (startsWithNode41Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.not()
		}
		if (startsWithNode41Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.not()
		}
		if (startsWithNode40Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode40Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode40Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode40Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode40Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode40Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode40Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode40Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode40Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode40Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode39Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode39Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode39Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode39Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode39Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode39Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode39Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode39Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode39Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode39Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode38Node35Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode38Node35Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode38Node35Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode38Node35Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode38Node35Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode38Node35Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode38Node35Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode38Node35Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode38Node35Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode38Node35Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode37Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode37Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode37Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode37Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode37Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode37Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode37Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode37Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode37Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode37Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode36Node34Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode36Node34Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode36Node34Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode36Node34Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode36Node34Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode36Node34Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode36Node34Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode36Node34Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode36Node34Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode36Node34Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.not()
		}
		if (startsWithNode33Node35(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.not()
		}
		if (startsWithNode33Node34(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.not()
		}
		if (startsWithNode33Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.not()
		}
		if (startsWithNode33Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.not()
		}
		if (startsWithNode33Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.not()
		}
		if (startsWithNode33Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.not()
		}
		if (startsWithNode33Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.not()
		}
		if (startsWithNode33Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.not()
		}
		if (startsWithNode33Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.not()
		}
		if (startsWithNode33Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.not()
		}
		if (startsWithNode33Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.not()
		}
		if (startsWithNode33Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.not()
		}
		if (startsWithNode32Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.not()
		}
		if (startsWithNode32Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.not()
		}
		if (startsWithNode31Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.not()
		}
		if (startsWithNode31Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.not()
		}
		if (startsWithNode31Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.not()
		}
		if (startsWithNode31Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.not()
		}
		if (startsWithNode31Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.not()
		}
		if (startsWithNode31Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.not()
		}
		if (startsWithNode31Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.not()
		}
		if (startsWithNode31Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.not()
		}
		if (startsWithNode31Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.not()
		}
		if (startsWithNode31Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.not()
		}
		if (startsWithNode30Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.not()
		}
		if (startsWithNode30Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.not()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.not()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.not()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.not()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.not()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.not()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.not()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.not()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.not()
		}
		if (startsWithNode29Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.not()
		}
		if (startsWithNode29Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.not()
		}
		if (startsWithNode29Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.not()
		}
		if (startsWithNode29Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.not()
		}
		if (startsWithNode29Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.not()
		}
		if (startsWithNode29Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.not()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.not()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.not()
		}
		if (startsWithNode29Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.not()
		}
		if (startsWithNode29Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.not()
		}
		if (startsWithNode28(this.stack)) {
			this.stack = [new Node48(), ...this.stack]
			return this
		}		if (startsWithNode27(this.stack)) {
			this.stack = [new Node48(), ...this.stack]
			return this
		}		if (startsWithNode26(this.stack)) {
			this.stack = [new Node48(), ...this.stack]
			return this
		}		if (startsWithNode25(this.stack)) {
			this.stack = [new Node48(), ...this.stack]
			return this
		}		if (startsWithNode24(this.stack)) {
			this.stack = [new Node48(), ...this.stack]
			return this
		}		if (startsWithNode23Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.not()
		}
		if (startsWithNode23Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.not()
		}
		if (startsWithNode23Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.not()
		}
		if (startsWithNode23Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.not()
		}
		if (startsWithNode23Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.not()
		}
		if (startsWithNode23Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.not()
		}
		if (startsWithNode23Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.not()
		}
		if (startsWithNode23Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.not()
		}
		if (startsWithNode23Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.not()
		}
		if (startsWithNode23Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.not()
		}
		if (startsWithNode22Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConditionalAssignmentExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node9(content), ...tail]
			return this.not()
		}
		if (startsWithNode22Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConditionalAssignmentExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node9(content), ...tail]
			return this.not()
		}
		if (startsWithNode22Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConditionalAssignmentExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node7(content), ...tail]
			return this.not()
		}
		if (startsWithNode21(this.stack)) {
			this.stack = [new Node48(), ...this.stack]
			return this
		}		if (startsWithNode19Node4(this.stack)) {
			const content = new AssignmentXorEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.not()
		}
		if (startsWithNode18Node4(this.stack)) {
			const content = new AssignmentRightShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.not()
		}
		if (startsWithNode17Node4(this.stack)) {
			const content = new AssignmentPlusEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.not()
		}
		if (startsWithNode16Node4(this.stack)) {
			const content = new AssignmentPercentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.not()
		}
		if (startsWithNode15Node4(this.stack)) {
			const content = new AssignmentOrEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.not()
		}
		if (startsWithNode14Node4(this.stack)) {
			const content = new AssignmentMultiEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.not()
		}
		if (startsWithNode13Node4(this.stack)) {
			const content = new AssignmentMinuxEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.not()
		}
		if (startsWithNode12Node4(this.stack)) {
			const content = new AssignmentLeftShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.not()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node37(content), ...tail]
			return this.not()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.not()
		}
		if (startsWithNode10(this.stack)) {
			this.stack = [new Node48(), ...this.stack]
			return this
		}		if (startsWithNode9(this.stack)) {
			this.stack = [new Node48(), ...this.stack]
			return this
		}		if (startsWithNode8(this.stack)) {
			this.stack = [new Node48(), ...this.stack]
			return this
		}		if (startsWithNode7Node8Node4Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.not()
		}
		if (startsWithNode7Node8Node4Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.not()
		}
		if (startsWithNode7Node8Node4Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node7(content), ...tail]
			return this.not()
		}
		if (startsWithNode6Node4(this.stack)) {
			const content = new AssignmentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.not()
		}
		if (startsWithNode5Node4(this.stack)) {
			const content = new AssignmentDivEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.not()
		}
		if (startsWithNode3Node4(this.stack)) {
			const content = new AssignmentAndEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.not()
		}
		if (startsWithNode1(this.stack)) {
			this.stack = [new Node48(), ...this.stack]
			return this
		}
	}
	orEqual = (...a: any[]) => {
		if (startsWithNode52Node28Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode52Node28Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode52Node28Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode52Node28Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode52Node28Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode52Node28Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode52Node28Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode52Node28Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode52Node28Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode52Node28Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode50Node27Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode50Node27Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode50Node27Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode50Node27Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode50Node27Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode50Node27Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode50Node25Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode50Node27Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode50Node27Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode50Node27Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode49Node21Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode49Node21Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode49Node21Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode49Node21Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode49Node21Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode49Node21Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode49Node21Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode49Node21Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode49Node21Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode49Node21Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode45Node26Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode45Node26Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode45Node26Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode45Node26Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode45Node26Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode45Node26Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode45Node24Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode45Node26Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode45Node26Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode45Node26Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode42Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode42Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode42Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode42Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode42Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode42Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode42Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode42Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode42Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode42Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode41Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode41Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode41Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode41Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode41Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode41Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode41Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode41Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode41Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode41Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode40Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode40Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode40Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode40Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode40Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode40Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode40Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode40Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode40Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode40Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode39Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode39Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode39Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode39Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode39Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode39Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode39Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode39Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode39Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode39Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode38Node35Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode38Node35Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode38Node35Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode38Node35Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode38Node35Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode38Node35Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode38Node35Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode38Node35Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode38Node35Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode38Node35Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode37Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode37Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode37Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode37Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode37Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode37Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode37Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode37Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode37Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode37Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode36Node34Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode36Node34Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode36Node34Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode36Node34Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode36Node34Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode36Node34Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode36Node34Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode36Node34Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode36Node34Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode36Node34Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode33Node35(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode33Node34(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode33Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode33Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode33Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode33Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode33Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode33Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode33Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode33Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode33Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode33Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode32Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode32Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode31Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode31Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode31Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode31Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode31Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode31Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode31Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode31Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode31Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode31Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode30Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode30Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode29Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode29Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode29Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode29Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode29Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode29Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode29Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode29Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode25Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode25Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode25Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode25Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode25Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode25Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode25Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode25Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode25Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode25Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode24Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode24Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode24Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode24Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode24Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode24Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode24Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode24Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode24Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode24Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode23Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode23Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode23Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode23Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode23Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode23Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode23Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode23Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode23Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode23Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode20Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new CastExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node49(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node37(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode10Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node52(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode10Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node50(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode10Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node45(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode10Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node50(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode10Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node45(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode10Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node20(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode10Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode10Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode10Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode10Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node2(content), ...tail]
			return this.orEqual()
		}
		if (startsWithNode4(this.stack)) {
			this.stack = [new Node15(), ...this.stack]
			return this
		}
	}
	percentEqual = (...a: any[]) => {
		if (startsWithNode52Node28Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode52Node28Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode52Node28Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode52Node28Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode52Node28Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode52Node28Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode52Node28Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode52Node28Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode52Node28Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode52Node28Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode50Node27Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode50Node27Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode50Node27Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode50Node27Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode50Node27Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode50Node27Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode50Node25Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode50Node27Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode50Node27Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode50Node27Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode49Node21Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode49Node21Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode49Node21Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode49Node21Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode49Node21Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode49Node21Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode49Node21Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode49Node21Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode49Node21Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode49Node21Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode45Node26Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode45Node26Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode45Node26Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode45Node26Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode45Node26Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode45Node26Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode45Node24Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode45Node26Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode45Node26Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode45Node26Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode42Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode42Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode42Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode42Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode42Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode42Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode42Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode42Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode42Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode42Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode41Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode41Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode41Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode41Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode41Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode41Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode41Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode41Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode41Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode41Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode40Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode40Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode40Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode40Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode40Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode40Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode40Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode40Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode40Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode40Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode39Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode39Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode39Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode39Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode39Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode39Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode39Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode39Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode39Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode39Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode38Node35Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode38Node35Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode38Node35Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode38Node35Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode38Node35Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode38Node35Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode38Node35Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode38Node35Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode38Node35Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode38Node35Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode37Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode37Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode37Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode37Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode37Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode37Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode37Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode37Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode37Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode37Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode36Node34Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode36Node34Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode36Node34Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode36Node34Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode36Node34Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode36Node34Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode36Node34Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode36Node34Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode36Node34Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode36Node34Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode33Node35(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode33Node34(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode33Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode33Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode33Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode33Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode33Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode33Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode33Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode33Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode33Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode33Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode32Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode32Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode31Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode31Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode31Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode31Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode31Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode31Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode31Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode31Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode31Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode31Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode30Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode30Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode29Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode29Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode29Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode29Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode29Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode29Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode29Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode29Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode25Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode25Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode25Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode25Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode25Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode25Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode25Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode25Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode25Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode25Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode24Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode24Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode24Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode24Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode24Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode24Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode24Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode24Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode24Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode24Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode23Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode23Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode23Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode23Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode23Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode23Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode23Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode23Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode23Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode23Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode20Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new CastExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node49(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node37(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode10Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node52(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode10Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node50(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode10Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node45(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode10Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node50(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode10Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node45(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode10Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node20(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode10Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode10Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode10Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode10Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node2(content), ...tail]
			return this.percentEqual()
		}
		if (startsWithNode4(this.stack)) {
			this.stack = [new Node16(), ...this.stack]
			return this
		}
	}
	plus = (...a: any[]) => {
		if (startsWithNode51Node28(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode51Node27(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode51Node26(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode51Node25(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode51Node24(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode51Node21(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode51Node10(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode51Node9(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode51Node8(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode51Node1(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode48Node28(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode48Node27(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode48Node26(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode48Node25(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode48Node24(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode48Node21(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode48Node10(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode48Node9(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode48Node8(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode48Node1(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode47Node28(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode47Node27(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode47Node26(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode47Node25(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode47Node24(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode47Node21(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode47Node10(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode47Node9(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode47Node8(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode47Node1(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode46Node28(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode46Node27(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode46Node26(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode46Node25(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode46Node24(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode46Node21(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode46Node10(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode46Node9(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode46Node8(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode46Node1(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode44Node28(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode44Node27(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode44Node26(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode44Node25(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode44Node24(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode44Node21(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode44Node10(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode44Node9(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode44Node8(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode44Node1(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode43Node28(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode43Node27(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode43Node26(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode43Node25(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode43Node24(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode43Node21(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode43Node10(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode43Node9(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode43Node8(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode43Node1(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plus()
		}
		if (startsWithNode42Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plus()
		}
		if (startsWithNode42Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plus()
		}
		if (startsWithNode42Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plus()
		}
		if (startsWithNode42Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plus()
		}
		if (startsWithNode42Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plus()
		}
		if (startsWithNode42Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plus()
		}
		if (startsWithNode42Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plus()
		}
		if (startsWithNode42Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plus()
		}
		if (startsWithNode42Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plus()
		}
		if (startsWithNode42Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plus()
		}
		if (startsWithNode41Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plus()
		}
		if (startsWithNode41Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plus()
		}
		if (startsWithNode41Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plus()
		}
		if (startsWithNode41Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plus()
		}
		if (startsWithNode41Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plus()
		}
		if (startsWithNode41Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plus()
		}
		if (startsWithNode41Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plus()
		}
		if (startsWithNode41Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plus()
		}
		if (startsWithNode41Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plus()
		}
		if (startsWithNode41Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plus()
		}
		if (startsWithNode40Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode40Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode40Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode40Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode40Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode40Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode40Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode40Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode40Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode40Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode39Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode39Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode39Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode39Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode39Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode39Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode39Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode39Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode39Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode39Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode38Node35Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode38Node35Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode38Node35Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode38Node35Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode38Node35Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode38Node35Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode38Node35Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode38Node35Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode38Node35Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode38Node35Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode37Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode37Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode37Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode37Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode37Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode37Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode37Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode37Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode37Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode37Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode36Node34Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode36Node34Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode36Node34Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode36Node34Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode36Node34Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode36Node34Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode36Node34Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode36Node34Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode36Node34Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode36Node34Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plus()
		}
		if (startsWithNode33Node35(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.plus()
		}
		if (startsWithNode33Node34(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plus()
		}
		if (startsWithNode33Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.plus()
		}
		if (startsWithNode33Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.plus()
		}
		if (startsWithNode33Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.plus()
		}
		if (startsWithNode33Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.plus()
		}
		if (startsWithNode33Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.plus()
		}
		if (startsWithNode33Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.plus()
		}
		if (startsWithNode33Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.plus()
		}
		if (startsWithNode33Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.plus()
		}
		if (startsWithNode33Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.plus()
		}
		if (startsWithNode33Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.plus()
		}
		if (startsWithNode32Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plus()
		}
		if (startsWithNode32Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.plus()
		}
		if (startsWithNode31Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plus()
		}
		if (startsWithNode31Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plus()
		}
		if (startsWithNode31Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plus()
		}
		if (startsWithNode31Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plus()
		}
		if (startsWithNode31Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plus()
		}
		if (startsWithNode31Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plus()
		}
		if (startsWithNode31Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plus()
		}
		if (startsWithNode31Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plus()
		}
		if (startsWithNode31Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plus()
		}
		if (startsWithNode31Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plus()
		}
		if (startsWithNode30Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plus()
		}
		if (startsWithNode30Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plus()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plus()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plus()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plus()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plus()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plus()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plus()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plus()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plus()
		}
		if (startsWithNode29Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plus()
		}
		if (startsWithNode29Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plus()
		}
		if (startsWithNode29Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plus()
		}
		if (startsWithNode29Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plus()
		}
		if (startsWithNode29Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plus()
		}
		if (startsWithNode29Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plus()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plus()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plus()
		}
		if (startsWithNode29Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plus()
		}
		if (startsWithNode29Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plus()
		}
		if (startsWithNode28(this.stack)) {
			this.stack = [new Node51(), ...this.stack]
			return this
		}		if (startsWithNode27(this.stack)) {
			this.stack = [new Node51(), ...this.stack]
			return this
		}		if (startsWithNode26(this.stack)) {
			this.stack = [new Node51(), ...this.stack]
			return this
		}		if (startsWithNode25(this.stack)) {
			this.stack = [new Node51(), ...this.stack]
			return this
		}		if (startsWithNode24(this.stack)) {
			this.stack = [new Node51(), ...this.stack]
			return this
		}		if (startsWithNode23Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plus()
		}
		if (startsWithNode23Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plus()
		}
		if (startsWithNode23Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plus()
		}
		if (startsWithNode23Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plus()
		}
		if (startsWithNode23Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plus()
		}
		if (startsWithNode23Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plus()
		}
		if (startsWithNode23Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plus()
		}
		if (startsWithNode23Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plus()
		}
		if (startsWithNode23Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plus()
		}
		if (startsWithNode23Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plus()
		}
		if (startsWithNode22Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConditionalAssignmentExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node9(content), ...tail]
			return this.plus()
		}
		if (startsWithNode22Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConditionalAssignmentExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node9(content), ...tail]
			return this.plus()
		}
		if (startsWithNode22Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConditionalAssignmentExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node7(content), ...tail]
			return this.plus()
		}
		if (startsWithNode21(this.stack)) {
			this.stack = [new Node51(), ...this.stack]
			return this
		}		if (startsWithNode19Node4(this.stack)) {
			const content = new AssignmentXorEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plus()
		}
		if (startsWithNode18Node4(this.stack)) {
			const content = new AssignmentRightShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plus()
		}
		if (startsWithNode17Node4(this.stack)) {
			const content = new AssignmentPlusEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plus()
		}
		if (startsWithNode16Node4(this.stack)) {
			const content = new AssignmentPercentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plus()
		}
		if (startsWithNode15Node4(this.stack)) {
			const content = new AssignmentOrEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plus()
		}
		if (startsWithNode14Node4(this.stack)) {
			const content = new AssignmentMultiEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plus()
		}
		if (startsWithNode13Node4(this.stack)) {
			const content = new AssignmentMinuxEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plus()
		}
		if (startsWithNode12Node4(this.stack)) {
			const content = new AssignmentLeftShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plus()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node37(content), ...tail]
			return this.plus()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.plus()
		}
		if (startsWithNode10(this.stack)) {
			this.stack = [new Node51(), ...this.stack]
			return this
		}		if (startsWithNode9(this.stack)) {
			this.stack = [new Node51(), ...this.stack]
			return this
		}		if (startsWithNode8(this.stack)) {
			this.stack = [new Node51(), ...this.stack]
			return this
		}		if (startsWithNode7Node8Node4Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.plus()
		}
		if (startsWithNode7Node8Node4Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.plus()
		}
		if (startsWithNode7Node8Node4Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node7(content), ...tail]
			return this.plus()
		}
		if (startsWithNode6Node4(this.stack)) {
			const content = new AssignmentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plus()
		}
		if (startsWithNode5Node4(this.stack)) {
			const content = new AssignmentDivEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plus()
		}
		if (startsWithNode3Node4(this.stack)) {
			const content = new AssignmentAndEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plus()
		}
		if (startsWithNode1(this.stack)) {
			this.stack = [new Node51(), ...this.stack]
			return this
		}
	}
	plusEqual = (...a: any[]) => {
		if (startsWithNode52Node28Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode52Node28Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode52Node28Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode52Node28Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode52Node28Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode52Node28Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode52Node28Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode52Node28Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode52Node28Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode52Node28Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode50Node27Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode50Node27Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode50Node27Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode50Node27Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode50Node27Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode50Node27Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode50Node25Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode50Node27Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode50Node27Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode50Node27Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode49Node21Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode49Node21Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode49Node21Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode49Node21Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode49Node21Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode49Node21Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode49Node21Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode49Node21Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode49Node21Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode49Node21Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode45Node26Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode45Node26Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode45Node26Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode45Node26Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode45Node26Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode45Node26Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode45Node24Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode45Node26Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode45Node26Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode45Node26Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode42Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode42Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode42Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode42Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode42Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode42Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode42Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode42Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode42Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode42Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode41Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode41Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode41Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode41Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode41Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode41Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode41Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode41Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode41Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode41Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode40Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode40Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode40Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode40Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode40Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode40Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode40Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode40Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode40Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode40Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode39Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode39Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode39Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode39Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode39Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode39Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode39Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode39Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode39Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode39Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode38Node35Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode38Node35Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode38Node35Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode38Node35Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode38Node35Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode38Node35Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode38Node35Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode38Node35Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode38Node35Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode38Node35Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode37Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode37Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode37Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode37Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode37Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode37Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode37Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode37Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode37Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode37Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode36Node34Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode36Node34Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode36Node34Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode36Node34Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode36Node34Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode36Node34Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode36Node34Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode36Node34Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode36Node34Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode36Node34Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode33Node35(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode33Node34(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode33Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode33Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode33Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode33Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode33Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode33Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode33Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode33Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode33Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode33Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode32Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode32Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode31Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode31Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode31Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode31Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode31Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode31Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode31Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode31Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode31Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode31Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode30Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode30Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode29Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode29Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode29Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode29Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode29Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode29Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode29Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode29Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode25Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode25Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode25Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode25Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode25Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode25Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode25Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode25Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode25Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode25Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode24Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode24Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode24Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode24Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode24Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode24Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode24Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode24Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode24Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode24Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode23Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode23Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode23Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode23Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode23Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode23Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode23Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode23Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode23Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode23Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode20Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new CastExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node49(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node37(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode10Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node52(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode10Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node50(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode10Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node45(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode10Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node50(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode10Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node45(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode10Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node20(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode10Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode10Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode10Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode10Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node2(content), ...tail]
			return this.plusEqual()
		}
		if (startsWithNode4(this.stack)) {
			this.stack = [new Node17(), ...this.stack]
			return this
		}
	}
	plusPlus = (...a: any[]) => {
		if (startsWithNode51Node28(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode51Node27(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode51Node26(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode51Node25(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode51Node24(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode51Node21(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode51Node10(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode51Node9(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode51Node8(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode51Node1(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode48Node28(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode48Node27(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode48Node26(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode48Node25(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode48Node24(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode48Node21(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode48Node10(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode48Node9(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode48Node8(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode48Node1(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode47Node28(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode47Node27(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode47Node26(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode47Node25(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode47Node24(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode47Node21(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode47Node10(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode47Node9(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode47Node8(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode47Node1(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode46Node28(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode46Node27(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode46Node26(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode46Node25(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode46Node24(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode46Node21(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode46Node10(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode46Node9(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode46Node8(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode46Node1(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode44Node28(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode44Node27(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode44Node26(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode44Node25(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode44Node24(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode44Node21(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode44Node10(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode44Node9(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode44Node8(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode44Node1(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode43Node28(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode43Node27(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode43Node26(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode43Node25(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode43Node24(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode43Node21(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode43Node10(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode43Node9(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode43Node8(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode43Node1(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode42Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode42Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode42Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode42Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode42Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode42Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode42Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode42Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode42Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode42Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode41Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode41Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode41Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode41Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode41Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode41Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode41Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode41Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode41Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode41Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode40Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode40Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode40Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode40Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode40Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode40Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode40Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode40Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode40Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode40Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode39Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode39Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode39Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode39Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode39Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode39Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode39Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode39Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode39Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode39Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode38Node35Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode38Node35Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode38Node35Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode38Node35Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode38Node35Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode38Node35Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode38Node35Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode38Node35Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode38Node35Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode38Node35Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode37Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode37Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode37Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode37Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode37Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode37Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode37Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode37Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode37Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode37Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode36Node34Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode36Node34Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode36Node34Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode36Node34Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode36Node34Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode36Node34Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode36Node34Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode36Node34Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode36Node34Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode36Node34Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode33Node35(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode33Node34(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode33Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode33Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode33Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode33Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode33Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode33Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode33Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode33Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode33Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode33Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode32Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode32Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode31Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode31Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode31Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode31Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode31Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode31Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode31Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode31Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode31Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode31Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode30Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode30Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode29Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode29Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode29Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode29Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode29Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode29Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode29Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode29Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode28(this.stack)) {
			this.stack = [new Node27(), ...this.stack]
			return this
		}		if (startsWithNode27(this.stack)) {
			this.stack = [new Node27(), ...this.stack]
			return this
		}		if (startsWithNode26(this.stack)) {
			this.stack = [new Node27(), ...this.stack]
			return this
		}		if (startsWithNode25(this.stack)) {
			this.stack = [new Node27(), ...this.stack]
			return this
		}		if (startsWithNode24(this.stack)) {
			this.stack = [new Node27(), ...this.stack]
			return this
		}		if (startsWithNode23Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode23Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode23Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode23Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode23Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode23Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode23Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode23Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode23Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode23Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode22Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConditionalAssignmentExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node9(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode22Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConditionalAssignmentExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node9(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode22Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConditionalAssignmentExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node7(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode21(this.stack)) {
			this.stack = [new Node27(), ...this.stack]
			return this
		}		if (startsWithNode19Node4(this.stack)) {
			const content = new AssignmentXorEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode18Node4(this.stack)) {
			const content = new AssignmentRightShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode17Node4(this.stack)) {
			const content = new AssignmentPlusEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode16Node4(this.stack)) {
			const content = new AssignmentPercentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode15Node4(this.stack)) {
			const content = new AssignmentOrEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode14Node4(this.stack)) {
			const content = new AssignmentMultiEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode13Node4(this.stack)) {
			const content = new AssignmentMinuxEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode12Node4(this.stack)) {
			const content = new AssignmentLeftShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node37(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode10(this.stack)) {
			this.stack = [new Node25(), ...this.stack]
			return this
		}		if (startsWithNode9(this.stack)) {
			this.stack = [new Node27(), ...this.stack]
			return this
		}		if (startsWithNode8(this.stack)) {
			this.stack = [new Node27(), ...this.stack]
			return this
		}		if (startsWithNode7Node8Node4Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode7Node8Node4Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode7Node8Node4Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node7(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode6Node4(this.stack)) {
			const content = new AssignmentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode5Node4(this.stack)) {
			const content = new AssignmentDivEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode3Node4(this.stack)) {
			const content = new AssignmentAndEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.plusPlus()
		}
		if (startsWithNode1(this.stack)) {
			this.stack = [new Node27(), ...this.stack]
			return this
		}
	}
	rifhtShiftEqual = (...a: any[]) => {
		if (startsWithNode52Node28Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode52Node28Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode52Node28Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode52Node28Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode52Node28Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode52Node28Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode52Node28Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode52Node28Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode52Node28Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode52Node28Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode50Node27Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode50Node27Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode50Node27Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode50Node27Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode50Node27Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode50Node27Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode50Node25Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode50Node27Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode50Node27Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode50Node27Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode49Node21Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode49Node21Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode49Node21Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode49Node21Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode49Node21Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode49Node21Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode49Node21Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode49Node21Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode49Node21Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode49Node21Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode45Node26Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode45Node26Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode45Node26Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode45Node26Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode45Node26Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode45Node26Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode45Node24Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode45Node26Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode45Node26Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode45Node26Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode42Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode42Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode42Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode42Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode42Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode42Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode42Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode42Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode42Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode42Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode41Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode41Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode41Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode41Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode41Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode41Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode41Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode41Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode41Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode41Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode40Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode40Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode40Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode40Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode40Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode40Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode40Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode40Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode40Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode40Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode39Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode39Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode39Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode39Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode39Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode39Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode39Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode39Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode39Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode39Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode38Node35Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode38Node35Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode38Node35Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode38Node35Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode38Node35Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode38Node35Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode38Node35Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode38Node35Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode38Node35Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode38Node35Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode37Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode37Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode37Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode37Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode37Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode37Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode37Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode37Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode37Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode37Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode36Node34Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode36Node34Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode36Node34Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode36Node34Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode36Node34Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode36Node34Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode36Node34Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode36Node34Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode36Node34Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode36Node34Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode33Node35(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode33Node34(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode33Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode33Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode33Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode33Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode33Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode33Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode33Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode33Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode33Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode33Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode32Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode32Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode31Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode31Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode31Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode31Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode31Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode31Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode31Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode31Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode31Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode31Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode30Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode30Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode29Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode29Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode29Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode29Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode29Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode29Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode29Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode29Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode25Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode25Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode25Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode25Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode25Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode25Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode25Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode25Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode25Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode25Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode24Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode24Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode24Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode24Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode24Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode24Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode24Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode24Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode24Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode24Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode23Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode23Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode23Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode23Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode23Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode23Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode23Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode23Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode23Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode23Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode20Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new CastExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node49(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node37(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode10Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node52(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode10Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node50(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode10Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node45(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode10Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node50(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode10Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node45(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode10Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node20(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode10Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode10Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode10Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode10Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node2(content), ...tail]
			return this.rifhtShiftEqual()
		}
		if (startsWithNode4(this.stack)) {
			this.stack = [new Node18(), ...this.stack]
			return this
		}
	}
	sizeof = (...a: any[]) => {
		if (startsWithNode51Node28(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode51Node27(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode51Node26(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode51Node25(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode51Node24(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode51Node21(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode51Node10(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode51Node9(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode51Node8(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode51Node1(this.stack)) {
			const content = new UnaryPlusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode48Node28(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode48Node27(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode48Node26(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode48Node25(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode48Node24(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode48Node21(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode48Node10(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode48Node9(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode48Node8(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode48Node1(this.stack)) {
			const content = new UnaryNotOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode47Node28(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode47Node27(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode47Node26(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode47Node25(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode47Node24(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode47Node21(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode47Node10(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode47Node9(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode47Node8(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode47Node1(this.stack)) {
			const content = new UnaryMultiOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode46Node28(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode46Node27(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode46Node26(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode46Node25(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode46Node24(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode46Node21(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode46Node10(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode46Node9(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode46Node8(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode46Node1(this.stack)) {
			const content = new UnaryMinusOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode44Node28(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode44Node27(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode44Node26(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode44Node25(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode44Node24(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode44Node21(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode44Node10(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode44Node9(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode44Node8(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode44Node1(this.stack)) {
			const content = new UnaryComplementOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode43Node28(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode43Node27(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode43Node26(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode43Node25(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode43Node24(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode43Node21(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode43Node10(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode43Node9(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode43Node8(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode43Node1(this.stack)) {
			const content = new UnaryAndOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node21(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode42Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode42Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode42Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode42Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode42Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode42Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode42Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode42Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode42Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode42Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode41Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode41Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode41Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode41Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode41Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode41Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode41Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode41Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode41Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode41Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode40Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode40Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode40Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode40Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode40Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode40Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode40Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode40Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode40Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode40Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode39Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode39Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode39Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode39Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode39Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode39Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode39Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode39Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode39Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode39Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode38Node35Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode38Node35Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode38Node35Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode38Node35Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode38Node35Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode38Node35Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode38Node35Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode38Node35Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode38Node35Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode38Node35Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode37Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode37Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode37Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode37Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode37Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode37Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode37Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode37Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode37Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode37Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode36Node34Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode36Node34Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode36Node34Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode36Node34Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode36Node34Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode36Node34Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode36Node34Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode36Node34Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode36Node34Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode36Node34Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode33Node35(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode33Node34(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode33Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode33Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode33Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode33Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode33Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode33Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode33Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode33Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode33Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode33Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode32Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode32Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode31Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode31Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode31Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode31Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode31Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode31Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode31Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode31Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode31Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode31Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode30Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode30Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode29Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode29Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode29Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode29Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode29Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode29Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode29Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode29Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode28(this.stack)) {
			this.stack = [new Node28(), ...this.stack]
			return this
		}		if (startsWithNode27(this.stack)) {
			this.stack = [new Node28(), ...this.stack]
			return this
		}		if (startsWithNode26(this.stack)) {
			this.stack = [new Node28(), ...this.stack]
			return this
		}		if (startsWithNode25(this.stack)) {
			this.stack = [new Node28(), ...this.stack]
			return this
		}		if (startsWithNode24(this.stack)) {
			this.stack = [new Node28(), ...this.stack]
			return this
		}		if (startsWithNode23Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode23Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode23Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode23Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode23Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode23Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode23Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode23Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode23Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode23Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode22Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConditionalAssignmentExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node9(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode22Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConditionalAssignmentExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node9(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode22Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConditionalAssignmentExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node7(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode21(this.stack)) {
			this.stack = [new Node28(), ...this.stack]
			return this
		}		if (startsWithNode19Node4(this.stack)) {
			const content = new AssignmentXorEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode18Node4(this.stack)) {
			const content = new AssignmentRightShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode17Node4(this.stack)) {
			const content = new AssignmentPlusEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode16Node4(this.stack)) {
			const content = new AssignmentPercentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode15Node4(this.stack)) {
			const content = new AssignmentOrEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode14Node4(this.stack)) {
			const content = new AssignmentMultiEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode13Node4(this.stack)) {
			const content = new AssignmentMinuxEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode12Node4(this.stack)) {
			const content = new AssignmentLeftShiftOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node37(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode10(this.stack)) {
			this.stack = [new Node28(), ...this.stack]
			return this
		}		if (startsWithNode9(this.stack)) {
			this.stack = [new Node28(), ...this.stack]
			return this
		}		if (startsWithNode8(this.stack)) {
			this.stack = [new Node28(), ...this.stack]
			return this
		}		if (startsWithNode7Node8Node4Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode7Node8Node4Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node9(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode7Node8Node4Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[1].arg1
			const x3 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2, x3)
			const tail = this.stack.slice(3)
			this.stack = [new Node7(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode6Node4(this.stack)) {
			const content = new AssignmentEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode5Node4(this.stack)) {
			const content = new AssignmentDivEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode3Node4(this.stack)) {
			const content = new AssignmentAndEqualOperator()
			const tail = this.stack.slice(1)
			this.stack = [new Node8(content), ...tail]
			return this.sizeof()
		}
		if (startsWithNode1(this.stack)) {
			this.stack = [new Node28(), ...this.stack]
			return this
		}
	}
	xorEqual = (...a: any[]) => {
		if (startsWithNode52Node28Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode52Node28Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode52Node28Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode52Node28Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode52Node28Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode52Node28Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode52Node28Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode52Node28Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode52Node28Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode52Node28Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnarySizeofExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode50Node27Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode50Node27Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode50Node27Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode50Node27Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode50Node27Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode50Node27Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode50Node25Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode50Node27Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode50Node27Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode50Node27Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPlusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode49Node21Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode49Node21Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode49Node21Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode49Node21Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode49Node21Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode49Node21Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode49Node21Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode49Node21Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode49Node21Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode49Node21Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new UnaryOperatorCastExpression(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode45Node26Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node52(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode45Node26Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode45Node26Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode45Node26Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node50(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode45Node26Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node45(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode45Node26Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node20(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode45Node24Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode45Node26Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode45Node26Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node4(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode45Node26Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryMinusExpression(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node2(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode42Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode42Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode42Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode42Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode42Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode42Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode42Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode42Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode42Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode42Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryIdentifierExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode41Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode41Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode41Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode41Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode41Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode41Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode41Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode41Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode41Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode41Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PrimaryConstantExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node40(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode40Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode40Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode40Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode40Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode40Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode40Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode40Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode40Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode40Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode40Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new PostfixPrimaryExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode39Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode39Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode39Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode39Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode39Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode39Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode39Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode39Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode39Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode39Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode38Node35Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode38Node35Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode38Node35Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode38Node35Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode38Node35Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode38Node35Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode38Node35Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode38Node35Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode38Node35Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode38Node35Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixDotExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode37Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode37Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode37Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode37Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode37Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode37Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode37Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode37Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode37Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode37Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixAssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode36Node34Node10Node28(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode36Node34Node10Node27(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode36Node34Node10Node26(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode36Node34Node10Node25(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode36Node34Node10Node24(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode36Node34Node10Node21(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode36Node34Node10Node10(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode36Node34Node10Node9(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode36Node34Node10Node8(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode36Node34Node10Node1(this.stack)) {
			const x1 = this.stack[2].arg1
			const x2 = this.stack[0].arg1
			const content = new PostfixArrowExpressions(x1, x2)
			const tail = this.stack.slice(3)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode33Node35(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node38(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode33Node34(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node36(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode33Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode33Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode33Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode33Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode33Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode33Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode33Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode33Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode33Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode33Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new Identifier(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node42(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode32Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node37(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode32Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new EpsilonAssignmentExpressions(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node11(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode31Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode31Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode31Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode31Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode31Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode31Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode31Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode31Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode31Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode31Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantString(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode30Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode30Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode30Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode30Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode30Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode30Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode30Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode30Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode30Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode30Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantInteger(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode29Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode29Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode29Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode29Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode29Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode29Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode29Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode29Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode29Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode29Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantFloat(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode25Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode25Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode25Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode25Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode25Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode25Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode25Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode25Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode25Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode25Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixPlusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode24Node10Node28(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode24Node10Node27(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode24Node10Node26(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode24Node10Node25(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode24Node10Node24(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode24Node10Node21(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode24Node10Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode24Node10Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode24Node10Node8(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode24Node10Node1(this.stack)) {
			const x1 = this.stack[1].arg1
			const content = new PostfixMinusExpressions(x1)
			const tail = this.stack.slice(2)
			this.stack = [new Node10(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode23Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode23Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode23Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode23Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode23Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode23Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode23Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode23Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode23Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode23Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new ConstantEnum(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node41(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode20Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new CastExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node49(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode11Node9Node10(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node37(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode11Node9Node9(this.stack)) {
			const x1 = this.stack[1].arg1
			const x2 = this.stack[0].arg1
			const content = new AssignmentExpressions(x1, x2)
			const tail = this.stack.slice(2)
			this.stack = [new Node11(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode10Node28(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node52(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode10Node27(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node50(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode10Node26(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node45(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode10Node25(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node50(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode10Node24(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node45(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode10Node21(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node20(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode10Node10(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode10Node9(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode10Node8(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node4(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode10Node1(this.stack)) {
			const x1 = this.stack[0].arg1
			const content = new UnaryPostfixExpression(x1)
			const tail = this.stack.slice(1)
			this.stack = [new Node2(content), ...tail]
			return this.xorEqual()
		}
		if (startsWithNode4(this.stack)) {
			this.stack = [new Node19(), ...this.stack]
			return this
		}
	}
}

///////////////////////////////////////////////////////////////////////////////

export function begin(): Fluent<[Node1]> {
	return new FluentImpl() as any
}

///////////////////////////////////////////////////////////////////////////////

