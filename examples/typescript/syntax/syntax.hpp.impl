
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template< typename Head, typename... Tail >
State< Head, Tail... >::State( Head const& head_, std::shared_ptr< State< Tail... > > const& tail_ )
  :head( head_ ), tail( tail_ ) {}

template< typename Head, typename... Tail >
std::shared_ptr< State< Head, Tail... > > State< Head, Tail... >::make( Head const& head, std::shared_ptr< State< Tail... > > const& tail ) {
  std::shared_ptr< State< Head, Tail... > > result( new State< Head, Tail... >( head, tail ) );
  result->this_ = result;
  return result;
}


template< typename Head, typename... Tail >
auto State< Head, Tail... >::end() {
  return end_transition( this_.lock() );
}

template< typename Head, typename... Tail >
auto State< Head, Tail... >::rule( std::string const& arg1 ) {
  return rule_transition( this_.lock(), arg1 );
}

template< typename Head, typename... Tail >
auto State< Head, Tail... >::derive( std::string const& arg1 ) {
  return derive_transition( this_.lock(), arg1 );
}

template< typename Head, typename... Tail >
auto State< Head, Tail... >::to( std::string const& arg1 ) {
  return to_transition( this_.lock(), arg1 );
}

template< typename Head, typename... Tail >
auto State< Head, Tail... >::toEpsilon() {
  return toEpsilon_transition( this_.lock() );
}

template< typename Head, typename... Tail >
auto State< Head, Tail... >::andThen( std::string const& arg1 ) {
  return andThen_transition( this_.lock(), arg1 );
}

template< typename Head, typename... Tail >
auto State< Head, Tail... >::syntax( std::string const& arg1 ) {
  return syntax_transition( this_.lock(), arg1 );
}

template< typename Head, typename... Tail >
auto State< Head, Tail... >::startsWith( std::string const& arg1 ) {
  return startsWith_transition( this_.lock(), arg1 );
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// transitions

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node2, Tail... > > const& src ) {
  return src->head.arg1;
}

template< typename... Tail >
auto syntax_transition( std::shared_ptr< State< Node1, Tail... > > const& src, std::string const& arg1 ) {
  return State< Node5, Node1, Tail... >::make( Node5( arg1 ), src );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node3, Node4, Node5, Node1, Tail... > > const& src ) {
  std::string const& x1 = src->tail->tail->head.arg1;
  std::string const& x2 = src->tail->head.arg1;
  std::shared_ptr< Rules > const& x3 = src->head.arg1;
  std::shared_ptr< Syntax > const& content = std::shared_ptr< Syntax >( new DefineSyntax( x1, x2, x3 ) );
  std::shared_ptr< State< Node1, Tail... > > const& tail = src->tail->tail->tail;
  return end_transition( State< Node2, Node1, Tail... >::make( Node2( content ), tail ) );
}

template< typename... Tail >
auto rule_transition( std::shared_ptr< State< Node4, Tail... > > const& src, std::string const& arg1 ) {
  return State< Node11, Node4, Tail... >::make( Node11( arg1 ), src );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node4, Tail... > > const& src ) {
  std::shared_ptr< Rules > const& content = std::shared_ptr< Rules >( new RulesNull(  ) );
  std::shared_ptr< State< Node4, Tail... > > const& tail = src;
  return end_transition( State< Node3, Node4, Tail... >::make( Node3( content ), tail ) );
}

template< typename... Tail >
auto startsWith_transition( std::shared_ptr< State< Node5, Tail... > > const& src, std::string const& arg1 ) {
  return State< Node4, Node5, Tail... >::make( Node4( arg1 ), src );
}

template< typename... Tail >
auto rule_transition( std::shared_ptr< State< Node6, Node7, Node8, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->head.arg1;
  std::shared_ptr< RuleTail > const& x2 = src->head.arg1;
  std::shared_ptr< RuleBody > const& content = std::shared_ptr< RuleBody >( new RuleBodyTo( x1, x2 ) );
  std::shared_ptr< State< Node8, Tail... > > const& tail = src->tail->tail;
  return rule_transition( State< Node10, Node8, Tail... >::make( Node10( content ), tail ), arg1 );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node6, Node7, Node8, Tail... > > const& src ) {
  std::string const& x1 = src->tail->head.arg1;
  std::shared_ptr< RuleTail > const& x2 = src->head.arg1;
  std::shared_ptr< RuleBody > const& content = std::shared_ptr< RuleBody >( new RuleBodyTo( x1, x2 ) );
  std::shared_ptr< State< Node8, Tail... > > const& tail = src->tail->tail;
  return end_transition( State< Node10, Node8, Tail... >::make( Node10( content ), tail ) );
}

template< typename... Tail >
auto andThen_transition( std::shared_ptr< State< Node7, Tail... > > const& src, std::string const& arg1 ) {
  return State< Node13, Node7, Tail... >::make( Node13( arg1 ), src );
}

template< typename... Tail >
auto rule_transition( std::shared_ptr< State< Node7, Tail... > > const& src, std::string const& arg1 ) {
  std::shared_ptr< RuleTail > const& content = std::shared_ptr< RuleTail >( new RuleTailEpsilon(  ) );
  std::shared_ptr< State< Node7, Tail... > > const& tail = src;
  return rule_transition( State< Node6, Node7, Tail... >::make( Node6( content ), tail ), arg1 );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node7, Tail... > > const& src ) {
  std::shared_ptr< RuleTail > const& content = std::shared_ptr< RuleTail >( new RuleTailEpsilon(  ) );
  std::shared_ptr< State< Node7, Tail... > > const& tail = src;
  return end_transition( State< Node6, Node7, Tail... >::make( Node6( content ), tail ) );
}

template< typename... Tail >
auto to_transition( std::shared_ptr< State< Node8, Tail... > > const& src, std::string const& arg1 ) {
  return State< Node7, Node8, Tail... >::make( Node7( arg1 ), src );
}

template< typename... Tail >
auto toEpsilon_transition( std::shared_ptr< State< Node8, Tail... > > const& src ) {
  return State< Node9, Node8, Tail... >::make( Node9(  ), src );
}

template< typename... Tail >
auto rule_transition( std::shared_ptr< State< Node9, Node8, Tail... > > const& src, std::string const& arg1 ) {
  std::shared_ptr< RuleBody > const& content = std::shared_ptr< RuleBody >( new RuleBodyToEpsilon(  ) );
  std::shared_ptr< State< Node8, Tail... > > const& tail = src->tail;
  return rule_transition( State< Node10, Node8, Tail... >::make( Node10( content ), tail ), arg1 );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node9, Node8, Tail... > > const& src ) {
  std::shared_ptr< RuleBody > const& content = std::shared_ptr< RuleBody >( new RuleBodyToEpsilon(  ) );
  std::shared_ptr< State< Node8, Tail... > > const& tail = src->tail;
  return end_transition( State< Node10, Node8, Tail... >::make( Node10( content ), tail ) );
}

template< typename... Tail >
auto rule_transition( std::shared_ptr< State< Node10, Node8, Node11, Node4, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->tail->head.arg1;
  std::string const& x2 = src->tail->head.arg1;
  std::shared_ptr< RuleBody > const& x3 = src->head.arg1;
  std::shared_ptr< Rule > const& content = std::shared_ptr< Rule >( new RuleDerive( x1, x2, x3 ) );
  std::shared_ptr< State< Node4, Tail... > > const& tail = src->tail->tail->tail;
  return rule_transition( State< Node12, Node4, Tail... >::make( Node12( content ), tail ), arg1 );
}

template< typename... Tail >
auto rule_transition( std::shared_ptr< State< Node10, Node8, Node11, Node12, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->tail->head.arg1;
  std::string const& x2 = src->tail->head.arg1;
  std::shared_ptr< RuleBody > const& x3 = src->head.arg1;
  std::shared_ptr< Rule > const& content = std::shared_ptr< Rule >( new RuleDerive( x1, x2, x3 ) );
  std::shared_ptr< State< Node12, Tail... > > const& tail = src->tail->tail->tail;
  return rule_transition( State< Node12, Node12, Tail... >::make( Node12( content ), tail ), arg1 );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node10, Node8, Node11, Node4, Tail... > > const& src ) {
  std::string const& x1 = src->tail->tail->head.arg1;
  std::string const& x2 = src->tail->head.arg1;
  std::shared_ptr< RuleBody > const& x3 = src->head.arg1;
  std::shared_ptr< Rule > const& content = std::shared_ptr< Rule >( new RuleDerive( x1, x2, x3 ) );
  std::shared_ptr< State< Node4, Tail... > > const& tail = src->tail->tail->tail;
  return end_transition( State< Node12, Node4, Tail... >::make( Node12( content ), tail ) );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node10, Node8, Node11, Node12, Tail... > > const& src ) {
  std::string const& x1 = src->tail->tail->head.arg1;
  std::string const& x2 = src->tail->head.arg1;
  std::shared_ptr< RuleBody > const& x3 = src->head.arg1;
  std::shared_ptr< Rule > const& content = std::shared_ptr< Rule >( new RuleDerive( x1, x2, x3 ) );
  std::shared_ptr< State< Node12, Tail... > > const& tail = src->tail->tail->tail;
  return end_transition( State< Node12, Node12, Tail... >::make( Node12( content ), tail ) );
}

template< typename... Tail >
auto derive_transition( std::shared_ptr< State< Node11, Tail... > > const& src, std::string const& arg1 ) {
  return State< Node8, Node11, Tail... >::make( Node8( arg1 ), src );
}

template< typename... Tail >
auto rule_transition( std::shared_ptr< State< Node12, Tail... > > const& src, std::string const& arg1 ) {
  return State< Node11, Node12, Tail... >::make( Node11( arg1 ), src );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node12, Tail... > > const& src ) {
  std::shared_ptr< Rules > const& content = std::shared_ptr< Rules >( new RulesNull(  ) );
  std::shared_ptr< State< Node12, Tail... > > const& tail = src;
  return end_transition( State< Node15, Node12, Tail... >::make( Node15( content ), tail ) );
}

template< typename... Tail >
auto andThen_transition( std::shared_ptr< State< Node13, Tail... > > const& src, std::string const& arg1 ) {
  return State< Node13, Node13, Tail... >::make( Node13( arg1 ), src );
}

template< typename... Tail >
auto rule_transition( std::shared_ptr< State< Node13, Tail... > > const& src, std::string const& arg1 ) {
  std::shared_ptr< RuleTail > const& content = std::shared_ptr< RuleTail >( new RuleTailEpsilon(  ) );
  std::shared_ptr< State< Node13, Tail... > > const& tail = src;
  return rule_transition( State< Node14, Node13, Tail... >::make( Node14( content ), tail ), arg1 );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node13, Tail... > > const& src ) {
  std::shared_ptr< RuleTail > const& content = std::shared_ptr< RuleTail >( new RuleTailEpsilon(  ) );
  std::shared_ptr< State< Node13, Tail... > > const& tail = src;
  return end_transition( State< Node14, Node13, Tail... >::make( Node14( content ), tail ) );
}

template< typename... Tail >
auto rule_transition( std::shared_ptr< State< Node14, Node13, Node7, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->head.arg1;
  std::shared_ptr< RuleTail > const& x2 = src->head.arg1;
  std::shared_ptr< RuleTail > const& content = std::shared_ptr< RuleTail >( new RuleTailTo( x1, x2 ) );
  std::shared_ptr< State< Node7, Tail... > > const& tail = src->tail->tail;
  return rule_transition( State< Node6, Node7, Tail... >::make( Node6( content ), tail ), arg1 );
}

template< typename... Tail >
auto rule_transition( std::shared_ptr< State< Node14, Node13, Node13, Tail... > > const& src, std::string const& arg1 ) {
  std::string const& x1 = src->tail->head.arg1;
  std::shared_ptr< RuleTail > const& x2 = src->head.arg1;
  std::shared_ptr< RuleTail > const& content = std::shared_ptr< RuleTail >( new RuleTailTo( x1, x2 ) );
  std::shared_ptr< State< Node13, Tail... > > const& tail = src->tail->tail;
  return rule_transition( State< Node14, Node13, Tail... >::make( Node14( content ), tail ), arg1 );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node14, Node13, Node7, Tail... > > const& src ) {
  std::string const& x1 = src->tail->head.arg1;
  std::shared_ptr< RuleTail > const& x2 = src->head.arg1;
  std::shared_ptr< RuleTail > const& content = std::shared_ptr< RuleTail >( new RuleTailTo( x1, x2 ) );
  std::shared_ptr< State< Node7, Tail... > > const& tail = src->tail->tail;
  return end_transition( State< Node6, Node7, Tail... >::make( Node6( content ), tail ) );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node14, Node13, Node13, Tail... > > const& src ) {
  std::string const& x1 = src->tail->head.arg1;
  std::shared_ptr< RuleTail > const& x2 = src->head.arg1;
  std::shared_ptr< RuleTail > const& content = std::shared_ptr< RuleTail >( new RuleTailTo( x1, x2 ) );
  std::shared_ptr< State< Node13, Tail... > > const& tail = src->tail->tail;
  return end_transition( State< Node14, Node13, Tail... >::make( Node14( content ), tail ) );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node15, Node12, Node4, Tail... > > const& src ) {
  std::shared_ptr< Rule > const& x1 = src->tail->head.arg1;
  std::shared_ptr< Rules > const& x2 = src->head.arg1;
  std::shared_ptr< Rules > const& content = std::shared_ptr< Rules >( new RulesCons( x1, x2 ) );
  std::shared_ptr< State< Node4, Tail... > > const& tail = src->tail->tail;
  return end_transition( State< Node3, Node4, Tail... >::make( Node3( content ), tail ) );
}

template< typename... Tail >
auto end_transition( std::shared_ptr< State< Node15, Node12, Node12, Tail... > > const& src ) {
  std::shared_ptr< Rule > const& x1 = src->tail->head.arg1;
  std::shared_ptr< Rules > const& x2 = src->head.arg1;
  std::shared_ptr< Rules > const& content = std::shared_ptr< Rules >( new RulesCons( x1, x2 ) );
  std::shared_ptr< State< Node12, Tail... > > const& tail = src->tail->tail;
  return end_transition( State< Node15, Node12, Tail... >::make( Node15( content ), tail ) );
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

