
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template< typename Head, typename... Tail >
State< Head, Tail... >::State( Head const& head_, std::shared_ptr< State< Tail... > > const& tail_ )
  :head( head_ ), tail( tail_ ) {}

template< typename Head, typename... Tail >
std::shared_ptr< State< Head, Tail... > > State< Head, Tail... >::make( Head const& head, std::shared_ptr< State< Tail... > > const& tail ) {
  std::shared_ptr< State< Head, Tail... > > result( new State< Head, Tail... >( head, tail ) );
  result->this_ = result;
  return result;
}


template< typename Head, typename... Tail >
auto State< Head, Tail... >::end() {
  return end_transition( this_ );
}

template< typename Head, typename... Tail >
auto State< Head, Tail... >::O() {
  return O_transition( this_ );
}

template< typename Head, typename... Tail >
auto State< Head, Tail... >::I() {
  return I_transition( this_ );
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template< typename... Stack >
auto end_transition( std::shared_ptr< State< Stack... > > const& src ) {
  return reduce( src )->end();
}

template< typename... Stack >
auto O_transition( std::shared_ptr< State< Stack... > > const& src ) {
  return reduce( src )->O();
}

template< typename... Stack >
auto I_transition( std::shared_ptr< State< Stack... > > const& src ) {
  return reduce( src )->I();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// shift transitions

template< typename Prev >
inline auto end_transition( std::shared_ptr< State< Node2, Prev > > const& src ) {
  return src->head.content;
}

template< typename... Tail >
auto I_transition( std::shared_ptr< State< Node1, Tail... > > const& src ) {
  return State< Node12, Node1, Tail... >::make( Node12(), src );
}

template< typename... Tail >
auto I_transition( std::shared_ptr< State< Node3, Tail... > > const& src ) {
  return State< Node8, Node3, Tail... >::make( Node8(), src );
}

template< typename... Tail >
auto I_transition( std::shared_ptr< State< Node4, Tail... > > const& src ) {
  return State< Node8, Node4, Tail... >::make( Node8(), src );
}

template< typename... Tail >
auto I_transition( std::shared_ptr< State< Node5, Tail... > > const& src ) {
  return State< Node8, Node5, Tail... >::make( Node8(), src );
}

template< typename... Tail >
auto I_transition( std::shared_ptr< State< Node8, Tail... > > const& src ) {
  return State< Node14, Node8, Tail... >::make( Node14(), src );
}

template< typename... Tail >
auto I_transition( std::shared_ptr< State< Node10, Tail... > > const& src ) {
  return State< Node19, Node10, Tail... >::make( Node19(), src );
}

template< typename... Tail >
auto I_transition( std::shared_ptr< State< Node11, Tail... > > const& src ) {
  return State< Node14, Node11, Tail... >::make( Node14(), src );
}

template< typename... Tail >
auto I_transition( std::shared_ptr< State< Node12, Tail... > > const& src ) {
  return State< Node14, Node12, Tail... >::make( Node14(), src );
}

template< typename... Tail >
auto I_transition( std::shared_ptr< State< Node14, Tail... > > const& src ) {
  return State< Node4, Node14, Tail... >::make( Node4(), src );
}

template< typename... Tail >
auto I_transition( std::shared_ptr< State< Node16, Tail... > > const& src ) {
  return State< Node17, Node16, Tail... >::make( Node17(), src );
}

template< typename... Tail >
auto I_transition( std::shared_ptr< State< Node17, Tail... > > const& src ) {
  return State< Node19, Node17, Tail... >::make( Node19(), src );
}

template< typename... Tail >
auto I_transition( std::shared_ptr< State< Node19, Tail... > > const& src ) {
  return State< Node25, Node19, Tail... >::make( Node25(), src );
}

template< typename... Tail >
auto I_transition( std::shared_ptr< State< Node21, Tail... > > const& src ) {
  return State< Node31, Node21, Tail... >::make( Node31(), src );
}

template< typename... Tail >
auto I_transition( std::shared_ptr< State< Node22, Tail... > > const& src ) {
  return State< Node4, Node22, Tail... >::make( Node4(), src );
}

template< typename... Tail >
auto I_transition( std::shared_ptr< State< Node25, Tail... > > const& src ) {
  return State< Node17, Node25, Tail... >::make( Node17(), src );
}

template< typename... Tail >
auto I_transition( std::shared_ptr< State< Node28, Tail... > > const& src ) {
  return State< Node25, Node28, Tail... >::make( Node25(), src );
}

template< typename... Tail >
auto I_transition( std::shared_ptr< State< Node31, Tail... > > const& src ) {
  return State< Node31, Node31, Tail... >::make( Node31(), src );
}


template< typename... Tail >
auto O_transition( std::shared_ptr< State< Node1, Tail... > > const& src ) {
  return State< Node5, Node1, Tail... >::make( Node5(), src );
}

template< typename... Tail >
auto O_transition( std::shared_ptr< State< Node3, Tail... > > const& src ) {
  return State< Node3, Node3, Tail... >::make( Node3(), src );
}

template< typename... Tail >
auto O_transition( std::shared_ptr< State< Node4, Tail... > > const& src ) {
  return State< Node3, Node4, Tail... >::make( Node3(), src );
}

template< typename... Tail >
auto O_transition( std::shared_ptr< State< Node5, Tail... > > const& src ) {
  return State< Node3, Node5, Tail... >::make( Node3(), src );
}

template< typename... Tail >
auto O_transition( std::shared_ptr< State< Node8, Tail... > > const& src ) {
  return State< Node10, Node8, Tail... >::make( Node10(), src );
}

template< typename... Tail >
auto O_transition( std::shared_ptr< State< Node10, Tail... > > const& src ) {
  return State< Node16, Node10, Tail... >::make( Node16(), src );
}

template< typename... Tail >
auto O_transition( std::shared_ptr< State< Node11, Tail... > > const& src ) {
  return State< Node10, Node11, Tail... >::make( Node10(), src );
}

template< typename... Tail >
auto O_transition( std::shared_ptr< State< Node12, Tail... > > const& src ) {
  return State< Node10, Node12, Tail... >::make( Node10(), src );
}

template< typename... Tail >
auto O_transition( std::shared_ptr< State< Node14, Tail... > > const& src ) {
  return State< Node21, Node14, Tail... >::make( Node21(), src );
}

template< typename... Tail >
auto O_transition( std::shared_ptr< State< Node16, Tail... > > const& src ) {
  return State< Node11, Node16, Tail... >::make( Node11(), src );
}

template< typename... Tail >
auto O_transition( std::shared_ptr< State< Node17, Tail... > > const& src ) {
  return State< Node16, Node17, Tail... >::make( Node16(), src );
}

template< typename... Tail >
auto O_transition( std::shared_ptr< State< Node19, Tail... > > const& src ) {
  return State< Node22, Node19, Tail... >::make( Node22(), src );
}

template< typename... Tail >
auto O_transition( std::shared_ptr< State< Node21, Tail... > > const& src ) {
  return State< Node28, Node21, Tail... >::make( Node28(), src );
}

template< typename... Tail >
auto O_transition( std::shared_ptr< State< Node22, Tail... > > const& src ) {
  return State< Node21, Node22, Tail... >::make( Node21(), src );
}

template< typename... Tail >
auto O_transition( std::shared_ptr< State< Node25, Tail... > > const& src ) {
  return State< Node11, Node25, Tail... >::make( Node11(), src );
}

template< typename... Tail >
auto O_transition( std::shared_ptr< State< Node28, Tail... > > const& src ) {
  return State< Node22, Node28, Tail... >::make( Node22(), src );
}

template< typename... Tail >
auto O_transition( std::shared_ptr< State< Node31, Tail... > > const& src ) {
  return State< Node28, Node31, Tail... >::make( Node28(), src );
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// reduces

// ruleS0 : S -> "O()" Mod0
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node33, Node5, Node1, Tail... > > const& src ) {
  Mod0 const& arg1 = src->tail->head.arg1;
  S content( new RuleS0( arg1 ) );
  std::shared_ptr< State< Node1, Tail... > > const& tail = src->tail->tail;
  return State< Node2, Node1, Tail... >::make( Node2( content ), tail );
}
// ruleS1 : S -> "I()" Mod1
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node34, Node12, Node1, Tail... > > const& src ) {
  Mod1 const& arg1 = src->tail->head.arg1;
  S content( new RuleS1( arg1 ) );
  std::shared_ptr< State< Node1, Tail... > > const& tail = src->tail->tail;
  return State< Node2, Node1, Tail... >::make( Node2( content ), tail );
}
// accept : Mod0 -> eps
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node3, Tail... > > const& src ) {
  Mod0 content( new Accept(  ) );
  std::shared_ptr< State< Node3, Tail... > > const& tail = src;
  return State< Node6, Node3, Tail... >::make( Node6( content ), tail );
}
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node4, Tail... > > const& src ) {
  Mod0 content( new Accept(  ) );
  std::shared_ptr< State< Node4, Tail... > > const& tail = src;
  return State< Node23, Node4, Tail... >::make( Node23( content ), tail );
}
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node5, Tail... > > const& src ) {
  Mod0 content( new Accept(  ) );
  std::shared_ptr< State< Node5, Tail... > > const& tail = src;
  return State< Node33, Node5, Tail... >::make( Node33( content ), tail );
}
// rule00 : Mod0 -> "O()" Mod0
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node6, Node3, Node3, Tail... > > const& src ) {
  Mod0 const& arg1 = src->tail->head.arg1;
  Mod0 content( new Rule00( arg1 ) );
  std::shared_ptr< State< Node3, Tail... > > const& tail = src->tail->tail;
  return State< Node6, Node3, Tail... >::make( Node6( content ), tail );
}
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node6, Node3, Node4, Tail... > > const& src ) {
  Mod0 const& arg1 = src->tail->head.arg1;
  Mod0 content( new Rule00( arg1 ) );
  std::shared_ptr< State< Node4, Tail... > > const& tail = src->tail->tail;
  return State< Node23, Node4, Tail... >::make( Node23( content ), tail );
}
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node6, Node3, Node5, Tail... > > const& src ) {
  Mod0 const& arg1 = src->tail->head.arg1;
  Mod0 content( new Rule00( arg1 ) );
  std::shared_ptr< State< Node5, Tail... > > const& tail = src->tail->tail;
  return State< Node33, Node5, Tail... >::make( Node33( content ), tail );
}
// rule01 : Mod0 -> "I()" Mod1
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node7, Node8, Node3, Tail... > > const& src ) {
  Mod1 const& arg1 = src->tail->head.arg1;
  Mod0 content( new Rule01( arg1 ) );
  std::shared_ptr< State< Node3, Tail... > > const& tail = src->tail->tail;
  return State< Node6, Node3, Tail... >::make( Node6( content ), tail );
}
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node7, Node8, Node4, Tail... > > const& src ) {
  Mod1 const& arg1 = src->tail->head.arg1;
  Mod0 content( new Rule01( arg1 ) );
  std::shared_ptr< State< Node4, Tail... > > const& tail = src->tail->tail;
  return State< Node23, Node4, Tail... >::make( Node23( content ), tail );
}
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node7, Node8, Node5, Tail... > > const& src ) {
  Mod1 const& arg1 = src->tail->head.arg1;
  Mod0 content( new Rule01( arg1 ) );
  std::shared_ptr< State< Node5, Tail... > > const& tail = src->tail->tail;
  return State< Node33, Node5, Tail... >::make( Node33( content ), tail );
}
// rule10 : Mod1 -> "O()" Mod2
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node9, Node10, Node8, Tail... > > const& src ) {
  Mod2 const& arg1 = src->tail->head.arg1;
  Mod1 content( new Rule10( arg1 ) );
  std::shared_ptr< State< Node8, Tail... > > const& tail = src->tail->tail;
  return State< Node7, Node8, Tail... >::make( Node7( content ), tail );
}
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node9, Node10, Node11, Tail... > > const& src ) {
  Mod2 const& arg1 = src->tail->head.arg1;
  Mod1 content( new Rule10( arg1 ) );
  std::shared_ptr< State< Node11, Tail... > > const& tail = src->tail->tail;
  return State< Node24, Node11, Tail... >::make( Node24( content ), tail );
}
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node9, Node10, Node12, Tail... > > const& src ) {
  Mod2 const& arg1 = src->tail->head.arg1;
  Mod1 content( new Rule10( arg1 ) );
  std::shared_ptr< State< Node12, Tail... > > const& tail = src->tail->tail;
  return State< Node34, Node12, Tail... >::make( Node34( content ), tail );
}
// rule11 : Mod1 -> "I()" Mod3
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node13, Node14, Node8, Tail... > > const& src ) {
  Mod3 const& arg1 = src->tail->head.arg1;
  Mod1 content( new Rule11( arg1 ) );
  std::shared_ptr< State< Node8, Tail... > > const& tail = src->tail->tail;
  return State< Node7, Node8, Tail... >::make( Node7( content ), tail );
}
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node13, Node14, Node11, Tail... > > const& src ) {
  Mod3 const& arg1 = src->tail->head.arg1;
  Mod1 content( new Rule11( arg1 ) );
  std::shared_ptr< State< Node11, Tail... > > const& tail = src->tail->tail;
  return State< Node24, Node11, Tail... >::make( Node24( content ), tail );
}
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node13, Node14, Node12, Tail... > > const& src ) {
  Mod3 const& arg1 = src->tail->head.arg1;
  Mod1 content( new Rule11( arg1 ) );
  std::shared_ptr< State< Node12, Tail... > > const& tail = src->tail->tail;
  return State< Node34, Node12, Tail... >::make( Node34( content ), tail );
}
// rule20 : Mod2 -> "O()" Mod4
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node15, Node16, Node10, Tail... > > const& src ) {
  Mod4 const& arg1 = src->tail->head.arg1;
  Mod2 content( new Rule20( arg1 ) );
  std::shared_ptr< State< Node10, Tail... > > const& tail = src->tail->tail;
  return State< Node9, Node10, Tail... >::make( Node9( content ), tail );
}
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node15, Node16, Node17, Tail... > > const& src ) {
  Mod4 const& arg1 = src->tail->head.arg1;
  Mod2 content( new Rule20( arg1 ) );
  std::shared_ptr< State< Node17, Tail... > > const& tail = src->tail->tail;
  return State< Node26, Node17, Tail... >::make( Node26( content ), tail );
}
// rule21 : Mod2 -> "I()" Mod5
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node18, Node19, Node10, Tail... > > const& src ) {
  Mod5 const& arg1 = src->tail->head.arg1;
  Mod2 content( new Rule21( arg1 ) );
  std::shared_ptr< State< Node10, Tail... > > const& tail = src->tail->tail;
  return State< Node9, Node10, Tail... >::make( Node9( content ), tail );
}
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node18, Node19, Node17, Tail... > > const& src ) {
  Mod5 const& arg1 = src->tail->head.arg1;
  Mod2 content( new Rule21( arg1 ) );
  std::shared_ptr< State< Node17, Tail... > > const& tail = src->tail->tail;
  return State< Node26, Node17, Tail... >::make( Node26( content ), tail );
}
// rule30 : Mod3 -> "O()" Mod6
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node20, Node21, Node14, Tail... > > const& src ) {
  Mod6 const& arg1 = src->tail->head.arg1;
  Mod3 content( new Rule30( arg1 ) );
  std::shared_ptr< State< Node14, Tail... > > const& tail = src->tail->tail;
  return State< Node13, Node14, Tail... >::make( Node13( content ), tail );
}
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node20, Node21, Node22, Tail... > > const& src ) {
  Mod6 const& arg1 = src->tail->head.arg1;
  Mod3 content( new Rule30( arg1 ) );
  std::shared_ptr< State< Node22, Tail... > > const& tail = src->tail->tail;
  return State< Node27, Node22, Tail... >::make( Node27( content ), tail );
}
// rule31 : Mod3 -> "I()" Mod0
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node23, Node4, Node14, Tail... > > const& src ) {
  Mod0 const& arg1 = src->tail->head.arg1;
  Mod3 content( new Rule31( arg1 ) );
  std::shared_ptr< State< Node14, Tail... > > const& tail = src->tail->tail;
  return State< Node13, Node14, Tail... >::make( Node13( content ), tail );
}
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node23, Node4, Node22, Tail... > > const& src ) {
  Mod0 const& arg1 = src->tail->head.arg1;
  Mod3 content( new Rule31( arg1 ) );
  std::shared_ptr< State< Node22, Tail... > > const& tail = src->tail->tail;
  return State< Node27, Node22, Tail... >::make( Node27( content ), tail );
}
// rule40 : Mod4 -> "O()" Mod1
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node24, Node11, Node16, Tail... > > const& src ) {
  Mod1 const& arg1 = src->tail->head.arg1;
  Mod4 content( new Rule40( arg1 ) );
  std::shared_ptr< State< Node16, Tail... > > const& tail = src->tail->tail;
  return State< Node15, Node16, Tail... >::make( Node15( content ), tail );
}
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node24, Node11, Node25, Tail... > > const& src ) {
  Mod1 const& arg1 = src->tail->head.arg1;
  Mod4 content( new Rule40( arg1 ) );
  std::shared_ptr< State< Node25, Tail... > > const& tail = src->tail->tail;
  return State< Node29, Node25, Tail... >::make( Node29( content ), tail );
}
// rule41 : Mod4 -> "I()" Mod2
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node26, Node17, Node16, Tail... > > const& src ) {
  Mod2 const& arg1 = src->tail->head.arg1;
  Mod4 content( new Rule41( arg1 ) );
  std::shared_ptr< State< Node16, Tail... > > const& tail = src->tail->tail;
  return State< Node15, Node16, Tail... >::make( Node15( content ), tail );
}
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node26, Node17, Node25, Tail... > > const& src ) {
  Mod2 const& arg1 = src->tail->head.arg1;
  Mod4 content( new Rule41( arg1 ) );
  std::shared_ptr< State< Node25, Tail... > > const& tail = src->tail->tail;
  return State< Node29, Node25, Tail... >::make( Node29( content ), tail );
}
// rule50 : Mod5 -> "O()" Mod3
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node27, Node22, Node19, Tail... > > const& src ) {
  Mod3 const& arg1 = src->tail->head.arg1;
  Mod5 content( new Rule50( arg1 ) );
  std::shared_ptr< State< Node19, Tail... > > const& tail = src->tail->tail;
  return State< Node18, Node19, Tail... >::make( Node18( content ), tail );
}
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node27, Node22, Node28, Tail... > > const& src ) {
  Mod3 const& arg1 = src->tail->head.arg1;
  Mod5 content( new Rule50( arg1 ) );
  std::shared_ptr< State< Node28, Tail... > > const& tail = src->tail->tail;
  return State< Node30, Node28, Tail... >::make( Node30( content ), tail );
}
// rule51 : Mod5 -> "I()" Mod4
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node29, Node25, Node19, Tail... > > const& src ) {
  Mod4 const& arg1 = src->tail->head.arg1;
  Mod5 content( new Rule51( arg1 ) );
  std::shared_ptr< State< Node19, Tail... > > const& tail = src->tail->tail;
  return State< Node18, Node19, Tail... >::make( Node18( content ), tail );
}
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node29, Node25, Node28, Tail... > > const& src ) {
  Mod4 const& arg1 = src->tail->head.arg1;
  Mod5 content( new Rule51( arg1 ) );
  std::shared_ptr< State< Node28, Tail... > > const& tail = src->tail->tail;
  return State< Node30, Node28, Tail... >::make( Node30( content ), tail );
}
// rule60 : Mod6 -> "O()" Mod5
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node30, Node28, Node21, Tail... > > const& src ) {
  Mod5 const& arg1 = src->tail->head.arg1;
  Mod6 content( new Rule60( arg1 ) );
  std::shared_ptr< State< Node21, Tail... > > const& tail = src->tail->tail;
  return State< Node20, Node21, Tail... >::make( Node20( content ), tail );
}
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node30, Node28, Node31, Tail... > > const& src ) {
  Mod5 const& arg1 = src->tail->head.arg1;
  Mod6 content( new Rule60( arg1 ) );
  std::shared_ptr< State< Node31, Tail... > > const& tail = src->tail->tail;
  return State< Node32, Node31, Tail... >::make( Node32( content ), tail );
}
// rule61 : Mod6 -> "I()" Mod6
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node32, Node31, Node21, Tail... > > const& src ) {
  Mod6 const& arg1 = src->tail->head.arg1;
  Mod6 content( new Rule61( arg1 ) );
  std::shared_ptr< State< Node21, Tail... > > const& tail = src->tail->tail;
  return State< Node20, Node21, Tail... >::make( Node20( content ), tail );
}
template< typename... Tail >
auto reduce( std::shared_ptr< State< Node32, Node31, Node31, Tail... > > const& src ) {
  Mod6 const& arg1 = src->tail->head.arg1;
  Mod6 content( new Rule61( arg1 ) );
  std::shared_ptr< State< Node31, Tail... > > const& tail = src->tail->tail;
  return State< Node32, Node31, Tail... >::make( Node32( content ), tail );
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

